// Auto-generated file - DO NOT EDIT
// Generated by scripts/embed-docs.js

export const embeddedDocs = {
  "ADMIN_DESIGN_SYSTEM.md": "# A Lo Cubano Admin Design System\n\n## Clean, Professional Interface - No Emojis, Consistent Components\n\nThis document provides HTML templates and usage guidelines for implementing the unified admin design system across all A Lo Cubano Boulder Fest admin pages.\n\n## Design Principles\n\n- **No Emojis**: Clean, text-based navigation and headers\n- **Consistent Visual Language**: Unified components across all pages\n- **Professional Aesthetic**: Cuban color palette (Blue #5b6bb5, Red #cc2936)\n- **Typography Hierarchy**: Bebas Neue for headings, clean sans-serif for body\n- **Touch-Friendly**: 44px minimum touch targets\n- **Accessible**: WCAG compliant with focus states and reduced motion support\n\n## Color System\n\n```css\n/* Cuban Festival Colors */\n--color-blue: #5b6bb5    /* Primary brand blue */\n--color-red: #cc2936     /* Secondary brand red */\n--color-black: #000000   /* Text primary */\n--color-white: #ffffff   /* Background/inverse text */\n```\n\n## Component Library\n\n### 1. Admin Header Component\n\nUse this header structure on ALL admin pages:\n\n```html\n<header class=\"admin-header\">\n  <div class=\"admin-header-content\">\n    <div>\n      <h1 class=\"admin-header-title\">Dashboard</h1>\n      <p class=\"admin-header-subtitle\">A Lo Cubano Boulder Fest - Festival Management</p>\n    </div>\n    <div class=\"admin-header-actions\">\n      <button class=\"admin-btn admin-btn-primary\">\n        <span>Logout</span>\n      </button>\n    </div>\n  </div>\n</header>\n```\n\n### 2. Admin Navigation Component\n\nConsistent navigation across all admin pages:\n\n```html\n<nav class=\"admin-navigation\">\n  <ul class=\"admin-nav-list\">\n    <li class=\"admin-nav-item\">\n      <a href=\"/admin\" class=\"admin-nav-link\">\n        <span>Portal</span>\n      </a>\n    </li>\n    <li class=\"admin-nav-item\">\n      <a href=\"/admin/dashboard\" class=\"admin-nav-link active\">\n        <span>Dashboard</span>\n      </a>\n    </li>\n    <li class=\"admin-nav-item\">\n      <a href=\"/admin/analytics\" class=\"admin-nav-link\">\n        <span>Analytics</span>\n      </a>\n    </li>\n    <li class=\"admin-nav-item\">\n      <a href=\"/admin/checkin\" class=\"admin-nav-link\">\n        <span>Scanner</span>\n      </a>\n    </li>\n  </ul>\n</nav>\n```\n\n### 3. Status Indicator Component\n\nProfessional status indicators without emojis:\n\n```html\n<div class=\"admin-status-indicator\">\n  <span class=\"admin-status-dot\"></span>\n  <span>All Systems Operational</span>\n</div>\n```\n\n### 4. Button System\n\nConsistent button styling with multiple variants:\n\n```html\n<!-- Primary Action -->\n<button class=\"admin-btn admin-btn-primary\">\n  <span>Primary Action</span>\n</button>\n\n<!-- Secondary Action -->\n<button class=\"admin-btn admin-btn-secondary\">\n  <span>Secondary Action</span>\n</button>\n\n<!-- Ghost/Outline -->\n<button class=\"admin-btn admin-btn-ghost\">\n  <span>Ghost Action</span>\n</button>\n\n<!-- Success Action -->\n<button class=\"admin-btn admin-btn-success\">\n  <span>Success Action</span>\n</button>\n\n<!-- Small Size -->\n<button class=\"admin-btn admin-btn-sm\">\n  <span>Small Button</span>\n</button>\n\n<!-- Large Size -->\n<button class=\"admin-btn admin-btn-lg\">\n  <span>Large Button</span>\n</button>\n\n<!-- Loading State -->\n<button class=\"admin-btn admin-btn-primary admin-btn-loading\">\n  <span>Loading...</span>\n</button>\n```\n\n### 5. Card Components\n\nUnified card system for different content types:\n\n```html\n<!-- Basic Card -->\n<div class=\"admin-card\">\n  <div class=\"admin-card-header\">\n    <div>\n      <h2 class=\"admin-card-title\">Card Title</h2>\n      <p class=\"admin-card-subtitle\">Optional subtitle</p>\n    </div>\n    <div class=\"admin-card-actions\">\n      <button class=\"admin-btn admin-btn-sm\">Action</button>\n    </div>\n  </div>\n  <div class=\"admin-card-body\">\n    <!-- Card content -->\n  </div>\n</div>\n\n<!-- Action Card (clickable) -->\n<div class=\"admin-card admin-action-card\" onclick=\"handleClick()\">\n  <div class=\"admin-card-header\">\n    <h2 class=\"admin-card-title\">\n      <span class=\"card-icon\">D</span>\n      <span>Dashboard</span>\n    </h2>\n  </div>\n  <div class=\"admin-card-body\">\n    <p>Registration management, transactions, and system monitoring</p>\n  </div>\n</div>\n```\n\n### 6. Statistics Cards\n\nClean metrics display without emojis:\n\n```html\n<div class=\"admin-stat-card\">\n  <div class=\"stat-label\">Total Tickets</div>\n  <div class=\"stat-number\">1,247</div>\n  <div class=\"stat-change positive\">↑ 12.5%</div>\n</div>\n\n<div class=\"admin-stat-card\">\n  <div class=\"stat-label\">Revenue</div>\n  <div class=\"stat-number\">$24,890</div>\n  <div class=\"stat-change negative\">↓ 3.2%</div>\n</div>\n```\n\n### 7. Data Tables\n\nProfessional, scannable tables:\n\n```html\n<table class=\"admin-table\">\n  <thead>\n    <tr>\n      <th>Ticket ID</th>\n      <th>Name</th>\n      <th>Email</th>\n      <th>Status</th>\n      <th>Actions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ALB-2024-001</td>\n      <td>John Smith</td>\n      <td>john@example.com</td>\n      <td>\n        <span class=\"status-badge success\">Active</span>\n      </td>\n      <td>\n        <button class=\"admin-btn admin-btn-sm\">Edit</button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n### 8. Status Badges\n\nClean status indicators:\n\n```html\n<span class=\"status-badge success\">Active</span>\n<span class=\"status-badge warning\">Pending</span>\n<span class=\"status-badge info\">Processing</span>\n<span class=\"status-badge error\">Failed</span>\n```\n\n### 9. Grid Layouts\n\nResponsive grid system:\n\n```html\n<!-- Auto-fit grid (recommended for stat cards) -->\n<div class=\"admin-grid auto-fit\">\n  <div class=\"admin-stat-card\">...</div>\n  <div class=\"admin-stat-card\">...</div>\n  <div class=\"admin-stat-card\">...</div>\n</div>\n\n<!-- Two column grid -->\n<div class=\"admin-grid two-column\">\n  <div class=\"admin-card\">...</div>\n  <div class=\"admin-card\">...</div>\n</div>\n```\n\n## Page Templates\n\n### 1. Admin Portal (index.html) - Clean Template\n\n```html\n<!doctype html>\n<html lang=\"en\" data-theme=\"dark\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Admin Portal - A Lo Cubano Boulder Fest</title>\n  \n  <!-- CSS System -->\n  <link rel=\"stylesheet\" href=\"/css/base.css\">\n  <link rel=\"stylesheet\" href=\"/css/typography.css\">\n  <link rel=\"stylesheet\" href=\"/css/components.css\">\n  <link rel=\"stylesheet\" href=\"/css/admin-overrides.css\">\n  \n  <script type=\"module\" src=\"/js/theme-manager.js\"></script>\n</head>\n<body class=\"admin-container\">\n  <!-- Unified Header -->\n  <header class=\"admin-header\">\n    <div class=\"admin-header-content\">\n      <div>\n        <h1 class=\"admin-header-title\">Admin Portal</h1>\n        <p class=\"admin-header-subtitle\">A Lo Cubano Boulder Fest - Central Administration Hub</p>\n      </div>\n      <div class=\"admin-header-actions\">\n        <div class=\"admin-status-indicator\">\n          <span class=\"admin-status-dot\"></span>\n          <span id=\"status\">All Systems Operational</span>\n        </div>\n        <button class=\"admin-btn admin-btn-primary\" onclick=\"logout()\">\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  </header>\n\n  <!-- Quick Actions Section -->\n  <div class=\"admin-card\">\n    <div class=\"admin-card-header\">\n      <h2 class=\"admin-card-title\">Quick Actions</h2>\n    </div>\n    <div class=\"admin-card-body\">\n      <div class=\"admin-grid auto-fit\">\n        <button class=\"admin-btn admin-btn-primary\" onclick=\"location.href='/admin/dashboard'\">\n          <span>Dashboard</span>\n        </button>\n        <button class=\"admin-btn admin-btn-secondary\" onclick=\"location.href='/admin/analytics'\">\n          <span>Analytics</span>\n        </button>\n        <button class=\"admin-btn admin-btn-success\" onclick=\"location.href='/admin/checkin'\">\n          <span>Scanner</span>\n        </button>\n        <button class=\"admin-btn admin-btn-ghost\" onclick=\"syncToSheets()\">\n          <span>Sync Sheets</span>\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Admin Sections -->\n  <div class=\"admin-grid auto-fit\">\n    <!-- Dashboards & Analytics -->\n    <div class=\"admin-card admin-action-card\">\n      <div class=\"admin-card-header\">\n        <h2 class=\"admin-card-title\">\n          <span class=\"card-icon\">D</span>\n          <span>Dashboards & Analytics</span>\n        </h2>\n      </div>\n      <div class=\"admin-card-body\">\n        <p>Registration management, transactions, and comprehensive analytics</p>\n        <div style=\"margin-top: var(--space-lg);\">\n          <a href=\"/admin/dashboard\" class=\"admin-btn admin-btn-sm\">Dashboard</a>\n          <a href=\"/admin/analytics\" class=\"admin-btn admin-btn-sm admin-btn-ghost\">Analytics</a>\n        </div>\n      </div>\n    </div>\n\n    <!-- Authentication & Security -->\n    <div class=\"admin-card admin-action-card\">\n      <div class=\"admin-card-header\">\n        <h2 class=\"admin-card-title\">\n          <span class=\"card-icon\">S</span>\n          <span>Authentication & Security</span>\n        </h2>\n      </div>\n      <div class=\"admin-card-body\">\n        <p>Secure admin authentication and system monitoring</p>\n        <div style=\"margin-top: var(--space-lg);\">\n          <button class=\"admin-btn admin-btn-sm\" onclick=\"testMobileAuth()\">Test Auth</button>\n          <button class=\"admin-btn admin-btn-sm admin-btn-ghost\" onclick=\"viewCSRFToken()\">CSRF Status</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Data Management -->\n    <div class=\"admin-card admin-action-card\">\n      <div class=\"admin-card-header\">\n        <h2 class=\"admin-card-title\">\n          <span class=\"card-icon\">M</span>\n          <span>Data Management</span>\n        </h2>\n      </div>\n      <div class=\"admin-card-body\">\n        <p>Registration data, transaction history, and Google Sheets integration</p>\n        <div style=\"margin-top: var(--space-lg);\">\n          <a href=\"/admin/dashboard#registrations\" class=\"admin-btn admin-btn-sm\">Registrations</a>\n          <button class=\"admin-btn admin-btn-sm admin-btn-ghost\" onclick=\"openGoogleSheets()\">Sheets</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Tools & Utilities -->\n    <div class=\"admin-card admin-action-card\">\n      <div class=\"admin-card-header\">\n        <h2 class=\"admin-card-title\">\n          <span class=\"card-icon\">T</span>\n          <span>Tools & Utilities</span>\n        </h2>\n      </div>\n      <div class=\"admin-card-body\">\n        <p>Database health checks, cache management, and system utilities</p>\n        <div style=\"margin-top: var(--space-lg);\">\n          <button class=\"admin-btn admin-btn-sm\" onclick=\"testDatabase()\">DB Health</button>\n          <button class=\"admin-btn admin-btn-sm admin-btn-ghost\" onclick=\"clearCache()\">Clear Cache</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- API Endpoints Section -->\n  <div class=\"admin-card\">\n    <div class=\"admin-card-header\">\n      <h2 class=\"admin-card-title\">Available API Endpoints</h2>\n    </div>\n    <div class=\"admin-card-body\">\n      <div class=\"admin-grid auto-fit\">\n        <div class=\"endpoint-item\">\n          <span class=\"method\">GET</span>\n          <code>/api/admin/dashboard</code>\n        </div>\n        <div class=\"endpoint-item\">\n          <span class=\"method post\">POST</span>\n          <code>/api/admin/login</code>\n        </div>\n        <div class=\"endpoint-item\">\n          <span class=\"method\">GET</span>\n          <code>/api/admin/analytics</code>\n        </div>\n        <!-- More endpoints... -->\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Your existing JavaScript functions\n  </script>\n</body>\n</html>\n```\n\n### 2. Dashboard Template\n\n```html\n<body class=\"admin-container\">\n  <!-- Unified Header -->\n  <header class=\"admin-header\">\n    <div class=\"admin-header-content\">\n      <div>\n        <h1 class=\"admin-header-title\">Admin Dashboard</h1>\n        <p class=\"admin-header-subtitle\">Festival Management & Analytics</p>\n      </div>\n      <div class=\"admin-header-actions\">\n        <button class=\"admin-btn admin-btn-ghost\" onclick=\"location.href='/admin'\">\n          <span>Portal</span>\n        </button>\n        <button class=\"admin-btn admin-btn-ghost\" onclick=\"location.href='/admin/analytics'\">\n          <span>Analytics</span>\n        </button>\n        <button class=\"admin-btn admin-btn-success\" onclick=\"syncToSheets()\">\n          <span>Sync to Sheets</span>\n        </button>\n        <button class=\"admin-btn admin-btn-primary\" onclick=\"logout()\">\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  </header>\n\n  <!-- Statistics Grid -->\n  <div class=\"admin-grid auto-fit\" id=\"statsGrid\">\n    <!-- Stats cards will be populated here -->\n  </div>\n\n  <!-- Registrations Section -->\n  <div class=\"admin-card\">\n    <div class=\"admin-card-header\">\n      <h2 class=\"admin-card-title\">Registrations</h2>\n      <div class=\"admin-card-actions\">\n        <button class=\"admin-btn admin-btn-sm\" onclick=\"exportToCSV()\">\n          <span>Export CSV</span>\n        </button>\n      </div>\n    </div>\n    <div class=\"admin-card-body\">\n      <!-- Search and filters -->\n      <div style=\"display: flex; gap: var(--space-md); margin-bottom: var(--space-lg); flex-wrap: wrap;\">\n        <input type=\"text\" id=\"searchInput\" class=\"form-input-type\" placeholder=\"Search by name, email, or ticket ID...\" style=\"flex: 1; min-width: 250px;\" />\n        <select id=\"statusFilter\" class=\"form-input-type\" style=\"min-width: 120px;\">\n          <option value=\"\">All Status</option>\n          <option value=\"valid\">Valid</option>\n          <option value=\"cancelled\">Cancelled</option>\n        </select>\n        <button class=\"admin-btn\" onclick=\"searchRegistrations()\">\n          <span>Search</span>\n        </button>\n      </div>\n      \n      <!-- Data table -->\n      <div id=\"registrationsTable\">\n        <!-- Table content will be populated here -->\n      </div>\n    </div>\n  </div>\n</body>\n```\n\n## Usage Guidelines\n\n### 1. Remove All Emojis\n**BEFORE:**\n```html\n<h1>🎯 Admin Portal</h1>\n<button>📊 Dashboard</button>\n<span>⚡ Quick Actions</span>\n```\n\n**AFTER:**\n```html\n<h1 class=\"admin-header-title\">Admin Portal</h1>\n<button class=\"admin-btn\">Dashboard</button>\n<h2 class=\"admin-card-title\">Quick Actions</h2>\n```\n\n### 2. Standardize Navigation\n**BEFORE:**\n```html\n<div class=\"header-actions\">\n  <button onclick=\"location.href='/admin'\">🎯 Portal</button>\n  <button onclick=\"location.href='/admin/analytics'\">📈 Analytics</button>\n</div>\n```\n\n**AFTER:**\n```html\n<nav class=\"admin-navigation\">\n  <ul class=\"admin-nav-list\">\n    <li><a href=\"/admin\" class=\"admin-nav-link\">Portal</a></li>\n    <li><a href=\"/admin/analytics\" class=\"admin-nav-link\">Analytics</a></li>\n  </ul>\n</nav>\n```\n\n### 3. Unify Card Components\n**BEFORE:**\n```html\n<div class=\"section-card ticket-card\">\n  <h2><span class=\"icon\">📊</span> Dashboards & Analytics</h2>\n  <ul class=\"links-list\">...</ul>\n</div>\n```\n\n**AFTER:**\n```html\n<div class=\"admin-card admin-action-card\">\n  <div class=\"admin-card-header\">\n    <h2 class=\"admin-card-title\">\n      <span class=\"card-icon\">D</span>\n      <span>Dashboards & Analytics</span>\n    </h2>\n  </div>\n  <div class=\"admin-card-body\">...</div>\n</div>\n```\n\n### 4. Consistent Button Usage\n**BEFORE:**\n```html\n<a href=\"/admin/dashboard\" class=\"action-btn form-button-type\">📊 Dashboard</a>\n<button class=\"btn btn-primary\" onclick=\"logout()\">Logout</button>\n```\n\n**AFTER:**\n```html\n<a href=\"/admin/dashboard\" class=\"admin-btn admin-btn-primary\">Dashboard</a>\n<button class=\"admin-btn admin-btn-primary\" onclick=\"logout()\">Logout</button>\n```\n\n## Implementation Checklist\n\n### Admin Portal (index.html)\n- [ ] Replace emoji-heavy header with clean admin-header component\n- [ ] Update all navigation links to use admin-nav-link classes\n- [ ] Convert section cards to admin-action-card components\n- [ ] Remove all emoji icons from titles and buttons\n- [ ] Replace action-btn with admin-btn classes\n\n### Dashboard (dashboard.html)\n- [ ] Add consistent admin-header component\n- [ ] Replace inline styles with admin-card components\n- [ ] Update button classes to admin-btn system\n- [ ] Ensure table uses admin-table classes\n- [ ] Add admin-navigation component\n\n### Analytics (analytics.html)\n- [ ] Implement unified header across all pages\n- [ ] Remove emoji icons from headers and navigation\n- [ ] Update button styling to match admin-btn system\n- [ ] Use admin-card for chart containers\n\n### Login (login.html)\n- [ ] Already clean - minimal changes needed\n- [ ] Ensure button uses admin-btn-primary class\n- [ ] Consistent with overall design system\n\n### Check-in Scanner\n- [ ] Add mobile-optimized admin-header\n- [ ] Use admin-btn for all actions\n- [ ] Maintain mobile-first approach\n\n## Responsive Behavior\n\nThe design system is fully responsive:\n\n- **Mobile (≤768px)**: Single column layout, full-width buttons, stacked navigation\n- **Tablet (769px-1024px)**: Two-column grids, horizontal navigation\n- **Desktop (≥1025px)**: Full grid layouts, optimized spacing\n\n## Accessibility Features\n\n- **Focus States**: 3px outline with proper contrast\n- **Touch Targets**: Minimum 44px for mobile interactions\n- **Screen Readers**: Semantic HTML with aria labels\n- **High Contrast**: Enhanced borders and typography\n- **Reduced Motion**: Respects user motion preferences\n\n## Color Usage Guidelines\n\n### Primary Actions\n- Use `admin-btn-primary` (Blue #5b6bb5) for main actions like \"Login\", \"Save\"\n- Use `admin-btn-secondary` (Red #cc2936) for secondary actions like \"Cancel\", \"Delete\"\n\n### Status Colors\n- Success: Green (#22c55e) for positive states\n- Warning: Orange (#f59e0b) for attention states\n- Error: Red (#cc2936) for error states\n- Info: Blue (#5b6bb5) for informational states\n\n### Text Hierarchy\n- Primary text: Use existing color tokens\n- Secondary text: Muted for descriptions\n- Links: Blue for interactive elements\n\nThis design system ensures a professional, cohesive experience across all admin pages while maintaining the A Lo Cubano Cuban aesthetic and removing the excessive emoji usage.",
  "CONNECTION_MANAGER.md": "# Database Connection Pool Manager\n\n## Overview\n\nThe Database Connection Pool Manager provides enterprise-grade connection pooling for the A Lo Cubano Boulder Fest serverless application. It implements a production-ready resource leasing system with automatic cleanup, health monitoring, and graceful shutdown coordination.\n\n## Key Features\n\n### 🔗 Resource Leasing System\n- **Connection Acquisition**: Thread-safe connection leasing with timeout protection\n- **Lease Tracking**: Automatic cleanup of timed-out leases\n- **Operation Tagging**: Track database operations for debugging and monitoring\n\n### 🏊 Connection Pool Management\n- **Serverless Optimized**: Default limits (Vercel: 2 connections, Local: 5 connections)\n- **Connection Reuse**: Efficient connection lifecycle management\n- **Health Monitoring**: Automatic connection health checks and recovery\n\n### 🔄 State Machine Integration\n- **Connection States**: IDLE → ACTIVE → DRAINING → SHUTDOWN\n- **Atomic Transitions**: Thread-safe state management\n- **Graceful Shutdown**: Coordinated cleanup across all active operations\n\n### ⚡ Serverless Optimizations\n- **Cold Start Mitigation**: Fast connection acquisition\n- **Memory Pressure Handling**: Automatic resource cleanup\n- **Vercel Timeout Awareness**: Optimized for serverless function limits\n\n## Installation and Setup\n\n### 1. Basic Integration\n\n```javascript\nimport { acquireDbLease, getConnectionManager } from '../lib/connection-manager.js';\n\n// Simple database operation\nasync function getUserRegistration(email) {\n  const lease = await acquireDbLease('get-user-registration');\n\n  try {\n    const result = await lease.execute(\n      'SELECT * FROM registrations WHERE email = ?',\n      [email]\n    );\n    return result.rows[0];\n  } finally {\n    lease.release(); // Always release the lease\n  }\n}\n```\n\n### 2. Transaction Management\n\n```javascript\nasync function createTicketPurchase(ticketData) {\n  const lease = await acquireDbLease('create-ticket-purchase');\n\n  try {\n    const transaction = await lease.transaction();\n\n    try {\n      // Create ticket\n      await transaction.execute(\n        'INSERT INTO tickets (id, type, price) VALUES (?, ?, ?)',\n        [ticketData.id, ticketData.type, ticketData.price]\n      );\n\n      // Update inventory\n      await transaction.execute(\n        'UPDATE inventory SET available = available - 1 WHERE type = ?',\n        [ticketData.type]\n      );\n\n      await transaction.commit();\n      return { success: true };\n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  } finally {\n    lease.release();\n  }\n}\n```\n\n### 3. Service Class Integration\n\n```javascript\nimport { getConnectionManager } from '../lib/connection-manager.js';\n\nclass RegistrationService {\n  constructor() {\n    this.connectionManager = getConnectionManager();\n  }\n\n  async createRegistration(data) {\n    const lease = await this.connectionManager.acquireLease(\n      `registration-${data.email}`\n    );\n\n    try {\n      // Your database operations here\n      const result = await lease.execute(\n        'INSERT INTO registrations (...) VALUES (...)',\n        [...]\n      );\n\n      return result;\n    } finally {\n      lease.release();\n    }\n  }\n}\n```\n\n## Configuration\n\n### Environment-Specific Settings\n\nThe connection manager automatically optimizes for different environments:\n\n```javascript\n// Serverless (Vercel) - Conservative limits\nconst serverlessConfig = {\n  maxConnections: 2,\n  acquireTimeout: 5000,\n  leaseTimeout: 30000\n};\n\n// Local Development - Higher limits\nconst localConfig = {\n  maxConnections: 5,\n  acquireTimeout: 10000,\n  leaseTimeout: 30000\n};\n\n// Custom configuration\nconst manager = new DatabaseConnectionManager({\n  maxConnections: 10,\n  leaseTimeout: 60000,\n  healthCheckInterval: 30000\n});\n```\n\n### Configuration Options\n\n| Option | Default | Description |\n|--------|---------|-------------|\n| `maxConnections` | 2 (Vercel) / 5 (Local) | Maximum concurrent connections |\n| `minConnections` | 1 | Minimum connections to maintain |\n| `acquireTimeout` | 5000ms (Vercel) / 10000ms (Local) | Timeout for acquiring connections |\n| `leaseTimeout` | 30000ms | Maximum lease duration |\n| `shutdownTimeout` | 15000ms | Graceful shutdown timeout |\n| `healthCheckInterval` | 60000ms | Health check frequency |\n\n## API Reference\n\n### Core Functions\n\n#### `acquireDbLease(operationId?, timeout?)`\nAcquire a database connection lease for operations.\n\n```javascript\nconst lease = await acquireDbLease('user-lookup', 5000);\n```\n\n#### `getConnectionManager(options?)`\nGet the singleton connection manager instance.\n\n```javascript\nconst manager = getConnectionManager({\n  maxConnections: 10\n});\n```\n\n#### `resetConnectionManager()`\nReset the singleton instance (primarily for testing).\n\n```javascript\nawait resetConnectionManager();\n```\n\n### Connection Lease Methods\n\n#### `lease.execute(sql, params?)`\nExecute a SQL query using the leased connection.\n\n```javascript\nconst result = await lease.execute('SELECT * FROM users WHERE id = ?', [123]);\n```\n\n#### `lease.transaction(timeout?)`\nStart a database transaction.\n\n```javascript\nconst transaction = await lease.transaction(30000);\n```\n\n#### `lease.batch(statements)`\nExecute multiple statements as a batch.\n\n```javascript\nconst statements = [\n  { sql: 'INSERT INTO ...', args: [...] },\n  { sql: 'UPDATE ...', args: [...] }\n];\nconst results = await lease.batch(statements);\n```\n\n#### `lease.release()`\nRelease the lease back to the pool.\n\n```javascript\nlease.release(); // Always call in finally block\n```\n\n#### `lease.getStats()`\nGet lease statistics for monitoring.\n\n```javascript\nconst stats = lease.getStats();\n// { id, operationId, createdAt, lastUsed, ageMs, idleMs, isReleased }\n```\n\n### Manager Methods\n\n#### `manager.acquireLease(operationId?, timeout?)`\nAcquire a connection lease.\n\n#### `manager.releaseLease(leaseId)`\nRelease a specific lease.\n\n#### `manager.gracefulShutdown(timeout?)`\nPerform graceful shutdown of all connections.\n\n```javascript\nconst success = await manager.gracefulShutdown(10000);\n```\n\n#### `manager.getPoolStatistics()`\nGet comprehensive pool statistics.\n\n```javascript\nconst stats = manager.getPoolStatistics();\n```\n\n#### `manager.getHealthStatus()`\nGet current health status of the connection pool.\n\n```javascript\nconst health = await manager.getHealthStatus();\n```\n\n## Monitoring and Health Checks\n\n### Pool Statistics\n\n```javascript\nimport { getPoolStatistics } from '../lib/connection-manager.js';\n\nconst stats = getPoolStatistics();\nconsole.log('Pool utilization:',\n  (stats.pool.activeLeases / stats.pool.maxConnections) * 100 + '%'\n);\n```\n\n### Health Monitoring\n\n```javascript\nimport { getPoolHealthStatus } from '../lib/connection-manager.js';\n\nconst health = await getPoolHealthStatus();\nif (health.status === 'unhealthy') {\n  console.error('Pool issues:', health.issues);\n}\n```\n\n### API Endpoint for Monitoring\n\nA monitoring endpoint is available at `/api/admin/connection-pool-status`:\n\n```bash\ncurl http://localhost:3000/api/admin/connection-pool-status\n```\n\nResponse includes:\n- Pool health status\n- Connection statistics\n- Performance metrics\n- Optimization recommendations\n\n## Integration Patterns\n\n### 1. API Handler Pattern\n\n```javascript\nexport default async function handler(req, res) {\n  const lease = await acquireDbLease(`api-${req.url}`);\n\n  try {\n    const result = await lease.execute('SELECT ...');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    res.status(500).json({ error: 'Database error' });\n  } finally {\n    lease.release();\n  }\n}\n```\n\n### 2. Service Layer Pattern\n\n```javascript\nclass DataService {\n  async getData(id) {\n    const lease = await acquireDbLease(`get-data-${id}`);\n    try {\n      return await lease.execute('SELECT * FROM data WHERE id = ?', [id]);\n    } finally {\n      lease.release();\n    }\n  }\n}\n```\n\n### 3. Batch Processing Pattern\n\n```javascript\nasync function processBatch(items) {\n  const lease = await acquireDbLease('batch-processing');\n\n  try {\n    const statements = items.map(item => ({\n      sql: 'INSERT INTO processed (data) VALUES (?)',\n      args: [item]\n    }));\n\n    return await lease.batch(statements);\n  } finally {\n    lease.release();\n  }\n}\n```\n\n## Error Handling\n\n### Connection Acquisition Errors\n\n```javascript\ntry {\n  const lease = await acquireDbLease('operation');\n  // ... use lease\n} catch (error) {\n  if (error.message.includes('timeout')) {\n    // Handle timeout\n  } else if (error.message.includes('shutting down')) {\n    // Handle shutdown\n  }\n}\n```\n\n### Query Execution Errors\n\n```javascript\nconst lease = await acquireDbLease('query');\ntry {\n  await lease.execute('SELECT ...');\n} catch (error) {\n  // Query failed - lease will be released in finally\n  console.error('Query failed:', error.message);\n} finally {\n  lease.release();\n}\n```\n\n## Best Practices\n\n### ✅ Do\n\n1. **Always release leases** in finally blocks\n2. **Use meaningful operation IDs** for debugging\n3. **Set appropriate timeouts** for long-running operations\n4. **Monitor pool health** in production\n5. **Use transactions** for multi-statement operations\n\n### ❌ Don't\n\n1. **Don't forget to release leases** - causes connection leaks\n2. **Don't share leases** between operations\n3. **Don't hold leases** longer than necessary\n4. **Don't ignore timeout errors** - they indicate performance issues\n5. **Don't bypass the pool** - always use leases for consistency\n\n### Performance Tips\n\n1. **Short operations**: Keep database operations brief\n2. **Connection reuse**: Release leases promptly for reuse\n3. **Batch operations**: Use batch() for multiple related statements\n4. **Monitor metrics**: Watch for high utilization or error rates\n5. **Optimize queries**: Reduce operation time to improve throughput\n\n## Testing\n\n### Unit Testing\n\n```javascript\nimport { resetConnectionManager, getConnectionManager } from '../lib/connection-manager.js';\n\ndescribe('Database Operations', () => {\n  afterEach(async () => {\n    await resetConnectionManager();\n  });\n\n  it('should handle database operations', async () => {\n    // Your tests here\n  });\n});\n```\n\n### Integration Testing\n\nThe connection manager integrates seamlessly with existing test suites and provides proper cleanup in test environments.\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection timeouts**: Increase `acquireTimeout` or optimize queries\n2. **Lease timeouts**: Increase `leaseTimeout` or break up long operations\n3. **Pool exhaustion**: Increase `maxConnections` or fix connection leaks\n4. **Memory issues**: Monitor active leases and ensure proper cleanup\n\n### Debug Information\n\nEnable debug logging:\n```javascript\nprocess.env.DEBUG = 'true';\n```\n\nGet detailed statistics:\n```javascript\nconst stats = manager.getPoolStatistics();\nconsole.log('Active leases:', stats.activeLeases);\n```\n\n## Migration from Database Service\n\n### Before (Direct Database Service)\n```javascript\nimport { getDatabaseClient } from '../lib/database.js';\n\nconst client = await getDatabaseClient();\nconst result = await client.execute('SELECT ...');\n```\n\n### After (Connection Pool Manager)\n```javascript\nimport { acquireDbLease } from '../lib/connection-manager.js';\n\nconst lease = await acquireDbLease('operation');\ntry {\n  const result = await lease.execute('SELECT ...');\n} finally {\n  lease.release();\n}\n```\n\nThe connection manager is fully compatible with the existing database service and can be adopted incrementally across the codebase.",
  "ENTERPRISE_DATABASE_DEPLOYMENT.md": "# Enterprise Database System Deployment Guide\n\nThis guide provides comprehensive deployment procedures for the enterprise database connection management architecture in production environments.\n\n## Overview\n\nThe enterprise database system provides production-ready connection management with:\n\n- **Connection Pool Manager** - Resource leasing and connection management\n- **Connection State Machine** - State management with atomic transitions\n- **Circuit Breaker** - Automatic failure recovery and resilience\n- **Comprehensive Monitoring** - Health checks and performance tracking\n- **Feature Flag System** - Controlled rollout and emergency rollback capabilities\n- **Configuration Management** - Environment-specific settings with runtime updates\n\n## Pre-Deployment Checklist\n\n### Environment Requirements\n\n- [ ] Node.js >= 20.0.0\n- [ ] Vercel CLI installed and configured\n- [ ] Required environment variables configured\n- [ ] Database connectivity validated\n- [ ] Production migration approval (for production deployments)\n\n### Required Environment Variables\n\n```bash\n# Database Configuration\nTURSO_DATABASE_URL=libsql://your-database.turso.io\nTURSO_AUTH_TOKEN=your-auth-token\n\n# Feature Flags (Optional - defaults apply)\nFEATURE_ENABLE_CONNECTION_POOL=false\nFEATURE_ENABLE_STATE_MACHINE=false\nFEATURE_ENABLE_CIRCUIT_BREAKER=false\nFEATURE_ENABLE_ENTERPRISE_MONITORING=true\n\n# Rollout Configuration (Optional)\nROLLOUT_ENABLE_CONNECTION_POOL=0\nROLLOUT_ENABLE_STATE_MACHINE=0\nROLLOUT_ENABLE_CIRCUIT_BREAKER=0\n\n# Performance Tuning (Optional)\nDB_MAX_CONNECTIONS=5\nDB_ACQUIRE_TIMEOUT=5000\nCB_FAILURE_THRESHOLD=5\nCB_RECOVERY_TIMEOUT=30000\n\n# Production Deployment\nPRODUCTION_MIGRATION_APPROVED=true  # Required for production\n```\n\n## Deployment Phases\n\n### Phase 1: Validation and Baseline\n\n```bash\n# 1. Validate system health\nnpm run test\nnpm run test:integration\n\n# 2. Run pre-deployment health check\nnode scripts/deployment-health-check.js --baseline=baseline.json\n\n# 3. Validate configuration\nnode scripts/platform-tools.js config:validate\n\n# 4. Verify feature flags\nnode scripts/platform-tools.js flags:show\n```\n\n### Phase 2: Monitoring Deployment\n\n```bash\n# 1. Enable monitoring first (no behavior change)\nnode scripts/platform-tools.js flags:enable ENABLE_ENTERPRISE_MONITORING \"deployment-phase-2\"\n\n# 2. Deploy with monitoring enabled\nnpm run vercel:preview\n\n# 3. Validate monitoring is working\nnode scripts/deployment-health-check.js --continuous --duration=60000\n\n# 4. Collect baseline metrics\nnode scripts/platform-tools.js monitor:metrics > baseline-metrics.json\n```\n\n### Phase 3: Canary Deployment\n\n```bash\n# 1. Start enterprise migration in canary mode\nnode scripts/migrate-to-enterprise.js --target=canary\n\n# 2. Monitor canary deployment\nnode scripts/deployment-health-check.js --continuous --enable-rollback --duration=300000\n\n# 3. Validate canary success\nnode scripts/platform-tools.js monitor:health --detailed\n```\n\n### Phase 4: Gradual Rollout\n\n```bash\n# 1. Continue migration to gradual rollout\nnode scripts/migrate-to-enterprise.js --target=gradual\n\n# 2. Monitor each rollout increment\nnode scripts/deployment-health-check.js --continuous --enable-rollback\n\n# 3. Manually control rollout if needed\nnode scripts/platform-tools.js flags:rollout ENABLE_CONNECTION_POOL 25\nnode scripts/platform-tools.js flags:rollout ENABLE_CONNECTION_POOL 50\nnode scripts/platform-tools.js flags:rollout ENABLE_CONNECTION_POOL 75\nnode scripts/platform-tools.js flags:rollout ENABLE_CONNECTION_POOL 100\n```\n\n### Phase 5: Full Deployment\n\n```bash\n# 1. Complete enterprise migration\nnode scripts/migrate-to-enterprise.js\n\n# 2. Final validation\nnode scripts/deployment-health-check.js\n\n# 3. Verify all systems\nnode scripts/platform-tools.js deploy:status\n```\n\n## Emergency Procedures\n\n### Emergency Rollback\n\n```bash\n# Immediate rollback (emergency killswitch)\nnode scripts/platform-tools.js flags:killswitch \"production-emergency\"\n\n# Or use migration rollback\nnode scripts/migrate-to-enterprise.js --rollback\n\n# Or full deployment rollback\nnode scripts/platform-tools.js deploy:rollback \"emergency-rollback\"\n```\n\n### Circuit Breaker Activation\n\nIf the circuit breaker opens due to database issues:\n\n```bash\n# Check circuit breaker status\nnode scripts/platform-tools.js debug:circuit-breaker\n\n# Monitor recovery\nnode scripts/platform-tools.js monitor:health --detailed\n\n# Manual intervention if needed\nnode scripts/platform-tools.js flags:disable ENABLE_CIRCUIT_BREAKER \"manual-intervention\"\n```\n\n### Connection Pool Issues\n\n```bash\n# Debug connection pool\nnode scripts/platform-tools.js debug:connections\n\n# Check pool statistics\nnode scripts/platform-tools.js monitor:connections\n\n# Adjust configuration if needed\nnode scripts/platform-tools.js config:update connectionPool maxConnections 3\n```\n\n## Monitoring and Health Checks\n\n### Continuous Monitoring\n\n```bash\n# Start continuous health monitoring\nnode scripts/deployment-health-check.js --continuous --enable-rollback\n\n# Monitor specific metrics\nnode scripts/platform-tools.js monitor:metrics performance\nnode scripts/platform-tools.js monitor:connections\n```\n\n### Health Check Integration\n\nAdd to your CI/CD pipeline:\n\n```yaml\n# Example GitHub Actions integration\n- name: Pre-deployment Health Check\n  run: node scripts/deployment-health-check.js\n\n- name: Post-deployment Validation\n  run: |\n    node scripts/platform-tools.js deploy:status\n    node scripts/deployment-health-check.js --duration=120000\n```\n\n### Alerting Setup\n\nConfigure alerts based on health check outputs:\n\n```bash\n# Export metrics for external monitoring\nnode scripts/platform-tools.js monitor:metrics > metrics.json\n\n# Check deployment status programmatically\nif ! node scripts/deployment-health-check.js --timeout=60000; then\n  echo \"Deployment health check failed\"\n  node scripts/platform-tools.js flags:killswitch \"health-check-failure\"\n  exit 1\nfi\n```\n\n## Performance Tuning\n\n### Environment-Specific Configuration\n\n#### Development\n```bash\n# Optimize for development\nnode scripts/platform-tools.js config:update connectionPool maxConnections 2\nnode scripts/platform-tools.js config:update circuitBreaker failureThreshold 3\nnode scripts/platform-tools.js flags:enable ENABLE_DETAILED_LOGGING \"development\"\n```\n\n#### Production\n```bash\n# Optimize for production\nnode scripts/platform-tools.js config:update connectionPool maxConnections 5\nnode scripts/platform-tools.js config:update circuitBreaker failureThreshold 5\nnode scripts/platform-tools.js config:update circuitBreaker recoveryTimeout 30000\n```\n\n### Performance Monitoring\n\n```bash\n# Analyze performance\nnode scripts/platform-tools.js debug:performance\n\n# Get optimization suggestions\nnode scripts/platform-tools.js maint:optimize\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. Configuration Validation Errors\n\n```bash\n# Check configuration issues\nnode scripts/platform-tools.js config:validate\n\n# Show current configuration\nnode scripts/platform-tools.js config:show\n\n# Fix common issues\nnode scripts/platform-tools.js config:update connectionPool minConnections 1\n```\n\n#### 2. Feature Flag Issues\n\n```bash\n# Check flag status\nnode scripts/platform-tools.js flags:show\n\n# Reset problematic flags\nnode scripts/platform-tools.js flags:disable PROBLEMATIC_FLAG \"troubleshooting\"\n```\n\n#### 3. Database Connection Issues\n\n```bash\n# Debug connections\nnode scripts/platform-tools.js debug:connections\n\n# Check basic connectivity\nnode -e \"\nimport { getDatabaseClient } from './lib/database.js';\nconst client = await getDatabaseClient();\nconst result = await client.execute('SELECT 1');\nconsole.log('Connection OK:', result);\n\"\n```\n\n#### 4. Performance Issues\n\n```bash\n# Analyze performance problems\nnode scripts/platform-tools.js debug:performance\n\n# Check memory usage\nnode scripts/platform-tools.js monitor:health --detailed\n\n# Optimize configuration\nnode scripts/platform-tools.js maint:optimize\n```\n\n### Debug Commands\n\n```bash\n# Extract logs for analysis\nnode scripts/platform-tools.js debug:logs error 2\n\n# Generate debug report\nnode scripts/deployment-health-check.js > debug-report.json\n\n# Export configuration for support\nnode scripts/platform-tools.js config:export json config-debug.json\n```\n\n## Maintenance Operations\n\n### Regular Maintenance\n\n```bash\n# Weekly cleanup\nnode scripts/platform-tools.js maint:cleanup\n\n# Performance optimization\nnode scripts/platform-tools.js maint:optimize\n\n# Configuration backup\nnode scripts/platform-tools.js maint:backup config-backup-$(date +%Y%m%d).json\n```\n\n### Configuration Management\n\n```bash\n# Backup current configuration\nnode scripts/platform-tools.js maint:backup\n\n# Update configuration\nnode scripts/platform-tools.js config:update component key value\n\n# Validate changes\nnode scripts/platform-tools.js config:validate\n\n# Export for version control\nnode scripts/platform-tools.js config:export json current-config.json\n```\n\n## Success Criteria\n\n### Deployment Success Metrics\n\n- [ ] Health score >= 85%\n- [ ] Zero critical failures\n- [ ] Response time within thresholds\n- [ ] Error rate < 1% (production)\n- [ ] All feature flags working correctly\n- [ ] Monitoring data collection active\n\n### Rollout Success Criteria\n\n- [ ] Gradual rollout completed without issues\n- [ ] Performance metrics within baseline\n- [ ] No circuit breaker activations\n- [ ] Connection pool operating efficiently\n- [ ] Zero emergency rollbacks\n\n## Platform Engineering Tools\n\n### Command Reference\n\n```bash\n# Configuration management\nnode scripts/platform-tools.js config:show [component]\nnode scripts/platform-tools.js config:validate\nnode scripts/platform-tools.js config:update <component> <key> <value>\n\n# Feature flag management\nnode scripts/platform-tools.js flags:show\nnode scripts/platform-tools.js flags:enable <flag> [reason]\nnode scripts/platform-tools.js flags:rollout <flag> <percentage>\n\n# Deployment operations\nnode scripts/platform-tools.js deploy:migrate [--dry-run] [--target=phase]\nnode scripts/platform-tools.js deploy:health [--continuous] [--enable-rollback]\nnode scripts/platform-tools.js deploy:rollback [reason]\n\n# Monitoring and debugging\nnode scripts/platform-tools.js monitor:health [--detailed]\nnode scripts/platform-tools.js monitor:connections\nnode scripts/platform-tools.js debug:connections\n```\n\n### Automation Scripts\n\nThe platform provides ready-to-use scripts for:\n\n- **migrate-to-enterprise.js** - Safe migration with rollback\n- **deployment-health-check.js** - Comprehensive health validation\n- **platform-tools.js** - Complete management toolkit\n\n## Support and Escalation\n\n### Internal Escalation\n\n1. **Level 1**: Use platform tools for diagnosis and automated fixes\n2. **Level 2**: Manual configuration adjustments and feature flag management\n3. **Level 3**: Emergency rollback and system recovery procedures\n\n### External Support\n\nWhen escalating to external support, include:\n\n```bash\n# Generate support bundle\nnode scripts/platform-tools.js config:export json > support-config.json\nnode scripts/platform-tools.js monitor:health --detailed > support-health.json\nnode scripts/platform-tools.js flags:show > support-flags.json\n```\n\n## Appendix\n\n### File Locations\n\n- Configuration: `/lib/database-config.js`\n- Feature Flags: `/lib/feature-flags.js`\n- Migration Script: `/scripts/migrate-to-enterprise.js`\n- Health Check: `/scripts/deployment-health-check.js`\n- Platform Tools: `/scripts/platform-tools.js`\n- Integration Layer: `/lib/enterprise-database-integration.js`\n\n### Architecture Components\n\n- **Connection Pool Manager**: `/lib/connection-manager.js`\n- **State Machine**: `/lib/connection-state-machine.js`\n- **Circuit Breaker**: `/lib/circuit-breaker.js`\n- **Monitoring Service**: `/lib/monitoring/monitoring-service.js`\n\n### Environment Detection\n\nThe system automatically detects environments:\n- `test` - Unit and integration tests\n- `development` - Local development\n- `preview` - Vercel preview deployments\n- `production` - Vercel production deployments",
  "GOOGLE_DRIVE_INTEGRATION.md": "# Google Drive Integration Guide\n\nThis document explains how to set up and use the Google Drive API service for the gallery functionality.\n\n## Overview\n\nThe Google Drive service fetches images and videos from a Google Drive folder and provides them in a structured format compatible with the existing gallery frontend. It includes caching, categorization, and comprehensive error handling.\n\n## Setup Requirements\n\n### 1. Google Cloud Console Setup\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Enable the Google Drive API:\n   - Navigate to \"APIs & Services\" > \"Library\"\n   - Search for \"Google Drive API\"\n   - Click \"Enable\"\n4. Create an API key:\n   - Go to \"APIs & Services\" > \"Credentials\"\n   - Click \"Create Credentials\" > \"API Key\"\n   - Copy the generated API key\n   - (Optional) Restrict the key to Google Drive API only\n\n### 2. Google Drive Folder Setup\n\n1. Create a folder in Google Drive containing your festival images\n2. Make the folder publicly accessible:\n   - Right-click the folder → \"Share\"\n   - Click \"Change to anyone with the link\"\n   - Set permission to \"Viewer\"\n3. Copy the folder ID from the URL:\n   - URL format: `https://drive.google.com/drive/folders/[FOLDER_ID]`\n   - Extract the `FOLDER_ID` part\n\n### 3. Environment Variables\n\nConfigure these variables in **Vercel Dashboard** (Settings → Environment Variables):\n\n| Variable | Description | Example |\n|----------|-------------|---------|\n| `GOOGLE_DRIVE_API_KEY` | API key from Google Cloud Console | `AIza...` |\n| `GOOGLE_DRIVE_FOLDER_ID` | Google Drive folder ID | `1elqFy...` |\n| `GOOGLE_SERVICE_ACCOUNT_EMAIL` | Service account email | `service@project.iam.gserviceaccount.com` |\n| `GOOGLE_PRIVATE_KEY` | Service account private key | `-----BEGIN PRIVATE KEY-----...` |\n\n**Local Setup:**\n```bash\n# Pull environment variables from Vercel\nvercel env pull\n\n# Verify .env.local was created\nls -la .env.local\n```\n\n## Image Categorization\n\nImages are automatically categorized based on filename patterns:\n\n- **Workshops**: Files containing \"workshop\", \"class\", \"lesson\", \"tutorial\", \"learn\"\n- **Socials**: Files containing \"social\", \"party\", \"dance\", \"dancing\", \"fun\", \"music\"  \n- **Performances**: Files containing \"performance\", \"show\", \"stage\", \"concert\", \"artist\", \"performer\"\n- **Other**: All other files\n\n## API Endpoints\n\n### Gallery Data\n- `GET /api/gallery` - Returns gallery data (now uses Google Drive when configured)\n- `GET /api/featured-photos` - Returns featured photos from Google Drive\n\n### Google Drive Management\n- `GET /api/google-drive-health` - Service health and configuration status\n- `GET /api/google-drive-cache` - Cache status and metrics\n- `POST /api/google-drive-cache` - Warm up cache with fresh data (requires authentication)\n- `DELETE /api/google-drive-cache` - Clear cache (requires authentication)\n\n**Note**: POST and DELETE operations on the cache management endpoint require an `X-API-Key` header with the `INTERNAL_API_KEY` value for security purposes.\n\n## Usage Examples\n\n### Basic Gallery Request\n```javascript\nfetch('/api/gallery')\n  .then(response => response.json())\n  .then(data => {\n    console.log('Total images:', data.totalCount);\n    console.log('Categories:', Object.keys(data.categories));\n    console.log('Source:', data.source); // 'google-drive-api' when configured\n  });\n```\n\n### Check Service Health\n```javascript\nfetch('/api/google-drive-health')\n  .then(response => response.json())\n  .then(data => {\n    console.log('Service configured:', data.configured);\n    console.log('Health status:', data.health.status);\n    console.log('Cache metrics:', data.metrics);\n  });\n```\n\n### Clear Cache\n```javascript\nfetch('/api/google-drive-cache', { method: 'DELETE' })\n  .then(response => response.json())\n  .then(data => {\n    console.log('Cache cleared:', data.success);\n  });\n```\n\n## Data Structure\n\nThe service returns data in this format:\n\n```json\n{\n  \"eventId\": \"boulder-fest-2026\",\n  \"event\": \"boulder-fest-2026\", \n  \"year\": 2026,\n  \"totalCount\": 150,\n  \"categories\": {\n    \"workshops\": [\n      {\n        \"id\": \"file_id_123\",\n        \"name\": \"Workshop_Dance_Basics.jpg\",\n        \"type\": \"image\",\n        \"mimeType\": \"image/jpeg\",\n        \"url\": \"https://drive.google.com/file/d/...\",\n        \"thumbnailUrl\": \"https://...\",\n        \"downloadUrl\": \"https://drive.google.com/uc?id=...\",\n        \"size\": 2048576,\n        \"createdTime\": \"2024-01-15T10:30:00Z\",\n        \"modifiedTime\": \"2024-01-15T10:30:00Z\",\n        \"dimensions\": {\n          \"width\": 1920,\n          \"height\": 1080,\n          \"rotation\": 0\n        }\n      }\n    ],\n    \"socials\": [...],\n    \"performances\": [...],\n    \"other\": [...]\n  },\n  \"hasMore\": false,\n  \"source\": \"google-drive-api\",\n  \"cacheTimestamp\": \"2024-01-15T12:00:00Z\"\n}\n```\n\n## Caching Behavior\n\n- **Cache TTL**: 30 minutes for API responses\n- **Memory Cache**: In-memory LRU cache with max 20 entries\n- **Automatic Eviction**: Removes oldest 25% of entries when cache is full\n- **Fallback**: Returns stale cache on API errors, empty gallery as final fallback\n\n## Error Handling\n\nThe service gracefully handles various error scenarios:\n\n1. **Missing Configuration**: Returns placeholder data with helpful error message\n2. **API Errors**: Retries with exponential backoff for temporary failures\n3. **Rate Limiting**: Automatically retries after delays\n4. **Network Issues**: Falls back to cached data when available\n5. **Invalid Responses**: Logs errors and returns fallback data\n\n## Performance Metrics\n\nThe service tracks comprehensive metrics:\n\n- API call count and response times\n- Cache hit/miss ratios\n- Rate limiting encounters\n- Total items fetched\n- Error counts\n\nAccess metrics via `/api/google-drive-health` endpoint.\n\n## Troubleshooting\n\n### Common Issues\n\n1. **\"API key invalid\"**:\n   - Verify the API key in Google Cloud Console\n   - Ensure Google Drive API is enabled\n   - Check for trailing spaces in environment variables\n\n2. **\"Folder not found\"**:\n   - Verify folder ID is correct\n   - Ensure folder is publicly accessible\n   - Check folder sharing permissions\n\n3. **\"Quota exceeded\"**:\n   - Check Google Cloud Console quotas\n   - Implement request throttling if needed\n   - Consider upgrading Google Cloud plan\n\n4. **Empty gallery**:\n   - Verify images are in the folder\n   - Check supported MIME types\n   - Review server logs for detailed errors\n\n### Debug Mode\n\nEnable detailed logging by checking the service health:\n\n```bash\ncurl http://localhost:3000/api/google-drive-health\n```\n\n### Manual Cache Management\n\nClear cache manually to force fresh data:\n\n```bash\ncurl -X DELETE http://localhost:3000/api/google-drive-cache\n```\n\n## Integration with Frontend\n\nThe gallery frontend automatically uses Google Drive data when available. No frontend changes are required - the existing gallery components will work seamlessly with Google Drive data.\n\n## Security Considerations\n\n- API keys are server-side only and never exposed to clients\n- Folder access is read-only via public sharing\n- No sensitive data is cached in memory\n- All API calls are rate-limited and monitored\n\n## Supported File Types\n\n### Images\n- JPEG (.jpg, .jpeg)\n- PNG (.png)\n- GIF (.gif)\n- WebP (.webp)\n- BMP (.bmp)\n- TIFF (.tiff)\n- SVG (.svg)\n- ICO (.ico)\n- AVIF (.avif)\n\n### Videos (Optional)\n- MP4 (.mp4)\n- QuickTime (.mov)\n- AVI (.avi)\n- WebM (.webm)\n\nVideos can be enabled by setting `includeVideos: true` in the fetch options.",
  "SECRET_VALIDATION.md": "# E2E Test Secret Validation System\n\n## Overview\n\nThe E2E test secret validation system provides comprehensive validation of secrets required for end-to-end testing. It validates secrets at both the global setup level and individual test file level, providing clear feedback about missing or misconfigured credentials.\n\n## Key Features\n\n- **🚨 Fail-Fast Validation**: Tests immediately abort if critical secrets are missing\n- **📊 Structured Reporting**: Clear categorization of secrets (CRITICAL, REQUIRED, OPTIONAL)\n- **🔍 Intelligent Detection**: Automatically determines required secrets based on test types\n- **⚠️ Graceful Degradation**: Non-critical tests can run with mocked services\n- **🎯 Helpful Guidance**: Provides URLs and instructions for obtaining missing credentials\n- **🔧 Easy Debugging**: Standalone validation tool for troubleshooting\n\n## Secret Categories\n\n### CRITICAL\nSecrets required for basic E2E test functionality:\n- `NODE_ENV` - Node environment (test/development)\n- `E2E_TEST_MODE` - E2E test mode flag\n\n### REQUIRED\nSecrets needed for core functionality:\n- `TEST_ADMIN_PASSWORD` - Plain text admin password for E2E tests\n- `ADMIN_SECRET` - JWT signing secret (minimum 32 characters)\n- `ADMIN_PASSWORD` - Bcrypt hashed admin password for production (optional in test mode)\n- `TURSO_DATABASE_URL` - Production-like database URL (optional, falls back to SQLite)\n- `TURSO_AUTH_TOKEN` - Database authentication token\n\n### SERVICE_INTEGRATION\nSecrets for external service integration (optional, graceful degradation):\n- **Email (Brevo)**: `BREVO_API_KEY`, `BREVO_NEWSLETTER_LIST_ID`, `BREVO_WEBHOOK_SECRET`\n- **Payment (Stripe)**: `STRIPE_PUBLISHABLE_KEY`, `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`\n- **Wallet Passes**: `APPLE_PASS_KEY`, `WALLET_AUTH_SECRET`, `GOOGLE_WALLET_ISSUER_ID`\n\n### CI/CD\nSecrets for continuous integration environments:\n- `CI` - CI environment flag (auto-detected)\n- `GITHUB_TOKEN` - GitHub API token for CI operations\n- `VERCEL_TOKEN` - Vercel authentication token\n- `VERCEL_ORG_ID` - Vercel organization ID\n- `VERCEL_PROJECT_ID` - Vercel project ID\n\n### GOOGLE_SERVICES\nSecrets for Google integrations (optional):\n- `GOOGLE_DRIVE_API_KEY` - Google Drive API key for gallery\n- `GOOGLE_DRIVE_FOLDER_ID` - Gallery images folder ID\n- `GOOGLE_SERVICE_ACCOUNT_EMAIL` - Service account email\n- `GOOGLE_PRIVATE_KEY` - Service account private key\n\n### RUNTIME\nRuntime configuration:\n- `PORT` / `DYNAMIC_PORT` - Server port for testing\n- `PLAYWRIGHT_BASE_URL` - Base URL for tests\n- `PREVIEW_URL` - Vercel preview deployment URL\n\n## Usage\n\n### Global Setup Validation\n\nThe secret validation runs automatically during E2E test global setup:\n\n```javascript\n// In global-setup-preview.js and global-setup-ci.js\nimport { validateSecrets } from './secret-validator.js';\n\nconst secretValidation = validateSecrets({\n  testTypes: ['basic', 'admin', 'preview', 'ci'],\n  ci: true,\n  strict: false\n});\n\nif (!secretValidation.passed) {\n  console.error('❌ SECRET VALIDATION FAILED - ABORTING TESTS');\n  process.exit(1);\n}\n```\n\n### Individual Test File Validation\n\nAdd secret validation to specific test files:\n\n```javascript\nimport { skipTestIfSecretsUnavailable, warnIfOptionalSecretsUnavailable } from '../helpers/test-setup.js';\n\ntest.describe('Admin Authentication', () => {\n  // Skip entire test suite if required secrets missing\n  const shouldSkip = skipTestIfSecretsUnavailable(['admin', 'security'], 'admin-auth.test.js');\n  \n  if (shouldSkip) {\n    test.skip('Skipping admin authentication tests due to missing required secrets');\n    return;\n  }\n  \n  // Warn about optional secrets (tests run with mocks)\n  const secretWarnings = warnIfOptionalSecretsUnavailable(['admin'], 'admin-auth.test.js');\n  \n  // ... rest of tests\n});\n```\n\n### Manual Validation\n\nTest secret configuration manually:\n\n```bash\n# Run complete secret validation\nnpm run test:e2e:secrets\n\n# Or run directly\nnode scripts/test-secret-validation.js\n```\n\n## Validation Output Example\n\n```\n🚨 E2E TEST STARTUP - SECRET VALIDATION\n========================================\nChecking secrets for test types: basic, admin, email\n\nChecking 29 secrets...\n\n✅ Found 5 secrets:\n   - NODE_ENV (test)\n   - E2E_TEST_MODE (true)\n   - GITHUB_TOKEN (ghp_***Mxr3)\n   - TEST_ADMIN_PASSWORD (***ord)\n   - ADMIN_SECRET (xyz***789)\n\n❌ Missing 3 CRITICAL secrets:\n   - BREVO_API_KEY\n     Brevo (SendinBlue) API key for email functionality\n     Get it from: https://developers.brevo.com/\n   - STRIPE_SECRET_KEY\n     Stripe secret key for backend processing\n     Get it from: https://dashboard.stripe.com/apikeys\n   - TURSO_DATABASE_URL\n     Turso database URL for production-like testing\n     Get it from: https://turso.tech/\n\n📊 Secrets by category:\n   ✅ CRITICAL: 2/2 configured\n   ⚠️ REQUIRED: 2/5 configured\n   ❌ SERVICE_INTEGRATION: 0/9 configured\n   ✅ CICD: 1/5 configured\n   ❌ GOOGLE_SERVICES: 0/4 configured\n   ✅ RUNTIME: 0/4 configured\n\n💡 RECOMMENDATIONS:\n   ⚠️ Set TURSO_DATABASE_URL for production-like testing\n   ⚠️ Set BREVO_API_KEY for email functionality (optional)\n   ⚠️ Set STRIPE_SECRET_KEY for payment testing (optional)\n\n✅ SECRET VALIDATION PASSED\n========================================\n```\n\n## Configuration Files\n\n### Core Files\n\n- `tests/e2e/secret-validator.js` - Main validation logic\n- `tests/e2e/helpers/test-setup.js` - Individual test file helpers\n- `tests/e2e/global-setup-preview.js` - Preview deployment setup with validation\n- `tests/e2e/global-setup-ci.js` - CI environment setup with validation\n- `scripts/test-secret-validation.js` - Standalone validation tool\n\n### Integration Points\n\n- `playwright.config.js` - Shows secret validation preview in configuration output\n- `package.json` - Includes npm scripts for manual validation\n\n## Secret Configuration Setup\n\n### Required for All Tests\n\n```bash\n# Basic test environment\nNODE_ENV=test\nE2E_TEST_MODE=true\n\n# Admin authentication\nTEST_ADMIN_PASSWORD=your-test-password\nADMIN_SECRET=your-32-character-or-longer-secret\n```\n\n### Optional for Production-like Testing\n\n```bash\n# Database\nTURSO_DATABASE_URL=libsql://your-database.turso.io\nTURSO_AUTH_TOKEN=your-auth-token\n\n# Email service\nBREVO_API_KEY=your-brevo-api-key\nBREVO_NEWSLETTER_LIST_ID=123\n\n# Payment processing\nSTRIPE_SECRET_KEY=sk_test_your-stripe-key\n\n# CI/CD\nVERCEL_TOKEN=your-vercel-token\nGITHUB_TOKEN=ghp_your-github-token\n```\n\n## Test Type Detection\n\nThe system automatically determines required secrets based on test file names:\n\n- `admin-*.test.js` → Requires admin secrets\n- `*-email-*.test.js`, `*newsletter*.test.js` → Requires email secrets\n- `*payment*.test.js`, `*checkout*.test.js` → Requires payment secrets\n- `*wallet*.test.js`, `*ticket*.test.js` → Requires wallet secrets\n- `*gallery*.test.js` → Requires Google Drive secrets\n\n## Error Handling\n\n### Critical Secret Missing\n- Tests immediately abort with exit code 1\n- Clear error message explains which secrets are missing\n- Provides helpful URLs for obtaining credentials\n\n### Optional Secret Missing\n- Tests continue with warning\n- Mock services used instead of real APIs\n- Degraded functionality clearly communicated\n\n### Invalid Secret Format\n- Validation catches common format issues (URL format, minimum length, etc.)\n- Specific error messages guide correction\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Tests skip unexpectedly**\n   - Check `npm run test:e2e:secrets` output\n   - Verify secrets are set correctly in Vercel Dashboard\n   - Pull latest environment variables: `vercel env pull`\n\n2. **Admin tests fail**\n   - Verify `TEST_ADMIN_PASSWORD` is set (plain text)\n   - Verify `ADMIN_SECRET` is at least 32 characters\n   - Check that `ADMIN_PASSWORD` is bcrypt hashed (production only)\n\n3. **Database connection issues**\n   - Set `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN` for production-like testing\n   - Tests will fall back to SQLite if Turso credentials missing\n\n4. **Service integration failures**\n   - Check specific service credentials (Brevo, Stripe, etc.)\n   - Tests should gracefully degrade to mocks if credentials missing\n   - Look for warning messages in test output\n\n### Debug Commands\n\n```bash\n# Validate all secrets\nnpm run test:e2e:secrets\n\n# Check specific test file requirements\nnode -e \"import('./tests/e2e/helpers/test-setup.js').then(m => console.log(m.validateSecretsForTestFile('admin-auth.test.js')))\"\n\n# Test with minimal secrets\nNODE_ENV=test E2E_TEST_MODE=true TEST_ADMIN_PASSWORD=test ADMIN_SECRET=test-secret-that-is-32-characters-long npm run test:e2e:secrets\n```\n\n## Best Practices\n\n1. **Set required secrets first**: `NODE_ENV`, `E2E_TEST_MODE`, `TEST_ADMIN_PASSWORD`, `ADMIN_SECRET`\n2. **Use production-like database**: Set Turso credentials for realistic testing\n3. **Gradual integration**: Add service credentials as needed for specific test scenarios\n4. **Monitor warnings**: Optional missing secrets are logged for awareness\n5. **Use validation tool**: Run `npm run test:e2e:secrets` before committing changes\n\n## Implementation Details\n\nThe validation system uses a layered approach:\n\n1. **Global Setup**: Validates all secrets before any tests run\n2. **Test File Setup**: Individual files can add specific validation\n3. **Runtime Checking**: Graceful degradation for optional services\n4. **Clear Communication**: Structured output guides developers\n\nThis ensures tests fail fast when critical configuration is missing while allowing flexible development workflows with partial credential sets.",
  "THEME_SYSTEM.md": "# Theme System Documentation\n\n## Overview\n\nThe A Lo Cubano Boulder Fest website implements a sophisticated hybrid theme system that provides an optimal user experience across all pages while maintaining administrative consistency.\n\n### Theme Options\n\n- **System**: Automatically follows the user's operating system preference\n- **Light**: Always uses light theme regardless of system preference\n- **Dark**: Always uses dark theme regardless of system preference\n\n### Hybrid Architecture\n\nThe theme system uses a **hybrid approach** that balances user control with administrative requirements:\n\n- **Admin pages**: Always use dark theme (non-configurable for consistency)\n- **Main site pages**: Full user control with three theme options\n- **Persistent preferences**: User selections are saved in localStorage\n\n### Key Benefits\n\n- **Performance optimized**: Cached DOM queries and debounced operations\n- **FOUC prevention**: Themes apply synchronously on page load\n- **Accessibility**: Full keyboard navigation and ARIA attributes\n- **System integration**: Respects user's OS-level dark mode preference\n- **Admin consistency**: Fixed dark theme for administrative interfaces\n\n## Architecture\n\n### Core Components\n\n#### Theme Manager (`js/theme-manager.js`)\n\nThe central theme management system that handles theme detection, application, and persistence.\n\n**Key Features:**\n- Hybrid theme detection (admin vs. main site)\n- Performance-optimized caching system\n- System preference monitoring\n- Custom event system for component integration\n- localStorage persistence with cache invalidation\n\n**Core Functions:**\n- `determineTheme()`: Resolves appropriate theme based on page type and preferences\n- `applyTheme()`: Applies theme to document with performance optimization\n- `setTheme(theme)`: Sets user preference and applies theme immediately\n- `isAdminPage()`: Detects admin pages for fixed dark theme application\n\n#### Theme Toggle Component (`js/theme-toggle.js`)\n\nA three-state segmented control for user theme selection.\n\n**Key Features:**\n- Inline SVG icons for each theme state\n- Accessible ARIA attributes and keyboard navigation\n- Smooth transitions and visual feedback\n- Hidden on admin pages (follows theme manager patterns)\n- Performance-optimized event handling\n\n**Component States:**\n- **System (monitor icon)**: Auto-detects system preference\n- **Light (sun icon)**: Forces light theme\n- **Dark (moon icon)**: Forces dark theme\n\n#### CSS Variable System (`css/base.css`)\n\nComprehensive design system built on CSS custom properties.\n\n**Variable Categories:**\n- **Brand colors**: Core festival brand palette\n- **Semantic colors**: Context-aware color assignments\n- **Theme-aware overrides**: Dark mode color mappings\n- **Interactive states**: Hover, active, and focus states\n- **Performance optimizations**: Consolidated alpha values and transitions\n\n### Theme Detection Logic\n\n```javascript\n// Admin pages always get dark theme\nif (isAdminPage()) {\n    return THEMES.DARK;\n}\n\n// Main site: check user preference\nconst stored = getStoredPreference();\nconst preference = stored || THEMES.SYSTEM;\n\nif (preference === THEMES.SYSTEM) {\n    return detectSystemPreference();\n}\n\nreturn preference; // 'light' or 'dark'\n```\n\n### Performance Optimizations\n\n- **Cached DOM queries**: Reduces repeated element lookups\n- **Debounced localStorage**: Prevents excessive I/O operations\n- **RequestAnimationFrame**: Smooth visual transitions\n- **Performance monitoring**: Built-in timing measurements\n- **Event delegation**: Reduced memory usage for event listeners\n\n## Usage Guide\n\n### Implementing Theme Support in New Pages\n\n1. **Include theme manager early in page lifecycle:**\n\n```html\n<!-- Include before other scripts to prevent FOUC -->\n<script type=\"module\" src=\"/js/theme-manager.js\"></script>\n```\n\n2. **Add theme toggle component (main site only):**\n\n```javascript\nimport ThemeToggle from '/js/theme-toggle.js';\n\n// Initialize theme toggle in navigation\nconst toggle = ThemeToggle.initialize('#theme-toggle-container');\n```\n\n3. **Use CSS variables for styling:**\n\n```css\n.my-component {\n    background-color: var(--color-surface);\n    color: var(--color-text-primary);\n    border: 1px solid var(--color-border);\n}\n\n/* Dark mode handled automatically via CSS variables */\n```\n\n### Adding Dark Mode to Components\n\n#### Basic Component Styling\n\n```css\n.card {\n    background: var(--color-surface);\n    color: var(--color-text-primary);\n    border: 1px solid var(--color-border);\n    box-shadow: var(--shadow-md);\n    transition: var(--transition-theme);\n}\n\n.card:hover {\n    background: var(--color-surface-hover);\n}\n```\n\n#### Complex Component with State Colors\n\n```css\n.alert {\n    padding: var(--space-md);\n    border-radius: var(--radius-lg);\n    border: 1px solid var(--color-border);\n}\n\n.alert--success {\n    background: var(--color-success-light);\n    border-color: var(--color-success);\n    color: var(--color-success);\n}\n\n.alert--error {\n    background: var(--color-error-light);\n    border-color: var(--color-error);\n    color: var(--color-error);\n}\n```\n\n### CSS Variable Naming Conventions\n\n#### Semantic Color Variables\n\n```css\n/* Background hierarchy */\n--color-background          /* Page background */\n--color-background-secondary /* Secondary areas */\n--color-surface             /* Card/component surfaces */\n--color-surface-elevated    /* Elevated surfaces (modals, dropdowns) */\n\n/* Text hierarchy */\n--color-text-primary        /* Main content text */\n--color-text-secondary      /* Secondary information */\n--color-text-tertiary       /* Subtle text */\n--color-text-muted          /* Disabled/placeholder text */\n\n/* Interactive states */\n--color-primary             /* Primary actions */\n--color-primary-hover       /* Primary hover state */\n--color-secondary           /* Secondary actions */\n--color-secondary-hover     /* Secondary hover state */\n```\n\n#### State and Border Variables\n\n```css\n/* State colors */\n--color-success             /* Success states */\n--color-warning             /* Warning states */\n--color-error               /* Error states */\n--color-info                /* Informational states */\n\n/* Border hierarchy */\n--color-border              /* Default borders */\n--color-border-light        /* Subtle borders */\n--color-border-strong       /* Emphasis borders */\n```\n\n### Best Practices\n\n#### Color Usage Guidelines\n\n1. **Always use semantic variables**: Prefer `--color-text-primary` over `--color-black`\n2. **Theme-aware design**: Test components in both light and dark themes\n3. **Consistent hierarchy**: Follow established text and background hierarchies\n4. **State consistency**: Use standard state colors for success, error, warning\n5. **Performance focus**: Use CSS variables for smooth theme transitions\n\n#### Component Integration\n\n```javascript\n// Listen for theme changes in components\ndocument.addEventListener('themechange', (event) => {\n    const { theme, isAdminPage, userPreference } = event.detail;\n    \n    // Update component state based on theme\n    updateComponentForTheme(theme);\n});\n```\n\n#### Accessibility Considerations\n\n```css\n/* Ensure sufficient contrast in all themes */\n.interactive-element {\n    color: var(--color-text-primary);\n    background: var(--color-surface);\n}\n\n/* Focus states should be visible in all themes */\n.interactive-element:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n}\n```\n\n## Developer Guide\n\n### Testing Theme Functionality\n\n#### Manual Testing\n\n```javascript\n// Test theme switching programmatically\nimport { setTheme, THEMES } from '/js/theme-manager.js';\n\n// Switch to dark theme\nsetTheme(THEMES.DARK);\n\n// Switch to light theme\nsetTheme(THEMES.LIGHT);\n\n// Switch to system theme\nsetTheme(THEMES.SYSTEM);\n\n// Check current theme\nconsole.log('Current theme:', getCurrentTheme());\n```\n\n#### Theme Toggle Testing\n\n```javascript\nimport ThemeToggle from '/js/theme-toggle.js';\n\n// Initialize toggle for testing\nconst toggle = ThemeToggle.initialize('.test-container');\n\n// Programmatically set preference\nThemeToggle.setPreference('dark');\n\n// Get current preference\nconsole.log('Preference:', ThemeToggle.getCurrentPreference());\n```\n\n#### System Integration Testing\n\n```javascript\n// Test system preference detection\nif (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    console.log('System prefers dark mode');\n} else {\n    console.log('System prefers light mode');\n}\n\n// Test theme change listening\ndocument.addEventListener('themechange', (event) => {\n    console.log('Theme changed:', event.detail);\n});\n```\n\n### Debugging Theme Issues\n\n#### Common Issues and Solutions\n\n1. **FOUC (Flash of Unstyled Content)**\n   - Ensure theme-manager.js loads before other scripts\n   - Check that CSS variables are properly defined\n   - Verify theme applies synchronously\n\n2. **Theme not persisting**\n   - Check localStorage accessibility\n   - Verify theme preference storage key matches\n   - Ensure admin pages don't attempt to store preferences\n\n3. **System theme not detected**\n   - Verify `window.matchMedia` support\n   - Check `prefers-color-scheme` media query\n   - Test across different browsers and OS\n\n#### Debug Utilities\n\n```javascript\n// Theme manager debug information\nimport { getPerformanceMetrics, clearPerformanceData } from '/js/theme-manager.js';\n\n// Get performance metrics\nconsole.log('Theme performance:', getPerformanceMetrics());\n\n// Clear metrics and cache\nclearPerformanceData();\n\n// Theme toggle debug\nconsole.log('Toggle state:', {\n    preference: ThemeToggle.getCurrentPreference(),\n    effective: ThemeToggle.getEffectiveTheme(),\n    isAdmin: isAdminPage()\n});\n```\n\n### Performance Considerations\n\n#### Optimization Strategies\n\n1. **Cached DOM queries**: Elements are cached after first access\n2. **Debounced operations**: localStorage writes are debounced\n3. **RAF for smooth transitions**: Visual updates use requestAnimationFrame\n4. **Event delegation**: Minimal event listeners for better memory usage\n5. **CSS variable efficiency**: Consolidated alpha values and transitions\n\n#### Performance Monitoring\n\n```javascript\n// Built-in performance monitoring\nconst metrics = getPerformanceMetrics();\nconsole.log('Theme operations:', metrics.measures);\nconsole.log('Cache stats:', metrics.cacheStats);\n```\n\n#### Memory Management\n\n```javascript\n// Cleanup when components are destroyed\nThemeToggle.destroy(); // Removes DOM elements and event listeners\nclearPerformanceData(); // Clears performance cache\n```\n\n### Accessibility Requirements\n\n#### ARIA Attributes\n\nThe theme toggle component implements full accessibility:\n\n```html\n<div class=\"theme-toggle\" role=\"radiogroup\" aria-label=\"Theme selection\">\n    <button \n        type=\"button\"\n        class=\"theme-toggle__option\"\n        data-theme=\"system\"\n        role=\"radio\"\n        aria-checked=\"true\"\n        aria-label=\"System theme\"\n        title=\"System theme\">\n        <!-- SVG icon -->\n        <span class=\"theme-toggle__label sr-only\">System</span>\n    </button>\n    <!-- Additional options... -->\n</div>\n```\n\n#### Keyboard Navigation\n\n- **Arrow keys**: Navigate between theme options\n- **Home/End**: Jump to first/last option\n- **Enter/Space**: Select theme option\n- **Tab**: Move to next focusable element\n\n#### Screen Reader Support\n\n- Clear labeling for each theme option\n- Role-based semantics (radiogroup/radio)\n- State announcements via aria-checked\n- Hidden text labels for icon-only buttons\n\n## API Reference\n\n### Theme Manager API\n\n#### Constants\n\n```javascript\nimport { THEMES } from '/js/theme-manager.js';\n\nTHEMES.LIGHT   // 'light'\nTHEMES.DARK    // 'dark'\nTHEMES.SYSTEM  // 'system'\n```\n\n#### Core Functions\n\n```javascript\n// Get resolved theme (light/dark only)\ngetCurrentTheme(): string\n\n// Get user preference (system/light/dark)\ngetUserPreference(): string | null\n\n// Set theme preference and apply\nsetTheme(theme: string): void\n\n// Check if current page is admin\nisAdminPage(): boolean\n\n// Get system color scheme preference\ndetectSystemPreference(): string\n\n// Initialize theme system\ninitializeTheme(): void\n```\n\n#### Performance Functions\n\n```javascript\n// Get performance metrics\ngetPerformanceMetrics(): Object\n\n// Clear performance data and cache\nclearPerformanceData(): void\n```\n\n### Theme Toggle API\n\n#### Constants\n\n```javascript\nimport { THEME_OPTIONS } from '/js/theme-toggle.js';\n\nTHEME_OPTIONS.SYSTEM  // 'system'\nTHEME_OPTIONS.LIGHT   // 'light'\nTHEME_OPTIONS.DARK    // 'dark'\n```\n\n#### Component Functions\n\n```javascript\n// Initialize theme toggle component\ninitializeThemeToggle(container?: string | Element): Object | null\n\n// Get current user preference\ngetCurrentPreference(): string\n\n// Set theme preference programmatically\nsetPreference(preference: string): void\n\n// Get effective theme based on preference\ngetEffectiveTheme(preference?: string): string\n\n// Cleanup component\ndestroyThemeToggle(): void\n```\n\n### CSS Custom Properties\n\n#### Core Color Variables\n\n```css\n/* Brand colors */\n--color-black: #000000\n--color-white: #ffffff\n--color-blue: #5b6bb5\n--color-red: #cc2936\n\n/* Semantic backgrounds */\n--color-background: var(--color-white)\n--color-surface: var(--color-white)\n--color-surface-elevated: var(--color-white)\n\n/* Text hierarchy */\n--color-text-primary: var(--color-black)\n--color-text-secondary: var(--color-gray-700)\n--color-text-tertiary: var(--color-gray-500)\n\n/* Interactive states */\n--color-primary: var(--color-blue)\n--color-primary-hover: #4a5ca3\n--color-secondary: var(--color-red)\n--color-secondary-hover: #b8242f\n```\n\n#### Dark Mode Overrides\n\n```css\n[data-theme=\"dark\"] {\n    --color-background: var(--color-gray-900)\n    --color-surface: var(--color-gray-800)\n    --color-text-primary: var(--color-white)\n    --color-text-secondary: var(--color-gray-300)\n    /* Additional overrides... */\n}\n```\n\n### Event System\n\n#### Theme Change Events\n\n```javascript\n// Listen for theme changes\ndocument.addEventListener('themechange', (event) => {\n    const {\n        theme,           // Current active theme ('light'|'dark')\n        isAdminPage,     // Boolean: is this an admin page\n        userPreference,  // User's preference ('system'|'light'|'dark')\n        previousTheme    // Previous theme value\n    } = event.detail;\n});\n\n// Listen for preference changes (theme toggle)\ndocument.addEventListener('themepreferencechange', (event) => {\n    const {\n        preference,      // New preference setting\n        effectiveTheme,  // Resolved theme\n        timestamp        // Performance timestamp\n    } = event.detail;\n});\n```\n\n#### System Preference Changes\n\n```javascript\n// Listen for system theme changes\nconst mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\nmediaQuery.addEventListener('change', (event) => {\n    if (event.matches) {\n        console.log('System switched to dark mode');\n    } else {\n        console.log('System switched to light mode');\n    }\n});\n```\n\n## Maintenance Guide\n\n### Updating Brand Colors\n\nTo modify the festival's brand colors, update the root CSS variables:\n\n```css\n:root {\n    /* Update brand colors */\n    --color-blue: #new-blue-value;\n    --color-red: #new-red-value;\n    \n    /* Derived colors will automatically update */\n    --color-primary: var(--color-blue);\n    --color-secondary: var(--color-red);\n}\n```\n\n### Modifying Theme Behavior\n\n#### Changing Admin Theme\n\nTo modify the admin theme from dark to light:\n\n```javascript\n// In theme-manager.js, update determineTheme()\nfunction determineTheme() {\n    if (isAdminPage()) {\n        return THEMES.LIGHT; // Changed from THEMES.DARK\n    }\n    // ... rest of function\n}\n```\n\n#### Adding New Theme Options\n\n1. **Update theme constants:**\n\n```javascript\nconst THEMES = {\n    LIGHT: 'light',\n    DARK: 'dark',\n    SYSTEM: 'system',\n    HIGH_CONTRAST: 'high-contrast' // New theme\n};\n```\n\n2. **Add CSS variables:**\n\n```css\n[data-theme=\"high-contrast\"] {\n    --color-background: #ffffff;\n    --color-text-primary: #000000;\n    /* High contrast overrides */\n}\n```\n\n3. **Update theme toggle:**\n\n```javascript\nconst THEME_OPTIONS = {\n    SYSTEM: 'system',\n    LIGHT: 'light',\n    DARK: 'dark',\n    HIGH_CONTRAST: 'high-contrast' // New option\n};\n```\n\n### Adding New Theme Variations\n\n#### Seasonal Themes\n\n```css\n[data-theme=\"winter\"] {\n    --color-primary: #2563eb; /* Winter blue */\n    --color-secondary: #dc2626; /* Winter red */\n    /* Additional winter styling */\n}\n\n[data-theme=\"summer\"] {\n    --color-primary: #f59e0b; /* Summer gold */\n    --color-secondary: #10b981; /* Summer green */\n    /* Additional summer styling */\n}\n```\n\n#### Event-Specific Themes\n\n```css\n[data-theme=\"festival\"] {\n    --color-background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --color-surface: rgba(255, 255, 255, 0.9);\n    /* Festival-specific overrides */\n}\n```\n\n### Troubleshooting Common Issues\n\n#### Issue: Theme Not Applying on Page Load\n\n**Symptoms:**\n- Flash of unstyled content (FOUC)\n- Theme applies after page loads\n\n**Solutions:**\n1. Ensure theme-manager.js loads before other scripts\n2. Check that CSS variables are defined in base.css\n3. Verify theme manager auto-initializes on module load\n\n#### Issue: Theme Toggle Not Visible\n\n**Symptoms:**\n- Theme toggle doesn't appear on main site pages\n- Toggle appears on admin pages (incorrect)\n\n**Solutions:**\n1. Check `isAdminPage()` detection logic\n2. Verify toggle initialization in page scripts\n3. Ensure theme toggle styles are loaded\n\n#### Issue: System Theme Not Updating\n\n**Symptoms:**\n- System theme option doesn't follow OS changes\n- Theme stuck on initial system preference\n\n**Solutions:**\n1. Verify `window.matchMedia` support\n2. Check media query event listener setup\n3. Test `prefers-color-scheme` detection\n\n#### Issue: Theme Preference Not Persisting\n\n**Symptoms:**\n- Theme resets on page reload\n- Preferences don't save between sessions\n\n**Solutions:**\n1. Check localStorage availability\n2. Verify storage key consistency\n3. Ensure admin pages don't attempt storage\n\n#### Issue: Performance Problems\n\n**Symptoms:**\n- Slow theme switching\n- High memory usage\n- Choppy animations\n\n**Solutions:**\n1. Enable performance monitoring\n2. Check for excessive DOM queries\n3. Verify RAF usage for animations\n4. Clear performance cache periodically\n\n### Debugging Checklist\n\nWhen troubleshooting theme issues:\n\n1. **Check browser console** for JavaScript errors\n2. **Verify CSS variables** are properly defined\n3. **Test localStorage** accessibility and values\n4. **Check media queries** with developer tools\n5. **Monitor performance** with built-in metrics\n6. **Test across browsers** and operating systems\n7. **Verify ARIA attributes** for accessibility\n8. **Check event listeners** are properly attached\n\n### Performance Monitoring\n\n#### Built-in Metrics\n\n```javascript\n// Get detailed performance information\nconst metrics = getPerformanceMetrics();\nconsole.table(metrics.measures);\nconsole.log('Cache stats:', metrics.cacheStats);\n```\n\n#### Custom Performance Tracking\n\n```javascript\n// Add custom performance marks\nperformance.mark('custom-theme-operation-start');\n// ... perform operation\nperformance.mark('custom-theme-operation-end');\nperformance.measure('custom-operation', \n    'custom-theme-operation-start', \n    'custom-theme-operation-end'\n);\n```\n\n### Browser Support\n\nThe theme system supports all modern browsers:\n\n- **Chrome/Edge**: Full support\n- **Firefox**: Full support  \n- **Safari**: Full support\n- **Mobile browsers**: Full support\n\n**Graceful degradation:**\n- CSS variables fallback to default values\n- `matchMedia` fallback to light theme\n- localStorage fallback to session-only preferences\n\n## Conclusion\n\nThe A Lo Cubano Boulder Fest theme system provides a robust, performant, and accessible way to manage visual themes across the website. Its hybrid approach balances user control with administrative consistency, while the performance optimizations ensure smooth operation even on resource-constrained devices.\n\nFor additional questions or support, refer to the main project documentation or contact the development team.",
  "architecture/ENTERPRISE_DATABASE_SYSTEM.md": "# Enterprise Database Connection Management System\n\n## Overview\n\nThis comprehensive enterprise database system provides production-ready connection management with advanced features for the A Lo Cubano Boulder Fest application. The system is designed for safe deployment, monitoring, and management in serverless environments.\n\n## 🚀 Quick Start\n\n### Installation and Setup\n\n```bash\n# Install dependencies\nnpm install\n\n# Set up environment variables (see .env.local.example)\ncp .env.local.example .env.local\n\n# Validate system health\nnpm run enterprise:health\n\n# View current configuration\nnpm run enterprise:tools config:show\n```\n\n### Basic Deployment\n\n```bash\n# Development setup\nnpm run enterprise:tools flags:enable ENABLE_ENTERPRISE_MONITORING \"development\"\nnpm run enterprise:tools flags:enable ENABLE_CONNECTION_POOL \"development\"\n\n# Production migration (with approval)\nPRODUCTION_MIGRATION_APPROVED=true npm run enterprise:migrate\n\n# Health monitoring\nnpm run enterprise:health -- --continuous --enable-rollback\n```\n\n## 🏗️ Architecture Components\n\n### 1. **Connection Pool Manager** (`/lib/connection-manager.js`)\n- Resource leasing system with timeout protection\n- Connection lifecycle tracking\n- Serverless-optimized configurations\n- Graceful shutdown procedures\n\n### 2. **Connection State Machine** (`/lib/connection-state-machine.js`)\n- Atomic state transitions\n- Operation validation\n- Error recovery mechanisms\n- Comprehensive state history\n\n### 3. **Circuit Breaker** (`/lib/circuit-breaker.js`)\n- Automatic failure detection\n- Multiple failure type handling\n- Performance monitoring\n- Fast-fail for open circuits\n\n### 4. **Monitoring System** (`/lib/monitoring/monitoring-service.js`)\n- Real-time health checks\n- Performance metrics collection\n- Business metrics tracking\n- Alert management\n\n### 5. **Configuration Management** (`/lib/database-config.js`)\n- Environment-specific settings\n- Runtime configuration updates\n- Configuration validation\n- Migration between versions\n\n### 6. **Feature Flag System** (`/lib/feature-flags.js`)\n- Controlled rollout capabilities\n- A/B testing support\n- Emergency rollback mechanisms\n- User/request targeting\n\n## 🛠️ Platform Tools\n\n### Command-Line Interface\n\n```bash\n# Configuration Management\nnpm run enterprise:tools config:show [component]\nnpm run enterprise:tools config:validate\nnpm run enterprise:tools config:update <component> <key> <value>\nnpm run enterprise:tools config:export [format] [file]\n\n# Feature Flag Management\nnpm run enterprise:tools flags:show\nnpm run enterprise:tools flags:enable <flag> [reason]\nnpm run enterprise:tools flags:disable <flag> [reason]\nnpm run enterprise:tools flags:rollout <flag> <percentage>\nnpm run enterprise:tools flags:killswitch [reason]\n\n# Deployment Operations\nnpm run enterprise:migrate [--dry-run] [--target=phase]\nnpm run enterprise:health [--continuous] [--enable-rollback]\nnpm run enterprise:tools deploy:status\nnpm run enterprise:tools deploy:rollback [reason]\n\n# Monitoring and Debugging\nnpm run enterprise:tools monitor:health [--detailed]\nnpm run enterprise:tools monitor:metrics [category]\nnpm run enterprise:tools monitor:connections\nnpm run enterprise:tools debug:connections\nnpm run enterprise:tools debug:performance\n\n# Maintenance Operations\nnpm run enterprise:tools maint:cleanup\nnpm run enterprise:tools maint:optimize\nnpm run enterprise:tools maint:backup [file]\nnpm run enterprise:tools maint:restore <file>\n```\n\n## 📋 Deployment Phases\n\n### Phase 1: Validation (Always Safe)\n```bash\nnpm run enterprise:health\nnpm run enterprise:tools config:validate\n```\n\n### Phase 2: Monitoring (No Behavior Change)\n```bash\nnpm run enterprise:tools flags:enable ENABLE_ENTERPRISE_MONITORING \"deployment\"\n```\n\n### Phase 3: Canary (5% Traffic)\n```bash\nnpm run enterprise:migrate -- --target=canary\n```\n\n### Phase 4: Gradual Rollout (10-100%)\n```bash\nnpm run enterprise:migrate -- --target=gradual\n```\n\n### Phase 5: Full Deployment\n```bash\nnpm run enterprise:migrate\n```\n\n## 🔧 Configuration Examples\n\n### Development Environment\n```bash\nnpm run enterprise:tools config:update connectionPool maxConnections 2\nnpm run enterprise:tools config:update circuitBreaker failureThreshold 3\nnpm run enterprise:tools flags:enable ENABLE_DETAILED_LOGGING \"development\"\n```\n\n### Production Environment\n```bash\nnpm run enterprise:tools config:update connectionPool maxConnections 5\nnpm run enterprise:tools config:update circuitBreaker recoveryTimeout 30000\nnpm run enterprise:tools flags:rollout ENABLE_CONNECTION_POOL 100\n```\n\n## 🚨 Emergency Procedures\n\n### Immediate Rollback\n```bash\n# Emergency killswitch (fastest)\nnpm run enterprise:tools flags:killswitch \"emergency\"\n\n# Migration rollback\nnpm run enterprise:migrate -- --rollback\n\n# Full deployment rollback\nnpm run enterprise:tools deploy:rollback \"emergency\"\n```\n\n### Troubleshooting\n```bash\n# Debug connection issues\nnpm run enterprise:tools debug:connections\n\n# Check system health\nnpm run enterprise:tools monitor:health --detailed\n\n# Performance analysis\nnpm run enterprise:tools debug:performance\n\n# Extract error logs\nnpm run enterprise:tools debug:logs error 2\n```\n\n## 📊 Monitoring and Health Checks\n\n### Continuous Monitoring\n```bash\n# Basic health check\nnpm run enterprise:health\n\n# Continuous monitoring with rollback\nnpm run enterprise:health -- --continuous --enable-rollback\n\n# Monitor specific metrics\nnpm run enterprise:tools monitor:metrics performance\n```\n\n### Health Check Integration\n```yaml\n# GitHub Actions example\n- name: Enterprise Database Health Check\n  run: npm run enterprise:health\n\n- name: Validate Deployment\n  run: |\n    npm run enterprise:tools deploy:status\n    npm run enterprise:health -- --duration=120000\n```\n\n## 🔐 Security and Compliance\n\n### Environment Variables\n```bash\n# Required for all environments\nTURSO_DATABASE_URL=libsql://your-database.turso.io\nTURSO_AUTH_TOKEN=your-auth-token\n\n# Optional feature flags\nFEATURE_ENABLE_CONNECTION_POOL=false\nFEATURE_ENABLE_CIRCUIT_BREAKER=false\nFEATURE_ENABLE_ENTERPRISE_MONITORING=true\n\n# Production deployment approval\nPRODUCTION_MIGRATION_APPROVED=true\n```\n\n### Access Control\n- Production migration requires explicit approval\n- Feature flags provide controlled access\n- Circuit breaker prevents cascade failures\n- Monitoring tracks all operations\n\n## 📈 Performance Optimization\n\n### Serverless Configuration\n- Optimized connection pool sizes (2-5 connections)\n- Circuit breaker tuned for serverless environments\n- Fast-fail timeouts for responsive error handling\n- Memory-efficient monitoring\n\n### Auto-Optimization\n```bash\n# Get optimization suggestions\nnpm run enterprise:tools maint:optimize\n\n# Apply performance tuning\nnpm run enterprise:tools config:update connectionPool acquireTimeout 5000\nnpm run enterprise:tools config:update circuitBreaker timeoutThreshold 5000\n```\n\n## 🧪 Testing\n\n### Unit Tests\n```bash\nnpm test -- tests/unit/enterprise-database-integration.test.js\n```\n\n### Integration Tests\n```bash\nnpm run test:integration\n```\n\n### End-to-End Tests\n```bash\nnpm run test:e2e\n```\n\n## 📚 Documentation\n\n- **[Deployment Guide](docs/ENTERPRISE_DATABASE_DEPLOYMENT.md)** - Complete deployment procedures\n- **[Configuration Reference](lib/database-config.js)** - All configuration options\n- **[Feature Flags Guide](lib/feature-flags.js)** - Feature flag management\n- **[Migration Procedures](scripts/migrate-to-enterprise.js)** - Safe migration scripts\n- **[Health Check Guide](scripts/deployment-health-check.js)** - Health monitoring\n- **[Platform Tools](scripts/platform-tools.js)** - Command-line tools\n\n## 🎯 Success Metrics\n\n### Deployment Success\n- ✅ Health score >= 85%\n- ✅ Zero critical failures\n- ✅ Response time within thresholds\n- ✅ Error rate < 1% (production)\n- ✅ All feature flags operational\n\n### Operational Excellence\n- ✅ Zero-downtime deployments\n- ✅ Automatic rollback on failures\n- ✅ Comprehensive monitoring\n- ✅ Safe configuration updates\n- ✅ Emergency procedures tested\n\n## 🚀 Future Enhancements\n\n### Planned Features\n- [ ] Advanced performance analytics\n- [ ] Automated performance tuning\n- [ ] Multi-region deployment support\n- [ ] Enhanced debugging tools\n- [ ] Integration with external monitoring systems\n\n### Extensibility\nThe system is designed for easy extension:\n- Plugin architecture for new features\n- Configuration-driven behavior\n- Modular component design\n- Comprehensive testing framework\n\n## 🤝 Support\n\n### Platform Engineering Team\n- Configuration management issues\n- Deployment procedures\n- Performance optimization\n- Emergency response\n\n### Development Team\n- Feature flag questions\n- Integration guidance\n- Testing procedures\n- Best practices\n\n### External Escalation\nInclude the following when escalating:\n```bash\n# Generate support bundle\nnpm run enterprise:tools config:export json > support-config.json\nnpm run enterprise:tools monitor:health --detailed > support-health.json\nnpm run enterprise:tools flags:show > support-flags.json\n```\n\n---\n\n## 📝 Quick Reference\n\n### Essential Commands\n```bash\n# Status check\nnpm run enterprise:tools deploy:status\n\n# Enable feature\nnpm run enterprise:tools flags:enable FEATURE_NAME \"reason\"\n\n# Health check\nnpm run enterprise:health\n\n# Emergency rollback\nnpm run enterprise:tools flags:killswitch \"emergency\"\n\n# Configuration backup\nnpm run enterprise:tools maint:backup config-backup.json\n```\n\n### File Locations\n- Configuration: `/lib/database-config.js`\n- Feature Flags: `/lib/feature-flags.js`\n- Migration: `/scripts/migrate-to-enterprise.js`\n- Health Check: `/scripts/deployment-health-check.js`\n- Platform Tools: `/scripts/platform-tools.js`\n- Integration: `/lib/enterprise-database-integration.js`\n\nThe enterprise database system provides a complete, production-ready solution for managing database connections in serverless environments with safety, monitoring, and operational excellence built-in.",
  "architecture/MULTI_EVENT_ARCHITECTURE.md": "# Multi-Event Architecture Design\n\n## Executive Summary\n\nThis document outlines the comprehensive architecture for transforming the A Lo Cubano Boulder Fest admin portal from a single-event system to a multi-event platform supporting multiple festival types across different years. The design enables managing Weekender events (smaller throughout the year) and the main annual festival, with complete event isolation and comparison capabilities.\n\n## System Context\n\n### Business Context\n\n- **Current State**: Single global event system with no event differentiation\n- **Target State**: Multi-event platform supporting various festival types and years\n- **Key Drivers**: Business expansion to host multiple events per year\n- **Success Metrics**: Event isolation, cross-event analytics, scalable to 50+ events\n\n### Technical Context\n\n- **Database**: SQLite (dev) / Turso (production)\n- **Backend**: Vercel serverless functions\n- **Frontend**: Vanilla JavaScript with ES6 modules\n- **Auth**: JWT-based admin authentication\n\n## Architecture Overview\n\n### High-Level Architecture\n\n```mermaid\ngraph TB\n    subgraph \"Admin Portal\"\n        A[Event Selector Component]\n        B[Dashboard]\n        C[Analytics]\n        D[Check-in Scanner]\n        E[Registration Manager]\n    end\n    \n    subgraph \"Event Context Layer\"\n        F[Event Context Manager]\n        G[Session Storage]\n        H[LocalStorage Cache]\n    end\n    \n    subgraph \"API Layer\"\n        I[Event-Aware Endpoints]\n        J[Event Validator]\n        K[Cross-Event Aggregator]\n    end\n    \n    subgraph \"Data Layer\"\n        L[(Events Table)]\n        M[(Event Relations)]\n        N[(Audit Trail)]\n    end\n    \n    A --> F\n    B --> I\n    C --> I\n    D --> I\n    E --> I\n    F --> G\n    F --> H\n    I --> J\n    I --> K\n    J --> L\n    K --> M\n    I --> N\n```\n\n## Detailed Design\n\n### Database Schema Changes\n\n```sql\n-- Core Events Table\nCREATE TABLE events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    slug TEXT NOT NULL UNIQUE,\n    name TEXT NOT NULL,\n    type TEXT NOT NULL CHECK(type IN ('festival', 'weekender', 'workshop', 'special')),\n    status TEXT NOT NULL DEFAULT 'draft' CHECK(status IN ('draft', 'upcoming', 'active', 'completed', 'cancelled')),\n    \n    -- Event Details\n    description TEXT,\n    venue_name TEXT,\n    venue_address TEXT,\n    venue_city TEXT DEFAULT 'Boulder',\n    venue_state TEXT DEFAULT 'CO',\n    venue_zip TEXT,\n    \n    -- Event Dates\n    start_date DATE NOT NULL,\n    end_date DATE NOT NULL,\n    year INTEGER GENERATED ALWAYS AS (CAST(strftime('%Y', start_date) AS INTEGER)) STORED,\n    \n    -- Capacity and Pricing\n    max_capacity INTEGER,\n    early_bird_end_date DATE,\n    regular_price_start_date DATE,\n    \n    -- Display and Ordering\n    display_order INTEGER DEFAULT 0,\n    is_featured BOOLEAN DEFAULT FALSE,\n    is_visible BOOLEAN DEFAULT TRUE,\n    \n    -- Metadata\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    created_by TEXT,\n    \n    -- Configuration\n    config JSON, -- Flexible event-specific settings\n    \n    -- Indexes for performance\n    INDEX idx_events_slug (slug),\n    INDEX idx_events_type (type),\n    INDEX idx_events_year (year),\n    INDEX idx_events_status (status),\n    INDEX idx_events_dates (start_date, end_date)\n);\n\n-- Event Settings Table (Key-Value Store)\nCREATE TABLE event_settings (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    event_id INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,\n    key TEXT NOT NULL,\n    value TEXT,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(event_id, key),\n    INDEX idx_event_settings_lookup (event_id, key)\n);\n\n-- Update Tickets Table\nALTER TABLE tickets ADD COLUMN event_id INTEGER REFERENCES events(id);\nCREATE INDEX idx_tickets_event ON tickets(event_id);\n\n-- Update Transactions Table  \nALTER TABLE transactions ADD COLUMN event_id INTEGER REFERENCES events(id);\nCREATE INDEX idx_transactions_event ON transactions(event_id);\n\n-- Update Newsletter Subscribers\nALTER TABLE newsletter_subscribers ADD COLUMN event_id INTEGER REFERENCES events(id);\nCREATE INDEX idx_newsletter_event ON newsletter_subscribers(event_id);\n\n-- Event Access Control\nCREATE TABLE event_access (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    event_id INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,\n    user_email TEXT NOT NULL,\n    role TEXT DEFAULT 'viewer' CHECK(role IN ('viewer', 'manager', 'admin')),\n    granted_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    granted_by TEXT,\n    UNIQUE(event_id, user_email),\n    INDEX idx_event_access_user (user_email),\n    INDEX idx_event_access_event (event_id)\n);\n\n-- Event Audit Log\nCREATE TABLE event_audit_log (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    event_id INTEGER REFERENCES events(id),\n    action TEXT NOT NULL,\n    entity_type TEXT,\n    entity_id TEXT,\n    user_email TEXT,\n    ip_address TEXT,\n    user_agent TEXT,\n    details JSON,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    INDEX idx_audit_event (event_id),\n    INDEX idx_audit_user (user_email),\n    INDEX idx_audit_created (created_at)\n);\n```\n\n### API Endpoint Modifications\n\n#### Event Management Endpoints\n\n```javascript\n// GET /api/events - List all events\n{\n  query: {\n    type?: 'festival' | 'weekender' | 'workshop' | 'special',\n    year?: number,\n    status?: 'draft' | 'upcoming' | 'active' | 'completed' | 'cancelled',\n    include_hidden?: boolean\n  },\n  response: {\n    events: Event[],\n    current_event_id: number,\n    total: number\n  }\n}\n\n// GET /api/events/:eventId - Get specific event\n{\n  params: { eventId: string },\n  response: Event\n}\n\n// POST /api/events - Create new event (admin only)\n{\n  body: {\n    name: string,\n    type: string,\n    start_date: string,\n    end_date: string,\n    venue_name: string,\n    max_capacity?: number\n  },\n  response: Event\n}\n\n// PUT /api/events/:eventId - Update event\n{\n  params: { eventId: string },\n  body: Partial<Event>,\n  response: Event\n}\n\n// POST /api/events/:eventId/duplicate - Clone event\n{\n  params: { eventId: string },\n  body: {\n    name: string,\n    start_date: string,\n    end_date: string\n  },\n  response: Event\n}\n```\n\n#### Event-Filtered Endpoints\n\nAll existing endpoints will support event filtering:\n\n```javascript\n// Modified endpoint signatures\nGET /api/admin/dashboard?event_id=123\nGET /api/admin/registrations?event_id=123\nGET /api/admin/analytics?event_id=123&compare_with=456\nGET /api/tickets/validate?event_id=123\n\n// Headers for event context\nX-Event-ID: 123\nX-Event-Slug: boulderfest-2026\n\n// Response headers\nX-Event-Name: A Lo Cubano Boulder Fest 2026\nX-Event-Type: festival\n```\n\n### Event Context Management\n\n```javascript\n// EventContextManager.js\nclass EventContextManager {\n  constructor() {\n    this.currentEvent = null;\n    this.availableEvents = [];\n    this.storage = window.localStorage;\n    this.session = window.sessionStorage;\n    this.STORAGE_KEY = 'admin_current_event';\n    this.CACHE_KEY = 'admin_events_cache';\n    this.CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  }\n\n  async initialize() {\n    // Load cached events\n    const cached = this.loadCachedEvents();\n    if (cached && !this.isCacheExpired(cached)) {\n      this.availableEvents = cached.events;\n    } else {\n      await this.fetchEvents();\n    }\n\n    // Restore last selected event or use default\n    const savedEventId = this.storage.getItem(this.STORAGE_KEY);\n    if (savedEventId) {\n      await this.selectEvent(savedEventId);\n    } else {\n      await this.selectDefaultEvent();\n    }\n  }\n\n  async fetchEvents() {\n    const response = await fetch('/api/events', {\n      headers: { 'Authorization': `Bearer ${this.getAuthToken()}` }\n    });\n    \n    const data = await response.json();\n    this.availableEvents = data.events;\n    \n    // Cache events\n    this.storage.setItem(this.CACHE_KEY, JSON.stringify({\n      events: data.events,\n      timestamp: Date.now()\n    }));\n    \n    return data.events;\n  }\n\n  async selectEvent(eventId) {\n    const event = this.availableEvents.find(e => e.id === eventId);\n    if (!event) {\n      throw new Error(`Event ${eventId} not found`);\n    }\n\n    this.currentEvent = event;\n    this.storage.setItem(this.STORAGE_KEY, eventId);\n    \n    // Emit event change\n    window.dispatchEvent(new CustomEvent('eventChanged', {\n      detail: { event, previousEvent: this.currentEvent }\n    }));\n    \n    // Update all API calls to include event context\n    this.injectEventContext();\n    \n    return event;\n  }\n\n  async selectDefaultEvent() {\n    // Priority: Active > Upcoming > Most Recent\n    const active = this.availableEvents.find(e => e.status === 'active');\n    const upcoming = this.availableEvents.find(e => e.status === 'upcoming');\n    const mostRecent = this.availableEvents.sort((a, b) => \n      new Date(b.start_date) - new Date(a.start_date)\n    )[0];\n    \n    const defaultEvent = active || upcoming || mostRecent;\n    if (defaultEvent) {\n      await this.selectEvent(defaultEvent.id);\n    }\n  }\n\n  injectEventContext() {\n    // Intercept all fetch calls to add event context\n    const originalFetch = window.fetch;\n    window.fetch = async (url, options = {}) => {\n      if (this.currentEvent && url.startsWith('/api/')) {\n        // Add event_id to query params\n        const urlObj = new URL(url, window.location.origin);\n        if (!urlObj.searchParams.has('event_id')) {\n          urlObj.searchParams.set('event_id', this.currentEvent.id);\n        }\n        \n        // Add event headers\n        options.headers = {\n          ...options.headers,\n          'X-Event-ID': this.currentEvent.id,\n          'X-Event-Slug': this.currentEvent.slug\n        };\n        \n        return originalFetch(urlObj.toString(), options);\n      }\n      return originalFetch(url, options);\n    };\n  }\n\n  getCurrentEvent() {\n    return this.currentEvent;\n  }\n\n  getAvailableEvents() {\n    return this.availableEvents;\n  }\n\n  clearEventContext() {\n    this.currentEvent = null;\n    this.storage.removeItem(this.STORAGE_KEY);\n    this.storage.removeItem(this.CACHE_KEY);\n  }\n\n  loadCachedEvents() {\n    const cached = this.storage.getItem(this.CACHE_KEY);\n    return cached ? JSON.parse(cached) : null;\n  }\n\n  isCacheExpired(cache) {\n    return Date.now() - cache.timestamp > this.CACHE_TTL;\n  }\n\n  getAuthToken() {\n    return this.storage.getItem('admin_token');\n  }\n}\n\nexport default new EventContextManager();\n```\n\n### UI Component Design\n\n```javascript\n// EventSelector.js\nclass EventSelector {\n  constructor() {\n    this.container = null;\n    this.contextManager = null;\n  }\n\n  async render(containerId) {\n    this.container = document.getElementById(containerId);\n    this.contextManager = await import('./EventContextManager.js').then(m => m.default);\n    \n    await this.contextManager.initialize();\n    this.buildUI();\n    this.attachEventListeners();\n  }\n\n  buildUI() {\n    const events = this.contextManager.getAvailableEvents();\n    const currentEvent = this.contextManager.getCurrentEvent();\n    \n    this.container.innerHTML = `\n      <div class=\"event-selector\">\n        <div class=\"event-selector-current\">\n          <label class=\"event-selector-label\">Current Event</label>\n          <div class=\"event-selector-display\">\n            <span class=\"event-name\">${currentEvent?.name || 'Select Event'}</span>\n            <span class=\"event-type\">${currentEvent?.type || ''}</span>\n            <span class=\"event-dates\">\n              ${currentEvent ? this.formatDateRange(currentEvent) : ''}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"event-selector-dropdown\">\n          <button class=\"event-selector-trigger\" aria-expanded=\"false\">\n            <span>Change Event</span>\n            <svg class=\"event-selector-icon\"><!-- Chevron icon --></svg>\n          </button>\n          \n          <div class=\"event-selector-menu\" hidden>\n            <div class=\"event-selector-search\">\n              <input \n                type=\"text\" \n                placeholder=\"Search events...\" \n                class=\"event-search-input\"\n              />\n            </div>\n            \n            <div class=\"event-selector-groups\">\n              ${this.renderEventGroups(events)}\n            </div>\n            \n            <div class=\"event-selector-actions\">\n              <button class=\"btn-create-event\">+ New Event</button>\n              <button class=\"btn-compare-events\">Compare Events</button>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"event-selector-stats\">\n          <span class=\"event-stat\">\n            <strong>${currentEvent?.ticket_count || 0}</strong> tickets\n          </span>\n          <span class=\"event-stat\">\n            <strong>${currentEvent?.revenue || 0}</strong> revenue\n          </span>\n        </div>\n      </div>\n    `;\n  }\n\n  renderEventGroups(events) {\n    // Group events by year and type\n    const grouped = events.reduce((acc, event) => {\n      const year = new Date(event.start_date).getFullYear();\n      if (!acc[year]) acc[year] = [];\n      acc[year].push(event);\n      return acc;\n    }, {});\n\n    return Object.entries(grouped)\n      .sort(([a], [b]) => b - a) // Sort years descending\n      .map(([year, yearEvents]) => `\n        <div class=\"event-group\">\n          <h4 class=\"event-group-title\">${year}</h4>\n          <ul class=\"event-list\">\n            ${yearEvents.map(event => `\n              <li class=\"event-item\" data-event-id=\"${event.id}\">\n                <div class=\"event-item-content\">\n                  <span class=\"event-item-name\">${event.name}</span>\n                  <span class=\"event-item-badge ${event.status}\">\n                    ${event.status}\n                  </span>\n                </div>\n                <div class=\"event-item-meta\">\n                  <span class=\"event-item-type\">${event.type}</span>\n                  <span class=\"event-item-dates\">\n                    ${this.formatDateRange(event)}\n                  </span>\n                </div>\n              </li>\n            `).join('')}\n          </ul>\n        </div>\n      `).join('');\n  }\n\n  attachEventListeners() {\n    // Toggle dropdown\n    const trigger = this.container.querySelector('.event-selector-trigger');\n    const menu = this.container.querySelector('.event-selector-menu');\n    \n    trigger.addEventListener('click', () => {\n      const isOpen = trigger.getAttribute('aria-expanded') === 'true';\n      trigger.setAttribute('aria-expanded', !isOpen);\n      menu.hidden = isOpen;\n    });\n\n    // Event selection\n    this.container.addEventListener('click', async (e) => {\n      const eventItem = e.target.closest('.event-item');\n      if (eventItem) {\n        const eventId = parseInt(eventItem.dataset.eventId);\n        await this.contextManager.selectEvent(eventId);\n        this.buildUI(); // Rebuild to show new selection\n        window.location.reload(); // Reload to fetch new event data\n      }\n    });\n\n    // Search functionality\n    const searchInput = this.container.querySelector('.event-search-input');\n    searchInput?.addEventListener('input', (e) => {\n      this.filterEvents(e.target.value);\n    });\n\n    // Close dropdown when clicking outside\n    document.addEventListener('click', (e) => {\n      if (!this.container.contains(e.target)) {\n        trigger.setAttribute('aria-expanded', 'false');\n        menu.hidden = true;\n      }\n    });\n\n    // Listen for event changes from other sources\n    window.addEventListener('eventChanged', (e) => {\n      this.buildUI();\n    });\n  }\n\n  filterEvents(searchTerm) {\n    const items = this.container.querySelectorAll('.event-item');\n    const term = searchTerm.toLowerCase();\n    \n    items.forEach(item => {\n      const name = item.querySelector('.event-item-name').textContent.toLowerCase();\n      const type = item.querySelector('.event-item-type').textContent.toLowerCase();\n      const visible = name.includes(term) || type.includes(term);\n      item.style.display = visible ? '' : 'none';\n    });\n\n    // Hide empty groups\n    const groups = this.container.querySelectorAll('.event-group');\n    groups.forEach(group => {\n      const visibleItems = group.querySelectorAll('.event-item:not([style*=\"none\"])');\n      group.style.display = visibleItems.length > 0 ? '' : 'none';\n    });\n  }\n\n  formatDateRange(event) {\n    const start = new Date(event.start_date);\n    const end = new Date(event.end_date);\n    const formatter = new Intl.DateTimeFormat('en-US', { \n      month: 'short', \n      day: 'numeric' \n    });\n    \n    if (start.getTime() === end.getTime()) {\n      return formatter.format(start);\n    }\n    \n    return `${formatter.format(start)} - ${formatter.format(end)}`;\n  }\n}\n\nexport default EventSelector;\n```\n\n### CSS Styles for Event Selector\n\n```css\n/* Event Selector Component */\n.event-selector {\n  display: flex;\n  align-items: center;\n  gap: 1.5rem;\n  padding: 1rem;\n  background: var(--admin-bg-secondary);\n  border-radius: 0.5rem;\n  margin-bottom: 2rem;\n}\n\n.event-selector-current {\n  flex: 1;\n}\n\n.event-selector-label {\n  display: block;\n  font-size: 0.875rem;\n  color: var(--admin-text-secondary);\n  margin-bottom: 0.25rem;\n}\n\n.event-selector-display {\n  display: flex;\n  align-items: baseline;\n  gap: 1rem;\n}\n\n.event-name {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: var(--admin-text-primary);\n}\n\n.event-type {\n  padding: 0.125rem 0.5rem;\n  background: var(--admin-accent-primary);\n  color: white;\n  border-radius: 0.25rem;\n  font-size: 0.75rem;\n  text-transform: uppercase;\n}\n\n.event-dates {\n  color: var(--admin-text-secondary);\n  font-size: 0.875rem;\n}\n\n.event-selector-dropdown {\n  position: relative;\n}\n\n.event-selector-trigger {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  background: var(--admin-bg-primary);\n  border: 1px solid var(--admin-border);\n  border-radius: 0.375rem;\n  color: var(--admin-text-primary);\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.event-selector-trigger:hover {\n  background: var(--admin-bg-hover);\n  border-color: var(--admin-accent-primary);\n}\n\n.event-selector-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  margin-top: 0.5rem;\n  width: 320px;\n  background: var(--admin-bg-primary);\n  border: 1px solid var(--admin-border);\n  border-radius: 0.5rem;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  max-height: 500px;\n  overflow-y: auto;\n}\n\n.event-selector-search {\n  padding: 1rem;\n  border-bottom: 1px solid var(--admin-border);\n}\n\n.event-search-input {\n  width: 100%;\n  padding: 0.5rem;\n  background: var(--admin-bg-secondary);\n  border: 1px solid var(--admin-border);\n  border-radius: 0.375rem;\n  color: var(--admin-text-primary);\n}\n\n.event-selector-groups {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.event-group {\n  padding: 0.75rem 1rem;\n  border-bottom: 1px solid var(--admin-border);\n}\n\n.event-group:last-child {\n  border-bottom: none;\n}\n\n.event-group-title {\n  font-size: 0.75rem;\n  font-weight: 600;\n  color: var(--admin-text-secondary);\n  text-transform: uppercase;\n  margin-bottom: 0.5rem;\n}\n\n.event-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.event-item {\n  padding: 0.5rem;\n  margin: 0 -0.5rem;\n  cursor: pointer;\n  border-radius: 0.375rem;\n  transition: background 0.2s;\n}\n\n.event-item:hover {\n  background: var(--admin-bg-hover);\n}\n\n.event-item-content {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 0.25rem;\n}\n\n.event-item-name {\n  font-weight: 500;\n  color: var(--admin-text-primary);\n}\n\n.event-item-badge {\n  padding: 0.125rem 0.375rem;\n  border-radius: 0.25rem;\n  font-size: 0.625rem;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n\n.event-item-badge.active {\n  background: var(--admin-success);\n  color: white;\n}\n\n.event-item-badge.upcoming {\n  background: var(--admin-info);\n  color: white;\n}\n\n.event-item-badge.completed {\n  background: var(--admin-text-secondary);\n  color: white;\n}\n\n.event-item-badge.draft {\n  background: var(--admin-warning);\n  color: var(--admin-text-primary);\n}\n\n.event-item-meta {\n  display: flex;\n  gap: 1rem;\n  font-size: 0.75rem;\n  color: var(--admin-text-secondary);\n}\n\n.event-selector-actions {\n  padding: 1rem;\n  border-top: 1px solid var(--admin-border);\n  display: flex;\n  gap: 0.5rem;\n}\n\n.event-selector-actions button {\n  flex: 1;\n  padding: 0.5rem;\n  border-radius: 0.375rem;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.btn-create-event {\n  background: var(--admin-accent-primary);\n  color: white;\n  border: none;\n}\n\n.btn-compare-events {\n  background: transparent;\n  color: var(--admin-accent-primary);\n  border: 1px solid var(--admin-accent-primary);\n}\n\n.event-selector-stats {\n  display: flex;\n  gap: 1.5rem;\n}\n\n.event-stat {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 1rem;\n  background: var(--admin-bg-primary);\n  border-radius: 0.375rem;\n}\n\n.event-stat strong {\n  font-size: 1.25rem;\n  color: var(--admin-accent-primary);\n}\n```\n\n## Implementation Roadmap\n\n### Phase 1: Foundation (Week 1-2)\n\n- [ ] Create database migration for events table\n- [ ] Implement event management API endpoints\n- [ ] Build EventContextManager class\n- [ ] Add event_id to existing tables\n- [ ] Create event selector UI component\n\n### Phase 2: Integration (Week 3-4)\n\n- [ ] Update all admin API endpoints for event filtering\n- [ ] Integrate event selector into admin pages\n- [ ] Implement event context persistence\n- [ ] Add event switching functionality\n- [ ] Update dashboard statistics for per-event data\n\n### Phase 3: Enhancement (Week 5-6)\n\n- [ ] Add cross-event comparison views\n- [ ] Implement event cloning functionality\n- [ ] Build event access control system\n- [ ] Create audit logging for event actions\n- [ ] Add bulk operations across events\n\n### Phase 4: Optimization (Week 7-8)\n\n- [ ] Performance tuning for multi-event queries\n- [ ] Implement event data caching\n- [ ] Add event archival functionality\n- [ ] Create event migration tools\n- [ ] Build comprehensive event analytics\n\n## Migration Strategy\n\n### Step 1: Database Migration\n\n```sql\n-- Migration: Add events table and migrate existing data\nBEGIN TRANSACTION;\n\n-- Create events table\nCREATE TABLE events (...);\n\n-- Create default event for existing data\nINSERT INTO events (\n  slug, name, type, status, start_date, end_date, venue_name\n) VALUES (\n  'boulderfest-2026',\n  'A Lo Cubano Boulder Fest 2026',\n  'festival',\n  'upcoming',\n  '2026-05-15',\n  '2026-05-17',\n  'Avalon Ballroom'\n);\n\n-- Get the default event ID\nSELECT @default_event_id := id FROM events WHERE slug = 'boulderfest-2026';\n\n-- Add event_id columns\nALTER TABLE tickets ADD COLUMN event_id INTEGER;\nALTER TABLE transactions ADD COLUMN event_id INTEGER;\nALTER TABLE newsletter_subscribers ADD COLUMN event_id INTEGER;\n\n-- Populate event_id with default event\nUPDATE tickets SET event_id = @default_event_id;\nUPDATE transactions SET event_id = @default_event_id;\nUPDATE newsletter_subscribers SET event_id = @default_event_id;\n\n-- Add foreign key constraints\nALTER TABLE tickets ADD CONSTRAINT fk_tickets_event \n  FOREIGN KEY (event_id) REFERENCES events(id);\n  \nALTER TABLE transactions ADD CONSTRAINT fk_transactions_event \n  FOREIGN KEY (event_id) REFERENCES events(id);\n  \nALTER TABLE newsletter_subscribers ADD CONSTRAINT fk_newsletter_event \n  FOREIGN KEY (event_id) REFERENCES events(id);\n\n-- Create indexes\nCREATE INDEX idx_tickets_event ON tickets(event_id);\nCREATE INDEX idx_transactions_event ON transactions(event_id);\nCREATE INDEX idx_newsletter_event ON newsletter_subscribers(event_id);\n\nCOMMIT;\n```\n\n### Step 2: API Backward Compatibility\n\n```javascript\n// Middleware to ensure backward compatibility\nfunction ensureEventContext(req, res, next) {\n  // If no event_id provided, use default current event\n  if (!req.query.event_id && !req.headers['x-event-id']) {\n    // Get current active event or most recent\n    const defaultEvent = await getDefaultEvent();\n    req.query.event_id = defaultEvent.id;\n    req.eventContext = defaultEvent;\n  } else {\n    const eventId = req.query.event_id || req.headers['x-event-id'];\n    req.eventContext = await getEvent(eventId);\n  }\n  \n  next();\n}\n```\n\n### Step 3: Gradual UI Migration\n\n```javascript\n// Feature flag for multi-event UI\nconst ENABLE_MULTI_EVENT = process.env.ENABLE_MULTI_EVENT === 'true';\n\nif (ENABLE_MULTI_EVENT) {\n  // Show event selector\n  eventSelector.render('event-selector-container');\n} else {\n  // Hide selector, use default event\n  eventContextManager.selectDefaultEvent();\n}\n```\n\n## Non-Functional Requirements\n\n### Performance\n\n- Event switching: < 100ms\n- Dashboard load with event filter: < 500ms\n- Cross-event analytics: < 2s for 1 year of data\n- Event search: < 50ms for 100+ events\n\n### Scalability\n\n- Support 50+ events per year\n- Handle 10,000+ tickets per event\n- Manage 100+ concurrent admin users\n- Store 5+ years of historical data\n\n### Security\n\n- Event-level access control\n- Audit trail for all event operations\n- Data isolation between events\n- Role-based permissions per event\n\n### Usability\n\n- Single-click event switching\n- Persistent event selection\n- Clear visual event context\n- Keyboard navigation support\n\n## Risk Assessment\n\n| Risk | Impact | Probability | Mitigation |\n|------|--------|-------------|------------|\n| Data migration failure | High | Low | Comprehensive backup, rollback plan |\n| Performance degradation | Medium | Medium | Query optimization, caching strategy |\n| User confusion | Medium | Medium | Clear UI, training materials |\n| API breaking changes | High | Low | Backward compatibility layer |\n| Event data corruption | High | Low | Audit logs, validation rules |\n\n## Testing Strategy\n\n### Unit Tests\n\n```javascript\ndescribe('EventContextManager', () => {\n  test('initializes with default event', async () => {\n    const manager = new EventContextManager();\n    await manager.initialize();\n    expect(manager.getCurrentEvent()).toBeDefined();\n  });\n\n  test('persists event selection', async () => {\n    const manager = new EventContextManager();\n    await manager.selectEvent(123);\n    expect(localStorage.getItem('admin_current_event')).toBe('123');\n  });\n\n  test('injects event context into API calls', async () => {\n    const manager = new EventContextManager();\n    await manager.selectEvent(123);\n    \n    const mockFetch = jest.fn();\n    global.fetch = mockFetch;\n    \n    await fetch('/api/admin/dashboard');\n    \n    expect(mockFetch).toHaveBeenCalledWith(\n      expect.stringContaining('event_id=123'),\n      expect.objectContaining({\n        headers: expect.objectContaining({\n          'X-Event-ID': '123'\n        })\n      })\n    );\n  });\n});\n```\n\n### Integration Tests\n\n```javascript\ndescribe('Multi-Event API', () => {\n  test('filters data by event', async () => {\n    const event1 = await createEvent({ name: 'Event 1' });\n    const event2 = await createEvent({ name: 'Event 2' });\n    \n    await createTicket({ event_id: event1.id });\n    await createTicket({ event_id: event2.id });\n    \n    const response1 = await fetch(`/api/admin/dashboard?event_id=${event1.id}`);\n    const data1 = await response1.json();\n    \n    expect(data1.stats.total_tickets).toBe(1);\n  });\n\n  test('enforces event access control', async () => {\n    const restrictedEvent = await createEvent({ name: 'Restricted' });\n    \n    const response = await fetch(`/api/admin/dashboard?event_id=${restrictedEvent.id}`, {\n      headers: { 'Authorization': 'Bearer limited_user_token' }\n    });\n    \n    expect(response.status).toBe(403);\n  });\n});\n```\n\n### E2E Tests\n\n```javascript\ndescribe('Event Selector E2E', () => {\n  test('switches between events', async () => {\n    await page.goto('/admin/dashboard');\n    \n    // Open event selector\n    await page.click('.event-selector-trigger');\n    \n    // Select different event\n    await page.click('[data-event-id=\"2\"]');\n    \n    // Verify dashboard updates\n    await page.waitForSelector('.dashboard-title:has-text(\"Weekender Event\")');\n    \n    // Verify persistence on reload\n    await page.reload();\n    expect(await page.textContent('.event-name')).toBe('Weekender Event');\n  });\n});\n```\n\n## Success Metrics\n\n- **Event Isolation**: 100% data separation between events\n- **Performance**: No degradation vs single-event system\n- **Adoption**: 90% of admins using event selector within 1 month\n- **Accuracy**: Zero cross-event data leakage incidents\n- **Efficiency**: 50% reduction in time to manage multiple events\n\n## Appendix\n\n### Event Configuration Schema\n\n```json\n{\n  \"event_config\": {\n    \"ticket_types\": [\n      {\n        \"id\": \"full-pass\",\n        \"name\": \"Full Festival Pass\",\n        \"price_tiers\": [\n          { \"name\": \"early_bird\", \"price\": 75, \"end_date\": \"2026-03-01\" },\n          { \"name\": \"regular\", \"price\": 95, \"end_date\": \"2026-05-01\" },\n          { \"name\": \"door\", \"price\": 110 }\n        ]\n      }\n    ],\n    \"features\": {\n      \"workshops\": true,\n      \"performances\": true,\n      \"social_dancing\": true,\n      \"live_music\": false\n    },\n    \"capacity_limits\": {\n      \"total\": 500,\n      \"vip\": 50,\n      \"workshop\": 100\n    },\n    \"email_templates\": {\n      \"confirmation\": \"festival_confirmation_2026\",\n      \"reminder\": \"festival_reminder_2026\"\n    }\n  }\n}\n```\n\n### Event Status Transitions\n\n```mermaid\nstateDiagram-v2\n    [*] --> Draft\n    Draft --> Upcoming: Publish\n    Draft --> Cancelled: Cancel\n    Upcoming --> Active: Start Date Reached\n    Upcoming --> Cancelled: Cancel\n    Active --> Completed: End Date Passed\n    Active --> Cancelled: Emergency Cancel\n    Completed --> [*]\n    Cancelled --> [*]\n```\n\n### Database Query Examples\n\n```sql\n-- Get event statistics\nSELECT \n  e.id,\n  e.name,\n  e.type,\n  COUNT(DISTINCT t.id) as total_tickets,\n  COUNT(DISTINCT t.transaction_id) as total_orders,\n  SUM(t.price_cents) / 100.0 as total_revenue,\n  COUNT(CASE WHEN t.checked_in_at IS NOT NULL THEN 1 END) as checked_in\nFROM events e\nLEFT JOIN tickets t ON e.id = t.event_id\nWHERE e.id = ?\nGROUP BY e.id;\n\n-- Compare events\nSELECT \n  e.name,\n  e.type,\n  e.year,\n  COUNT(t.id) as tickets,\n  SUM(t.price_cents) / 100.0 as revenue\nFROM events e\nLEFT JOIN tickets t ON e.id = t.event_id\nWHERE e.id IN (?, ?, ?)\nGROUP BY e.id\nORDER BY e.start_date DESC;\n\n-- Event access check\nSELECT \n  ea.role,\n  ea.granted_at,\n  e.name,\n  e.status\nFROM event_access ea\nJOIN events e ON ea.event_id = e.id\nWHERE ea.user_email = ? AND e.id = ?;\n```\n\n## References\n\n- [Event Sourcing Pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing)\n- [Multi-tenancy Architecture](https://docs.aws.amazon.com/wellarchitect/latest/saas-lens/multi-tenant-architecture.html)\n- [Context Propagation in Microservices](https://www.nginx.com/blog/service-mesh-context-propagation/)",
  "architecture/MULTI_EVENT_IMPLEMENTATION_PLAN.md": "# Multi-Event Architecture Implementation Plan\n\n## Overview\n\nThis document provides the detailed implementation plan for transforming the A Lo Cubano Boulder Fest admin portal from single-event to multi-event architecture. This plan follows the design specified in `MULTI_EVENT_ARCHITECTURE.md`.\n\n## Implementation Phases\n\n### Phase 1: Database Foundation (Days 1-3)\n\n#### Day 1: Database Migration\n- [ ] Run migration `20_multi_event_support.sql`\n- [ ] Verify tables created successfully\n- [ ] Confirm default event populated\n- [ ] Test foreign key relationships\n\n```bash\n# Run migration\nnpm run migrate:up\n\n# Verify in database\nsqlite3 data/development.db\n.tables\nSELECT * FROM events;\nSELECT COUNT(*) FROM tickets WHERE event_id IS NOT NULL;\n```\n\n#### Day 2: API Foundation\n- [ ] Create `/api/events/index.js` endpoint\n- [ ] Create `/api/events/[eventId].js` endpoint\n- [ ] Add event validation middleware\n- [ ] Implement event access control\n\n#### Day 3: Testing Infrastructure\n- [ ] Write unit tests for event APIs\n- [ ] Create test fixtures for multiple events\n- [ ] Set up E2E test scenarios\n\n### Phase 2: Event Context Layer (Days 4-7)\n\n#### Day 4: Event Context Manager\n- [ ] Create `/js/admin/EventContextManager.js`\n- [ ] Implement event storage/retrieval\n- [ ] Add event switching logic\n- [ ] Create event cache system\n\n#### Day 5: API Integration\n- [ ] Update `/lib/event-middleware.js`\n- [ ] Add event context to all admin endpoints\n- [ ] Implement backward compatibility layer\n- [ ] Add event validation to APIs\n\n#### Day 6: Event Selector Component\n- [ ] Create `/js/admin/EventSelector.js`\n- [ ] Build UI component HTML/CSS\n- [ ] Implement search/filter functionality\n- [ ] Add keyboard navigation\n\n#### Day 7: Integration Testing\n- [ ] Test event switching\n- [ ] Verify data isolation\n- [ ] Check context persistence\n- [ ] Performance benchmarking\n\n### Phase 3: Admin Portal Updates (Days 8-12)\n\n#### Day 8: Dashboard Updates\n- [ ] Update `/pages/admin/dashboard.html`\n- [ ] Modify dashboard API for event filtering\n- [ ] Add event selector to UI\n- [ ] Update statistics queries\n\n#### Day 9: Analytics Updates\n- [ ] Update `/pages/admin/analytics.html`\n- [ ] Add event comparison views\n- [ ] Update chart data sources\n- [ ] Implement cross-event analytics\n\n#### Day 10: Check-in Scanner\n- [ ] Update `/pages/admin/checkin.html`\n- [ ] Add event selection to scanner\n- [ ] Update validation logic\n- [ ] Add event-specific QR codes\n\n#### Day 11: Registration Management\n- [ ] Update registration list views\n- [ ] Add event filtering to search\n- [ ] Update export functionality\n- [ ] Add bulk operations\n\n#### Day 12: End-to-End Testing\n- [ ] Complete workflow testing\n- [ ] Cross-browser testing\n- [ ] Performance validation\n- [ ] Security audit\n\n### Phase 4: Advanced Features (Days 13-15)\n\n#### Day 13: Event Management UI\n- [ ] Create event creation form\n- [ ] Add event editing interface\n- [ ] Implement event cloning\n- [ ] Add event archival\n\n#### Day 14: Reporting & Analytics\n- [ ] Cross-event comparison dashboard\n- [ ] Historical trend analysis\n- [ ] Revenue forecasting\n- [ ] Capacity planning tools\n\n#### Day 15: Documentation & Training\n- [ ] Update user documentation\n- [ ] Create admin training guide\n- [ ] Record demo videos\n- [ ] Prepare rollout plan\n\n## Technical Implementation Details\n\n### File Structure\n\n```\n/api/\n  /events/\n    index.js          # List/create events\n    [eventId].js      # Get/update/delete event\n    duplicate.js      # Clone event\n    settings.js       # Event settings management\n  /lib/\n    event-middleware.js   # Event context injection\n    event-validator.js    # Event validation rules\n    event-access.js       # Access control\n\n/js/admin/\n  EventContextManager.js  # Core event context\n  EventSelector.js        # UI component\n  EventComparison.js      # Comparison views\n  EventCreator.js         # Event creation form\n\n/css/admin/\n  event-selector.css      # Component styles\n  event-management.css    # Management UI styles\n\n/migrations/\n  20_multi_event_support.sql  # Database migration\n```\n\n### Code Examples\n\n#### Event Middleware Implementation\n\n```javascript\n// /lib/event-middleware.js\nexport async function withEventContext(handler) {\n  return async (req, res) => {\n    try {\n      // Extract event ID from multiple sources\n      const eventId = req.query.event_id || \n                     req.headers['x-event-id'] || \n                     req.body?.event_id;\n      \n      if (!eventId) {\n        // Get default event if none specified\n        const defaultEvent = await getDefaultEvent();\n        req.eventContext = defaultEvent;\n      } else {\n        // Validate and load event\n        const event = await validateAndLoadEvent(eventId, req.user);\n        req.eventContext = event;\n      }\n      \n      // Add event context to response headers\n      res.setHeader('X-Event-Name', req.eventContext.name);\n      res.setHeader('X-Event-Type', req.eventContext.type);\n      \n      // Call the actual handler\n      return handler(req, res);\n    } catch (error) {\n      if (error.code === 'EVENT_NOT_FOUND') {\n        return res.status(404).json({ error: 'Event not found' });\n      }\n      if (error.code === 'EVENT_ACCESS_DENIED') {\n        return res.status(403).json({ error: 'Access denied to this event' });\n      }\n      throw error;\n    }\n  };\n}\n\nasync function getDefaultEvent() {\n  const db = await getDatabaseClient();\n  const result = await db.execute(`\n    SELECT * FROM events \n    WHERE status IN ('active', 'upcoming')\n    ORDER BY \n      CASE status \n        WHEN 'active' THEN 1 \n        WHEN 'upcoming' THEN 2 \n      END,\n      start_date ASC\n    LIMIT 1\n  `);\n  \n  if (!result.rows[0]) {\n    throw new Error('No default event available');\n  }\n  \n  return result.rows[0];\n}\n\nasync function validateAndLoadEvent(eventId, user) {\n  const db = await getDatabaseClient();\n  \n  // Load event\n  const eventResult = await db.execute({\n    sql: 'SELECT * FROM events WHERE id = ?',\n    args: [eventId]\n  });\n  \n  if (!eventResult.rows[0]) {\n    const error = new Error('Event not found');\n    error.code = 'EVENT_NOT_FOUND';\n    throw error;\n  }\n  \n  const event = eventResult.rows[0];\n  \n  // Check access control\n  const accessResult = await db.execute({\n    sql: `\n      SELECT role FROM event_access \n      WHERE event_id = ? AND user_email = ?\n    `,\n    args: [eventId, user.email]\n  });\n  \n  // If no specific access and event is not public, deny\n  if (!accessResult.rows[0] && !event.is_visible) {\n    const error = new Error('Access denied');\n    error.code = 'EVENT_ACCESS_DENIED';\n    throw error;\n  }\n  \n  return event;\n}\n```\n\n#### Updated Dashboard API\n\n```javascript\n// /api/admin/dashboard.js\nimport { withEventContext } from '../lib/event-middleware.js';\n\nasync function handler(req, res) {\n  const db = await getDatabaseClient();\n  const eventId = req.eventContext.id;\n  \n  // Get event-specific statistics\n  const stats = await db.execute({\n    sql: `\n      SELECT \n        (SELECT COUNT(*) FROM tickets WHERE event_id = ? AND status = 'valid') as total_tickets,\n        (SELECT COUNT(*) FROM tickets WHERE event_id = ? AND checked_in_at IS NOT NULL) as checked_in,\n        (SELECT COUNT(DISTINCT transaction_id) FROM tickets WHERE event_id = ?) as total_orders,\n        (SELECT SUM(amount_cents) / 100.0 FROM transactions WHERE event_id = ? AND status = 'completed') as total_revenue,\n        (SELECT COUNT(*) FROM tickets WHERE event_id = ? AND ticket_type LIKE '%workshop%') as workshop_tickets,\n        (SELECT COUNT(*) FROM tickets WHERE event_id = ? AND ticket_type LIKE '%vip%') as vip_tickets,\n        (SELECT COUNT(*) FROM tickets WHERE event_id = ? AND date(created_at) = date('now')) as today_sales\n    `,\n    args: [eventId, eventId, eventId, eventId, eventId, eventId, eventId]\n  });\n  \n  // Get recent registrations for this event\n  const recentRegistrations = await db.execute({\n    sql: `\n      SELECT \n        t.ticket_id,\n        t.attendee_first_name || ' ' || t.attendee_last_name as attendee_name,\n        t.attendee_email,\n        t.ticket_type,\n        t.created_at,\n        tr.transaction_id\n      FROM tickets t\n      JOIN transactions tr ON t.transaction_id = tr.id\n      WHERE t.event_id = ?\n      ORDER BY t.created_at DESC\n      LIMIT 10\n    `,\n    args: [eventId]\n  });\n  \n  res.status(200).json({\n    event: {\n      id: req.eventContext.id,\n      name: req.eventContext.name,\n      type: req.eventContext.type,\n      status: req.eventContext.status\n    },\n    stats: stats.rows[0],\n    recentRegistrations: recentRegistrations.rows,\n    timestamp: new Date().toISOString()\n  });\n}\n\nexport default withSecurityHeaders(authService.requireAuth(withEventContext(handler)));\n```\n\n#### Event Selector Integration\n\n```javascript\n// /js/admin/dashboard.js\nimport EventSelector from './EventSelector.js';\nimport EventContextManager from './EventContextManager.js';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Initialize event context\n  const contextManager = EventContextManager;\n  await contextManager.initialize();\n  \n  // Render event selector\n  const selector = new EventSelector();\n  await selector.render('event-selector-container');\n  \n  // Listen for event changes\n  window.addEventListener('eventChanged', async (e) => {\n    console.log('Event changed to:', e.detail.event);\n    // Reload dashboard data\n    await loadDashboardData();\n  });\n  \n  // Initial load\n  await loadDashboardData();\n});\n\nasync function loadDashboardData() {\n  try {\n    // The event context is automatically included by EventContextManager\n    const response = await fetch('/api/admin/dashboard');\n    const data = await response.json();\n    \n    // Update UI with event-specific data\n    updateDashboardUI(data);\n  } catch (error) {\n    console.error('Failed to load dashboard:', error);\n  }\n}\n```\n\n## Testing Strategy\n\n### Unit Tests\n\n```javascript\n// tests/event-context.test.js\ndescribe('Event Context Management', () => {\n  test('loads default event when none specified', async () => {\n    const req = { query: {}, headers: {} };\n    const res = { setHeader: jest.fn() };\n    \n    await withEventContext(mockHandler)(req, res);\n    \n    expect(req.eventContext).toBeDefined();\n    expect(req.eventContext.status).toMatch(/active|upcoming/);\n  });\n  \n  test('validates event access', async () => {\n    const req = { \n      query: { event_id: 999 },\n      user: { email: 'unauthorized@test.com' }\n    };\n    const res = { \n      status: jest.fn().mockReturnThis(),\n      json: jest.fn()\n    };\n    \n    await withEventContext(mockHandler)(req, res);\n    \n    expect(res.status).toHaveBeenCalledWith(403);\n  });\n});\n```\n\n### Integration Tests\n\n```javascript\n// tests/multi-event-integration.test.js\ndescribe('Multi-Event Integration', () => {\n  test('data isolation between events', async () => {\n    // Create two events\n    const event1 = await createTestEvent({ name: 'Event 1' });\n    const event2 = await createTestEvent({ name: 'Event 2' });\n    \n    // Create tickets for each\n    await createTestTicket({ event_id: event1.id });\n    await createTestTicket({ event_id: event2.id });\n    \n    // Query event 1 dashboard\n    const response1 = await fetch(`/api/admin/dashboard?event_id=${event1.id}`);\n    const data1 = await response1.json();\n    \n    // Query event 2 dashboard\n    const response2 = await fetch(`/api/admin/dashboard?event_id=${event2.id}`);\n    const data2 = await response2.json();\n    \n    // Verify isolation\n    expect(data1.stats.total_tickets).toBe(1);\n    expect(data2.stats.total_tickets).toBe(1);\n  });\n});\n```\n\n### E2E Tests\n\n```javascript\n// tests/e2e/multi-event.test.js\ndescribe('Multi-Event E2E', () => {\n  test('admin can switch between events', async () => {\n    await page.goto('/admin/dashboard');\n    await page.waitForSelector('.event-selector');\n    \n    // Check current event\n    const currentEvent = await page.textContent('.event-name');\n    expect(currentEvent).toBeTruthy();\n    \n    // Open selector\n    await page.click('.event-selector-trigger');\n    await page.waitForSelector('.event-selector-menu');\n    \n    // Switch to different event\n    await page.click('[data-event-id=\"2\"]');\n    \n    // Verify switch\n    await page.waitForFunction(\n      text => document.querySelector('.event-name').textContent !== text,\n      currentEvent\n    );\n    \n    const newEvent = await page.textContent('.event-name');\n    expect(newEvent).not.toBe(currentEvent);\n    \n    // Verify persistence\n    await page.reload();\n    const persistedEvent = await page.textContent('.event-name');\n    expect(persistedEvent).toBe(newEvent);\n  });\n});\n```\n\n## Rollout Plan\n\n### Stage 1: Development Environment (Day 1-15)\n- Complete implementation\n- Internal testing\n- Bug fixes and optimization\n\n### Stage 2: Staging Deployment (Day 16-17)\n- Deploy to staging environment\n- Admin team testing\n- Feedback collection\n\n### Stage 3: Production Soft Launch (Day 18-19)\n- Deploy with feature flag disabled\n- Enable for select admin users\n- Monitor for issues\n\n### Stage 4: Full Production (Day 20)\n- Enable for all admin users\n- Monitor performance\n- Gather feedback\n\n## Rollback Plan\n\nIf issues arise, rollback strategy:\n\n1. **Disable Feature Flag**: Turn off multi-event UI\n2. **Revert API Changes**: Use backward compatibility mode\n3. **Database Rollback**: Events remain but unused\n4. **Full Revert**: If critical, restore from backup\n\n```bash\n# Disable multi-event feature in Vercel Dashboard\n# Settings → Environment Variables → ENABLE_MULTI_EVENT=false\n\n# Pull updated configuration\nvercel env pull\n\n# Use single-event mode\nnpm run migrate:down -- 20_multi_event_support\n```\n\n## Performance Considerations\n\n### Query Optimization\n\n```sql\n-- Add composite indexes for common queries\nCREATE INDEX idx_tickets_event_status ON tickets(event_id, status);\nCREATE INDEX idx_tickets_event_created ON tickets(event_id, created_at);\nCREATE INDEX idx_transactions_event_status ON transactions(event_id, status);\n\n-- Optimize event statistics view\nCREATE INDEX idx_tickets_event_type ON tickets(event_id, ticket_type);\nCREATE INDEX idx_tickets_event_checkin ON tickets(event_id, checked_in_at);\n```\n\n### Caching Strategy\n\n```javascript\n// Implement Redis caching for event data\nconst CACHE_TTL = 300; // 5 minutes\n\nasync function getCachedEventStats(eventId) {\n  const cacheKey = `event:${eventId}:stats`;\n  \n  // Try cache first\n  const cached = await redis.get(cacheKey);\n  if (cached) {\n    return JSON.parse(cached);\n  }\n  \n  // Load from database\n  const stats = await loadEventStats(eventId);\n  \n  // Cache for next time\n  await redis.setex(cacheKey, CACHE_TTL, JSON.stringify(stats));\n  \n  return stats;\n}\n```\n\n## Monitoring & Metrics\n\n### Key Metrics to Track\n\n- Event switch time (target: <100ms)\n- Dashboard load time per event (target: <500ms)\n- Cross-event query performance (target: <2s)\n- Cache hit ratio (target: >80%)\n- Error rate by event operation\n\n### Monitoring Implementation\n\n```javascript\n// Add performance tracking\nclass PerformanceMonitor {\n  trackEventSwitch(fromEvent, toEvent, duration) {\n    this.send('event.switch', {\n      from: fromEvent?.id,\n      to: toEvent.id,\n      duration,\n      timestamp: Date.now()\n    });\n  }\n  \n  trackAPICall(endpoint, eventId, duration) {\n    this.send('api.call', {\n      endpoint,\n      eventId,\n      duration,\n      timestamp: Date.now()\n    });\n  }\n}\n```\n\n## Security Considerations\n\n### Access Control Validation\n\n```javascript\n// Strict access control checks\nasync function validateEventAccess(userId, eventId, requiredRole = 'viewer') {\n  const access = await db.execute({\n    sql: `\n      SELECT role FROM event_access \n      WHERE user_email = ? AND event_id = ?\n    `,\n    args: [userId, eventId]\n  });\n  \n  if (!access.rows[0]) {\n    throw new ForbiddenError('No access to this event');\n  }\n  \n  const roleHierarchy = { viewer: 1, manager: 2, admin: 3 };\n  if (roleHierarchy[access.rows[0].role] < roleHierarchy[requiredRole]) {\n    throw new ForbiddenError('Insufficient permissions');\n  }\n  \n  return true;\n}\n```\n\n### Audit Logging\n\n```javascript\n// Comprehensive audit logging\nasync function logEventAction(action, details) {\n  await db.execute({\n    sql: `\n      INSERT INTO event_audit_log \n      (event_id, action, entity_type, entity_id, user_email, ip_address, details, created_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n    `,\n    args: [\n      details.eventId,\n      action,\n      details.entityType,\n      details.entityId,\n      details.userEmail,\n      details.ipAddress,\n      JSON.stringify(details.metadata)\n    ]\n  });\n}\n```\n\n## Success Criteria\n\n- [ ] All admin pages show event selector\n- [ ] Event switching completes in <100ms\n- [ ] Data correctly isolated per event\n- [ ] No performance degradation vs single-event\n- [ ] Zero data leakage between events\n- [ ] Audit trail captures all event operations\n- [ ] Admin team successfully trained\n- [ ] Documentation complete and accurate\n\n## Contact & Support\n\n- Technical Lead: System Architect\n- Project Manager: Admin Portal Team\n- Support Channel: #multi-event-support\n- Documentation: `/docs/architecture/`\n\n## Appendix\n\n### SQL Migration Rollback\n\n```sql\n-- Rollback script if needed\n-- Remove event foreign keys (careful - this is destructive)\nALTER TABLE tickets DROP COLUMN event_id;\nALTER TABLE transactions DROP COLUMN event_id;\nALTER TABLE newsletter_subscribers DROP COLUMN event_id;\n\n-- Drop event-related tables\nDROP TABLE IF EXISTS event_audit_log;\nDROP TABLE IF EXISTS event_access;\nDROP TABLE IF EXISTS event_settings;\nDROP TABLE IF EXISTS events;\n\n-- Drop views\nDROP VIEW IF EXISTS event_statistics;\nDROP VIEW IF EXISTS active_events;\n```\n\n### Environment Variables\n\n```bash\n# .env.local additions\nENABLE_MULTI_EVENT=true\nDEFAULT_EVENT_SLUG=boulderfest-2026\nEVENT_CACHE_TTL=300\nMAX_EVENTS_PER_PAGE=50\n```\n\n### Feature Flags\n\n```javascript\n// Feature flag configuration\nconst FEATURES = {\n  MULTI_EVENT: process.env.ENABLE_MULTI_EVENT === 'true',\n  EVENT_COMPARISON: process.env.ENABLE_EVENT_COMPARISON === 'true',\n  EVENT_CLONING: process.env.ENABLE_EVENT_CLONING === 'true',\n  CROSS_EVENT_ANALYTICS: process.env.ENABLE_CROSS_EVENT_ANALYTICS === 'true'\n};\n```",
  "architecture/TEST_ISOLATION_ARCHITECTURE.md": "# Test Isolation Architecture\n\n## Executive Summary\n\nThe Test Isolation Architecture is a comprehensive solution to the CLIENT_CLOSED errors that plagued integration tests in the A Lo Cubano Boulder Fest project. This architecture provides complete isolation between test runs by managing database singleton lifecycle, module cache clearing, and connection reference tracking.\n\n**Key Achievement**: Eliminated CLIENT_CLOSED errors through test-scoped database connections and aggressive cache management.\n\n**Performance Impact**: ~50-100ms overhead per test for 100% reliability improvement.\n\n## Architecture Overview\n\n### Problem Statement\n\n**Root Cause**: CLIENT_CLOSED errors in integration tests\n\nPrior to this architecture, integration tests suffered from:\n\n1. **Stale database connections**: Singleton pattern retained closed connections across test boundaries\n2. **Module cache pollution**: Node.js module cache persisted database instances between tests\n3. **Connection reference leaks**: Multiple tests sharing the same connection references\n4. **Race conditions**: Concurrent tests interfering with each other's database state\n5. **Enterprise feature conflicts**: Complex connection pooling and monitoring features causing additional failures\n\n**Error Pattern**:\n```text\nError: CLIENT_CLOSED: Database connection was closed unexpectedly\n  at DatabaseService.execute()\n  at integration test teardown\nStack trace shows stale singleton references\n```\n\n**Business Impact**:\n- 🔴 **30% test failure rate** due to connection issues\n- ⏱️ **Hours of debugging time** per developer per week\n- 🚫 **Blocked CI/CD pipelines** causing deployment delays\n- 😤 **Developer frustration** and reduced productivity\n\n### Solution Approach\n\nThe Test Isolation Architecture implements a multi-layered isolation strategy:\n\n```text\n┌─────────────────────────────────────────────────────────────────┐\n│                    Test Isolation Manager                       │\n├─────────────────────────────────────────────────────────────────┤\n│  1. Test Scope Management    │  2. Module Cache Control         │\n│  3. Connection Tracking      │  4. Singleton Lifecycle          │\n│  5. Performance Monitoring   │  6. Emergency Cleanup            │\n└─────────────────────────────────────────────────────────────────┘\n                                │\n                                ▼\n┌─────────────────────────────────────────────────────────────────┐\n│                    Fresh Database Connections                   │\n├─────────────────────────────────────────────────────────────────┤\n│  • Each test gets isolated connections                          │\n│  • No shared state between tests                               │\n│  • Aggressive cleanup after each test                          │\n│  • Module cache clearing for fresh imports                     │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n### Benefits and Trade-offs\n\n**Benefits**:\n- ✅ **Zero CLIENT_CLOSED errors**: Complete connection isolation\n- ✅ **Deterministic test behavior**: Each test starts with clean state\n- ✅ **Parallel test safety**: No shared connection state\n- ✅ **Easier debugging**: Clear test boundaries and resource tracking\n- ✅ **Production-like testing**: Real database connections without interference\n- ✅ **Automatic cleanup**: No manual resource management required\n- ✅ **Performance monitoring**: Built-in metrics and statistics\n\n**Trade-offs**:\n- ⚠️ **Moderate overhead**: ~50-100ms per test for fresh connections\n- ⚠️ **Higher memory usage**: Each test gets its own database instance\n- ⚠️ **Complex lifecycle management**: Requires careful scope tracking\n- ⚠️ **Platform dependencies**: Relies on Node.js module system internals\n\n**ROI Analysis**:\n- **Before**: 30% failure rate + 4 hours debugging/week = **High cost**\n- **After**: 0% failure rate + 50ms overhead = **Significant savings**\n\n## Technical Design\n\n### System Architecture\n\n```text\n┌─────────────────────────────────────────────────────────────────────────────┐\n│                            Integration Test Suite                            │\n└─────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      │ Test Lifecycle Events\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────┐\n│                          Test Isolation Manager                             │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐             │\n│  │   Test Scope    │  │  Module Cache   │  │   Connection    │             │\n│  │   Management    │  │    Control      │  │    Tracking     │             │\n│  │                 │  │                 │  │                 │             │\n│  │ • createScope() │  │ • clearCache()  │  │ • trackConn()   │             │\n│  │ • destroyScope()│  │ • freshImport() │  │ • closeConn()   │             │\n│  │ • trackMetrics()│  │ • cacheSnapshot()│  │ • emergency()   │             │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘             │\n└─────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      │ Scoped Database Access\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────┐\n│                            Database Service Layer                           │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐             │\n│  │   Connection    │  │    Singleton    │  │    LibSQL       │             │\n│  │    Manager      │  │     Reset       │  │     Client      │             │\n│  │                 │  │                 │  │                 │             │\n│  │ • getClient()   │  │ • resetInst()   │  │ • execute()     │             │\n│  │ • initialize()  │  │ • clearState()  │  │ • transaction() │             │\n│  │ • healthCheck() │  │ • trackStats()  │  │ • batch()       │             │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘             │\n└─────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      │ Database Operations\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────┐\n│                              SQLite Database                                │\n├─────────────────────────────────────────────────────────────────────────────┤\n│  file:./data/test-integration.db                                           │\n│  • WAL mode for concurrency                                                │\n│  • Foreign key enforcement                                                 │\n│  • Optimized pragmas                                                       │\n│  • Test-specific isolation                                                 │\n└─────────────────────────────────────────────────────────────────────────────┘\n```\n\n### Component Responsibilities and Interactions\n\n#### 1. Test Isolation Manager (`lib/test-isolation-manager.js`)\n\n**Primary Responsibilities**:\n- **Test Scope Management**: Creates isolated scopes with unique identifiers\n- **Module Cache Control**: Clears Node.js module cache for fresh imports\n- **Connection Tracking**: Monitors all database connections per scope\n- **Performance Monitoring**: Tracks metrics for optimization\n- **Emergency Cleanup**: Handles unexpected failure scenarios\n\n**Key Architecture Decisions**:\n- **Singleton Pattern**: Single manager instance for global coordination\n- **Map-Based Tracking**: Efficient scope and connection management\n- **Timeout Protection**: Prevents hanging during cleanup operations\n- **Performance Metrics**: Built-in monitoring for optimization\n\n**Enhanced Features (Latest Implementation)**:\n```javascript\nclass TestIsolationManager {\n  constructor() {\n    // Enhanced tracking with metadata\n    this.activeScopes = new Map();           // Scope registry\n    this.globalConnectionRegistry = new Set(); // Global connection tracking\n    this.performanceMetrics = {              // Performance monitoring\n      scopesCreated: 0,\n      scopesDestroyed: 0,\n      connectionsCreated: 0,\n      connectionsClosed: 0,\n      averageCleanupTime: 0,\n      emergencyCleanups: 0\n    };\n  }\n}\n```\n\n**Key Methods**:\n```javascript\n// Modern API\nasync createScope(testName, options)      // Create isolated scope\nasync destroyScope(scopeId)               // Clean up specific scope\nasync getScopedDatabaseClient(scopeId)    // Get isolated client\n\n// Legacy compatibility\nasync ensureTestIsolation(testName)       // Main entry point for test setup\nasync completeTest()                      // Main entry point for test teardown\nasync getScopedDatabaseClient()           // Get isolated database client (legacy)\n```\n\n#### 2. Enhanced Database Service (`lib/database.js`)\n\n**Isolation Enhancements**:\n- **Connection tracking**: Maintains `activeConnections` set with metadata\n- **Singleton reset**: Enhanced `resetForTesting()` for complete state clearing\n- **Graceful shutdown**: Improved `close()` method with timeout protection\n- **State validation**: Prevents operations during shutdown transitions\n- **Performance monitoring**: Connection statistics and health metrics\n\n**Integration Points**:\n```javascript\n// Isolation-aware methods\nasync resetForTesting()               // Reset singleton for tests\ngetConnectionStats()                  // Provide detailed isolation metrics\nasync close(timeout)                  // Graceful connection cleanup\nasync healthCheck()                   // Verify connection health\n```\n\n**Enhanced Connection Management**:\n```javascript\n// Connection tracking with metadata\nthis.activeConnections = new Set();\nthis.connectionId = 0;\nthis.isClosing = false;\n\n// Timeout protection for operations\nasync ensureInitialized() {\n  if (this.isClosing) {\n    throw new Error(\"Database service is shutting down\");\n  }\n  // ... initialization logic\n}\n```\n\n#### 3. Integration Test Setup (`tests/setup-integration.js`)\n\n**Isolation Integration**:\n- **Test mode initialization**: Configures isolation manager for test environment\n- **Environment safety**: Disables enterprise features that cause connection issues\n- **Scoped database access**: Provides `getDbClient()` that uses isolation\n- **Lifecycle hooks**: Integrates isolation into Vitest lifecycle\n- **Secret management**: Handles test credentials with fallbacks\n\n**Critical Safety Measures**:\n```javascript\n// Disable problematic enterprise features\nprocess.env.FEATURE_ENABLE_CONNECTION_POOL = 'false';\nprocess.env.FEATURE_ENABLE_ENTERPRISE_MONITORING = 'false';\nprocess.env.FEATURE_ENABLE_CIRCUIT_BREAKER = 'false';\nprocess.env.SKIP_ENTERPRISE_INIT = 'true';\n\n// Force local SQLite for integration tests\nprocess.env.DATABASE_URL = 'file:./data/test-integration.db';\ndelete process.env.TURSO_AUTH_TOKEN;\ndelete process.env.TURSO_DATABASE_URL;\n```\n\n### Data Flow Between Components\n\n#### Test Setup Flow\n\n```text\n1. beforeAll()\n   ├── initializeTestMode()           # Enable test isolation\n   │   ├── set isTestMode = true      # Configure manager for testing\n   │   └── emergencyCleanup()         # Clear any existing state\n   ├── createScope('migration-init')  # Create migration scope\n   ├── getScopedDatabaseClient()      # Get fresh client for migrations\n   │   ├── clearModuleCache()         # Clear Node.js module cache\n   │   ├── import('./database.js?t=timestamp') # Fresh module import\n   │   ├── resetDatabaseInstance()    # Reset singleton state\n   │   ├── getDatabaseClient()        # Get new client\n   │   └── trackConnection()          # Add to scope tracking\n   ├── runMigrations()                # Setup database schema\n   └── destroyScope('migration-init') # Clean up migration scope\n```\n\n#### Test Execution Flow\n\n```text\n2. beforeEach(testContext)\n   ├── ensureTestIsolation(testName)  # Create fresh scope for test\n   │   ├── clearModuleCache()         # Clear Node.js module cache\n   │   ├── createScope(testName)      # Create test-specific scope\n   │   │   ├── generateUniqueId()     # Create UUID-based scope ID\n   │   │   ├── captureModuleSnapshot() # Snapshot current cache state\n   │   │   └── initializeScopeTracking() # Setup connection tracking\n   │   └── forceGarbageCollection()   # Free memory if available\n   ├── getScopedDatabaseClient()      # Get isolated client\n   │   ├── clearModuleCache()         # Clear cache again\n   │   ├── freshModuleImport()        # Import with cache busting\n   │   ├── resetDatabaseInstance()    # Reset singleton\n   │   ├── createFreshClient()        # Get new client\n   │   └── addToScopeTracking()       # Track in current scope\n   └── cleanDatabase()                # Clear test data\n\n3. Test Execution\n   ├── getDbClient()                  # Tests call this for DB access\n   │   └── getScopedDatabaseClient()  # Always returns isolated client\n   ├── execute database operations    # All operations use scoped client\n   └── perform test assertions        # Verify behavior\n```\n\n#### Test Teardown Flow\n\n```text\n4. afterEach()\n   ├── completeTest()                 # Clean up current test scope\n   │   ├── getCurrentScope()          # Get active scope\n   │   ├── destroyScope(scopeId)      # Clean up scope resources\n   │   │   ├── closeConnections()     # Close all scope connections\n   │   │   │   ├── timeoutProtection() # Prevent hanging closes\n   │   │   │   ├── removeFromRegistry() # Remove from global tracking\n   │   │   │   └── updateMetrics()    # Update performance stats\n   │   │   ├── clearModuleCache()     # Clear module cache\n   │   │   └── removeScopeTracking()  # Remove scope from registry\n   │   ├── resetDatabaseInstance()    # Reset singleton state\n   │   └── updatePerformanceMetrics() # Track cleanup performance\n   └── logCompletion()                # Log test completion\n\n5. afterAll()\n   ├── emergencyCleanup()             # Clean up any remaining scopes\n   │   ├── destroyAllScopes()         # Force cleanup all scopes\n   │   ├── closeAllConnections()      # Close any remaining connections\n   │   └── clearAllCaches()           # Clear all module caches\n   ├── cleanupTestFiles()             # Remove test database files\n   │   ├── deleteMainDb()             # Remove test-integration.db\n   │   ├── deleteWalFile()            # Remove WAL files\n   │   └── deleteShmFile()            # Remove SHM files\n   └── cleanupEnvironment()           # Final environment cleanup\n```\n\n### Connection Lifecycle Management\n\n#### Scope Creation Process\n\n```javascript\n// Enhanced scope creation with comprehensive tracking\nasync createScope(testName, options = {}) {\n  const startTime = Date.now();\n  const scopeId = `test_${Date.now()}_${randomUUID().substring(0, 8)}`;\n\n  // Clear module cache before creating scope\n  await this.clearModuleCache();\n\n  // Create enhanced scope metadata\n  const scope = {\n    id: scopeId,\n    testName,\n    createdAt: new Date().toISOString(),\n    connections: new Set(),               // Track all connections\n    moduleSnapshots: new Map(),           // Track module state\n    options: {\n      isolateModules: true,               // Enable module isolation\n      trackConnections: true,             // Enable connection tracking\n      autoCleanup: true,                  // Enable automatic cleanup\n      connectionTimeout: 5000,            // Connection close timeout\n      ...options                          // Override with custom options\n    }\n  };\n\n  // Capture current module cache state\n  if (scope.options.isolateModules) {\n    scope.moduleSnapshots = this.captureModuleSnapshot();\n  }\n\n  // Register scope and update metrics\n  this.activeScopes.set(scopeId, scope);\n  this.performanceMetrics.scopesCreated++;\n\n  return scopeId;\n}\n```\n\n#### Enhanced Connection Tracking\n\n```javascript\n// Enhanced connection tracking with metadata\nasync getScopedDatabaseClient(scopeId) {\n  const scope = this.activeScopes.get(scopeId);\n  if (!scope) {\n    throw new Error(`Test scope ${scopeId} not found`);\n  }\n\n  // Clear module cache to ensure fresh database instance\n  await this.clearModuleCache();\n\n  // Import fresh database module with cache busting\n  const databaseModule = await import('./database.js?' + Date.now());\n\n  // Get fresh client from the new module instance\n  const client = await databaseModule.getDatabaseClient();\n\n  // Enhanced client validation\n  if (!client || typeof client.execute !== 'function') {\n    throw new Error('Invalid database client returned from fresh import');\n  }\n\n  // Track connection with enhanced metadata\n  scope.connections.add(client);\n  this.globalConnectionRegistry.add(client);\n  this.performanceMetrics.connectionsCreated++;\n\n  logger.debug(`🔗 Created scoped database client for scope ${scopeId}`);\n  return client;\n}\n```\n\n#### Comprehensive Scope Destruction\n\n```javascript\n// Enhanced scope destruction with comprehensive cleanup\nasync destroyScope(scopeId) {\n  const startTime = Date.now();\n  const scope = this.activeScopes.get(scopeId);\n\n  if (!scope) {\n    logger.warn(`⚠️  Scope ${scopeId} not found for destruction`);\n    return false;\n  }\n\n  logger.debug(`🧹 Destroying test scope: ${scopeId} (test: ${scope.testName})`);\n\n  let cleanupSuccess = true;\n\n  try {\n    // 1. Close all database connections with timeout protection\n    const connectionCleanup = await this.closeConnections(scope);\n    if (!connectionCleanup) {\n      cleanupSuccess = false;\n      logger.warn(`⚠️  Some connections failed to close in scope ${scopeId}`);\n    }\n\n    // 2. Clear module cache to force fresh instances\n    if (scope.options.isolateModules) {\n      await this.clearModuleCache();\n    }\n\n    // 3. Remove scope from registry\n    this.activeScopes.delete(scopeId);\n\n    // 4. Update performance metrics\n    this.performanceMetrics.scopesDestroyed++;\n    const duration = Date.now() - startTime;\n    this.updateAverageCleanupTime(duration);\n\n    logger.debug(`✅ Test scope destroyed: ${scopeId} (${duration}ms)`);\n    return cleanupSuccess;\n  } catch (error) {\n    logger.error(`❌ Error destroying scope ${scopeId}:`, error.message);\n\n    // Force cleanup even if there were errors\n    this.activeScopes.delete(scopeId);\n    this.performanceMetrics.emergencyCleanups++;\n\n    return false;\n  }\n}\n```\n\n## Implementation Details\n\n### Module Cache Clearing Strategy\n\n**Challenge**: Node.js caches imported modules globally, causing singleton instances to persist across test boundaries.\n\n**Enhanced Solution**: Multi-layered cache clearing with pattern matching:\n\n```javascript\n// Modern cache clearing with pattern detection\nasync clearModuleCache() {\n  try {\n    const moduleKeysToDelete = [];\n\n    // Find all database-related modules in the cache\n    for (const key of Object.keys(require.cache || {})) {\n      if (this.isDatabaseModule(key)) {\n        moduleKeysToDelete.push(key);\n      }\n    }\n\n    // Delete modules from cache\n    for (const key of moduleKeysToDelete) {\n      delete require.cache[key];\n      this.performanceMetrics.modulesCleared++;\n    }\n\n    logger.debug(`🧽 Cleared ${moduleKeysToDelete.length} database modules from cache`);\n  } catch (error) {\n    logger.warn('⚠️  Error clearing module cache:', error.message);\n    // Non-fatal error, continue execution\n  }\n}\n\n// Enhanced module pattern detection\nisDatabaseModule(modulePath) {\n  const dbModulePatterns = [\n    /\\/lib\\/database\\.js$/,\n    /\\/lib\\/logger\\.js$/,\n    /\\/lib\\/connection-manager\\.js$/,\n    /\\/lib\\/enterprise-database-integration\\.js$/,\n    /\\/scripts\\/migrate\\.js$/,\n    /@libsql\\/client/,\n    /database/i\n  ];\n\n  return dbModulePatterns.some(pattern => pattern.test(modulePath));\n}\n```\n\n**Fresh Import Strategy**:\n```javascript\n// Enhanced fresh import with comprehensive cache busting\nasync getScopedDatabaseClient(scopeId) {\n  // Clear module cache first\n  await this.clearModuleCache();\n\n  // Import fresh database module with timestamp cache busting\n  const databaseModule = await import('./database.js?' + Date.now());\n\n  // Verify we got a fresh module instance\n  const client = await databaseModule.getDatabaseClient();\n\n  // Enhanced validation\n  if (!client || typeof client.execute !== 'function') {\n    throw new Error('Invalid database client returned from fresh import');\n  }\n\n  return client;\n}\n```\n\n### Advanced Connection Management\n\n**Enhanced Connection Tracking**:\n```javascript\n// Track connections with comprehensive metadata\nconst connection = await databaseModule.getDatabaseClient();\n\n// Add to scope tracking with enhanced metadata\nscope.connections.add(connection);\nthis.globalConnectionRegistry.add(connection);\n\n// Update performance metrics\nthis.performanceMetrics.connectionsCreated++;\n\n// Enhanced connection validation\nif (!connection.execute) {\n  throw new Error('Invalid database client - missing execute method');\n}\n```\n\n**Graceful Cleanup with Timeout Protection**:\n```javascript\n// Enhanced connection cleanup with timeout protection\nasync closeConnections(scope) {\n  if (!scope.connections.size) {\n    return true;\n  }\n\n  logger.debug(`🔌 Closing ${scope.connections.size} connections for scope ${scope.id}`);\n\n  const closePromises = Array.from(scope.connections).map(async (connection) => {\n    try {\n      if (connection && typeof connection.close === 'function') {\n        // Close with timeout protection\n        await Promise.race([\n          connection.close(),\n          new Promise((_, reject) =>\n            setTimeout(() => reject(new Error('Connection close timeout')),\n                      scope.options.connectionTimeout)\n          )\n        ]);\n\n        // Remove from global registry\n        this.globalConnectionRegistry.delete(connection);\n        this.performanceMetrics.connectionsClosed++;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      logger.warn(`⚠️  Error closing connection in scope ${scope.id}:`, error.message);\n      return false;\n    }\n  });\n\n  // Wait for all connections to close\n  const results = await Promise.allSettled(closePromises);\n  scope.connections.clear();\n\n  const successCount = results.filter(r => r.status === 'fulfilled' && r.value).length;\n  const totalCount = results.length;\n\n  logger.debug(`🔌 Closed ${successCount}/${totalCount} connections for scope ${scope.id}`);\n  return successCount === totalCount;\n}\n```\n\n### Error Handling and Recovery\n\n**Comprehensive Error Recovery**:\n```javascript\n// Enhanced error handling with recovery strategies\nasync destroyScope(scopeId) {\n  try {\n    // Normal cleanup process\n    return await this.normalCleanup(scopeId);\n  } catch (error) {\n    logger.error(`❌ Normal cleanup failed for scope ${scopeId}:`, error.message);\n\n    // Emergency cleanup strategy\n    return await this.emergencyCleanup(scopeId);\n  }\n}\n\nasync emergencyCleanup(scopeId = null) {\n  logger.warn('🚨 Performing emergency cleanup');\n\n  try {\n    if (scopeId) {\n      // Clean up specific scope\n      const scope = this.activeScopes.get(scopeId);\n      if (scope) {\n        // Force close all connections without timeout\n        for (const connection of scope.connections) {\n          try {\n            if (connection && connection.close) {\n              connection.close();\n            }\n          } catch (error) {\n            // Ignore errors during emergency cleanup\n          }\n        }\n        this.activeScopes.delete(scopeId);\n      }\n    } else {\n      // Clean up everything\n      for (const [scopeId, scope] of this.activeScopes) {\n        for (const connection of scope.connections) {\n          try {\n            if (connection && connection.close) {\n              connection.close();\n            }\n          } catch (error) {\n            // Ignore errors during emergency cleanup\n          }\n        }\n      }\n      this.activeScopes.clear();\n    }\n\n    // Force clear all caches\n    await this.clearModuleCache();\n\n    // Update metrics\n    this.performanceMetrics.emergencyCleanups++;\n\n    logger.warn('🚨 Emergency cleanup completed');\n    return true;\n  } catch (error) {\n    logger.error('❌ Emergency cleanup failed:', error.message);\n    return false;\n  }\n}\n```\n\n**Connection Close Failures**:\n```javascript\n// Graceful handling of connection close failures\ntry {\n  await Promise.race([\n    connection.close(),\n    new Promise((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), 5000)\n    )\n  ]);\n  closedCount++;\n} catch (error) {\n  logger.error(`Error closing connection: ${error.message}`);\n  errorCount++;\n  // Continue with other connections - don't let one failure stop cleanup\n}\n```\n\n**Test Scope Recovery**:\n```javascript\n// Test scope recovery strategies\nfinally {\n  // Force reset state even if cleanup failed\n  this.activeScopes.delete(scopeId);\n  this.globalConnectionRegistry.clear();\n\n  // Ensure clean state for next test\n  if (scopeId === this.currentTestId) {\n    this.currentTestId = null;\n  }\n\n  // Clear module cache regardless of cleanup success\n  await this.clearModuleCache();\n}\n```\n\n## Usage Guidelines\n\n### For Integration Test Authors\n\n#### Basic Test Structure\n\n```javascript\nimport { describe, it, expect } from 'vitest';\nimport { getDbClient } from '../setup-integration.js';\n\ndescribe('Feature Integration Tests', () => {\n  it('should handle database operations with complete isolation', async () => {\n    // Get isolated database client - each call gets a fresh connection\n    const db = await getDbClient();\n\n    // Perform database operations - no interference with other tests\n    await db.execute('INSERT INTO users (name, email) VALUES (?, ?)',\n                     ['John Doe', 'john@example.com']);\n\n    const result = await db.execute('SELECT * FROM users WHERE email = ?',\n                                   ['john@example.com']);\n\n    // Assertions\n    expect(result.rows).toHaveLength(1);\n    expect(result.rows[0].name).toBe('John Doe');\n    expect(result.rows[0].email).toBe('john@example.com');\n\n    // No cleanup needed - handled automatically by isolation manager\n    // Each test gets completely fresh state\n  });\n\n  it('should not see data from previous test', async () => {\n    const db = await getDbClient();\n\n    // This test gets a completely fresh database state\n    const users = await db.execute('SELECT * FROM users');\n\n    // Should be empty - no data from previous test\n    expect(users.rows).toHaveLength(0);\n  });\n});\n```\n\n#### Advanced Usage Patterns\n\n**Complex Transaction Testing**:\n```javascript\nit('should handle complex transactions with isolation', async () => {\n  const db = await getDbClient();\n\n  // Start transaction - completely isolated from other tests\n  const transaction = await db.transaction();\n\n  try {\n    // Complex multi-table operations\n    await transaction.execute(\n      'INSERT INTO users (name, email) VALUES (?, ?)',\n      ['Alice Smith', 'alice@example.com']\n    );\n\n    const userResult = await transaction.execute(\n      'SELECT id FROM users WHERE email = ?',\n      ['alice@example.com']\n    );\n    const userId = userResult.rows[0].id;\n\n    await transaction.execute(\n      'INSERT INTO orders (user_id, amount, status) VALUES (?, ?, ?)',\n      [userId, 99.99, 'pending']\n    );\n\n    await transaction.execute(\n      'INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)',\n      [1, 'prod-123', 2]\n    );\n\n    // Commit transaction\n    await transaction.commit();\n\n    // Verify transaction results\n    const orders = await db.execute(\n      'SELECT o.*, u.name FROM orders o JOIN users u ON o.user_id = u.id'\n    );\n    expect(orders.rows).toHaveLength(1);\n    expect(orders.rows[0].name).toBe('Alice Smith');\n    expect(orders.rows[0].amount).toBe(99.99);\n\n  } catch (error) {\n    await transaction.rollback();\n    throw error;\n  }\n\n  // All state is automatically cleaned up after test\n});\n```\n\n**API Integration Testing with Database**:\n```javascript\nit('should test API endpoints with database integration', async () => {\n  const db = await getDbClient();\n\n  // Setup test data in isolated database\n  await db.execute(\n    'INSERT INTO products (id, name, price, stock) VALUES (?, ?, ?, ?)',\n    ['prod-123', 'Test Product', 29.99, 100]\n  );\n\n  // Test API endpoint (assuming API uses same database)\n  const response = await fetch(`${process.env.TEST_BASE_URL}/api/products/prod-123`);\n  expect(response.ok).toBe(true);\n\n  const product = await response.json();\n  expect(product.name).toBe('Test Product');\n  expect(product.price).toBe(29.99);\n\n  // Test purchase endpoint\n  const purchaseResponse = await fetch(\n    `${process.env.TEST_BASE_URL}/api/products/prod-123/purchase`,\n    {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ quantity: 5 })\n    }\n  );\n\n  expect(purchaseResponse.ok).toBe(true);\n\n  // Verify database state after API call\n  const updatedProduct = await db.execute(\n    'SELECT stock FROM products WHERE id = ?',\n    ['prod-123']\n  );\n  expect(updatedProduct.rows[0].stock).toBe(95); // 100 - 5\n\n  // Database state is automatically cleaned up - next test gets fresh state\n});\n```\n\n**Performance Testing with Isolation**:\n```javascript\nit('should handle concurrent operations without interference', async () => {\n  const db = await getDbClient();\n\n  // Simulate concurrent operations within a single test\n  const operations = Array.from({length: 10}, (_, i) =>\n    db.execute('INSERT INTO logs (message, timestamp) VALUES (?, ?)',\n               [`Message ${i}`, new Date().toISOString()])\n  );\n\n  // Execute all operations concurrently\n  await Promise.all(operations);\n\n  // Verify all operations completed\n  const logs = await db.execute('SELECT COUNT(*) as count FROM logs');\n  expect(logs.rows[0].count).toBe(10);\n\n  // Each test runs in complete isolation - no interference with other tests\n});\n```\n\n### Migration Guide for Existing Tests\n\n#### Before (Problematic Pattern)\n\n```javascript\n// ❌ Old pattern - shared database instance with CLIENT_CLOSED errors\nimport { getDatabaseClient } from '../lib/database.js';\n\ndescribe('Old Test Pattern - PROBLEMATIC', () => {\n  let sharedDb;\n\n  beforeAll(async () => {\n    // Shared instance across all tests - CAUSES CLIENT_CLOSED\n    sharedDb = await getDatabaseClient();\n  });\n\n  beforeEach(async () => {\n    // Manual cleanup - error prone and incomplete\n    try {\n      await sharedDb.execute('DELETE FROM users');\n      await sharedDb.execute('DELETE FROM orders');\n      // Missing other tables, doesn't handle foreign keys properly\n    } catch (error) {\n      // If cleanup fails, tests become unreliable\n      console.warn('Cleanup failed:', error.message);\n    }\n  });\n\n  afterAll(async () => {\n    // Manual connection management - often forgotten or fails\n    try {\n      if (sharedDb && sharedDb.close) {\n        await sharedDb.close();\n      }\n    } catch (error) {\n      // Connection already closed or other issues\n    }\n  });\n\n  it('test 1 - vulnerable to CLIENT_CLOSED', async () => {\n    // Using shared client - can fail if previous test closed connection\n    await sharedDb.execute('INSERT INTO users (name) VALUES (?)', ['User1']);\n\n    const result = await sharedDb.execute('SELECT * FROM users');\n    expect(result.rows).toHaveLength(1);\n  });\n\n  it('test 2 - can interfere with test 1', async () => {\n    // Same shared client - state contamination possible\n    await sharedDb.execute('INSERT INTO users (name) VALUES (?)', ['User2']);\n\n    // Might see data from previous test if cleanup failed\n    const result = await sharedDb.execute('SELECT * FROM users');\n    expect(result.rows).toHaveLength(1); // Could fail if cleanup incomplete\n  });\n\n  it('test 3 - fails if connection closed', async () => {\n    // If any previous test closed the connection, this fails with CLIENT_CLOSED\n    await sharedDb.execute('SELECT 1'); // CLIENT_CLOSED error\n  });\n});\n```\n\n#### After (Isolated Pattern)\n\n```javascript\n// ✅ New pattern - complete isolation with zero CLIENT_CLOSED errors\nimport { getDbClient } from '../setup-integration.js';\n\ndescribe('New Test Pattern - RELIABLE', () => {\n  // No shared database instance - each test gets fresh connection\n\n  it('test 1 - completely isolated', async () => {\n    // Fresh isolated client - guaranteed to work\n    const db = await getDbClient();\n\n    await db.execute('INSERT INTO users (name) VALUES (?)', ['User1']);\n\n    const result = await db.execute('SELECT * FROM users');\n    expect(result.rows).toHaveLength(1);\n    expect(result.rows[0].name).toBe('User1');\n\n    // No manual cleanup needed - automatic and comprehensive\n  });\n\n  it('test 2 - independent of test 1', async () => {\n    // Different isolated client - completely fresh state\n    const db = await getDbClient();\n\n    await db.execute('INSERT INTO users (name) VALUES (?)', ['User2']);\n\n    // Always exactly one user - no contamination from previous tests\n    const result = await db.execute('SELECT * FROM users');\n    expect(result.rows).toHaveLength(1);\n    expect(result.rows[0].name).toBe('User2');\n  });\n\n  it('test 3 - never fails with CLIENT_CLOSED', async () => {\n    // Fresh isolated client - guaranteed fresh connection\n    const db = await getDbClient();\n\n    // This always works - no connection reuse issues\n    const result = await db.execute('SELECT 1 as test');\n    expect(result.rows[0].test).toBe(1);\n  });\n\n  it('test 4 - can run in parallel safely', async () => {\n    // Even if tests run in parallel, each has isolated state\n    const db = await getDbClient();\n\n    await db.execute('INSERT INTO users (name) VALUES (?)', ['ParallelUser']);\n\n    // No interference with other parallel tests\n    const result = await db.execute('SELECT * FROM users');\n    expect(result.rows).toHaveLength(1);\n  });\n\n  // No afterAll needed - automatic cleanup handles everything\n});\n```\n\n#### Migration Checklist\n\n**Step 1: Remove Shared Database Instances**\n- ❌ Remove `beforeAll` database initialization\n- ❌ Remove manual connection management\n- ❌ Remove shared database variables\n\n**Step 2: Update Database Access**\n- ✅ Replace `await getDatabaseClient()` with `await getDbClient()`\n- ✅ Remove database caching in test variables\n- ✅ Use `getDbClient()` in each test method\n\n**Step 3: Remove Manual Cleanup**\n- ❌ Remove `beforeEach` cleanup logic\n- ❌ Remove `afterAll` connection closing\n- ❌ Remove manual table clearing\n\n**Step 4: Verify Isolation**\n- ✅ Ensure tests can run in any order\n- ✅ Verify tests pass when run individually\n- ✅ Confirm no data contamination between tests\n\n### Best Practices for Test Authors\n\n#### Do's ✅\n\n1. **Always use `getDbClient()`** for database access in integration tests\n   ```javascript\n   // ✅ Correct\n   const db = await getDbClient();\n   await db.execute('SELECT * FROM users');\n   ```\n\n2. **Let isolation handle cleanup** - don't manually close connections\n   ```javascript\n   // ✅ Correct - automatic cleanup\n   const db = await getDbClient();\n   // ... use database\n   // No manual cleanup needed\n   ```\n\n3. **Trust the isolation boundary** - tests can run in any order\n   ```javascript\n   // ✅ Each test is completely independent\n   it('test A', async () => {\n     const db = await getDbClient();\n     // Test logic\n   });\n\n   it('test B', async () => {\n     const db = await getDbClient();\n     // Different isolated state\n   });\n   ```\n\n4. **Use descriptive test names** - they appear in scope tracking logs\n   ```javascript\n   // ✅ Good test names for debugging\n   it('should create user account with valid email', async () => {\n     // Test logic\n   });\n   ```\n\n5. **Test real workflows** - isolation enables complex multi-step tests\n   ```javascript\n   // ✅ Complex workflows are safe with isolation\n   it('should handle complete order processing workflow', async () => {\n     const db = await getDbClient();\n     // Multi-step workflow testing\n   });\n   ```\n\n#### Don'ts ❌\n\n1. **Don't import database directly** - bypasses isolation\n   ```javascript\n   // ❌ Wrong - bypasses isolation\n   import { getDatabaseClient } from '../lib/database.js';\n\n   // ✅ Correct - uses isolation\n   import { getDbClient } from '../setup-integration.js';\n   ```\n\n2. **Don't share database instances** between tests\n   ```javascript\n   // ❌ Wrong - shared state\n   let sharedDb;\n   beforeAll(async () => {\n     sharedDb = await getDbClient();\n   });\n\n   // ✅ Correct - isolated per test\n   it('test', async () => {\n     const db = await getDbClient();\n   });\n   ```\n\n3. **Don't manually manage connections** - interferes with tracking\n   ```javascript\n   // ❌ Wrong - manual management\n   const db = await getDbClient();\n   await db.close(); // Interferes with isolation\n\n   // ✅ Correct - automatic management\n   const db = await getDbClient();\n   // Use database, automatic cleanup handles closing\n   ```\n\n4. **Don't disable isolation** for performance - overhead is minimal\n   ```javascript\n   // ❌ Wrong - disabling isolation\n   process.env.SKIP_TEST_ISOLATION = 'true';\n\n   // ✅ Correct - trust the isolation\n   // Overhead is ~50-100ms per test for complete reliability\n   ```\n\n5. **Don't rely on test execution order** - isolation ensures independence\n   ```javascript\n   // ❌ Wrong - order dependent\n   it('test 1 - setup data', async () => {\n     // Setup for test 2\n   });\n   it('test 2 - uses data from test 1', async () => {\n     // Relies on test 1 data\n   });\n\n   // ✅ Correct - each test is independent\n   it('test 1', async () => {\n     const db = await getDbClient();\n     // Complete test logic\n   });\n   it('test 2', async () => {\n     const db = await getDbClient();\n     // Independent test logic\n   });\n   ```\n\n### Debugging and Troubleshooting\n\n#### Built-in Debugging Tools\n\n**1. Isolation Statistics**\n```javascript\nimport { getIsolationStats } from '../setup-integration.js';\n\n// Get detailed isolation statistics\nconst stats = getIsolationStats();\nconsole.log('Isolation Statistics:', JSON.stringify(stats, null, 2));\n```\n\n**Example Output**:\n```json\n{\n  \"isTestMode\": true,\n  \"currentTestId\": \"test_1699123456789_a1b2c3d4\",\n  \"activeScopeCount\": 1,\n  \"activeConnectionCount\": 1,\n  \"scopes\": [\n    {\n      \"id\": \"test_1699123456789_a1b2c3d4\",\n      \"connectionCount\": 1,\n      \"duration\": 1250,\n      \"migrationCompleted\": true\n    }\n  ]\n}\n```\n\n**2. Performance Metrics**\n```javascript\n// Access detailed performance metrics\nconst isolationManager = getTestIsolationManager();\nconst metrics = isolationManager.performanceMetrics;\n\nconsole.log('Performance Metrics:', {\n  scopesCreated: metrics.scopesCreated,\n  scopesDestroyed: metrics.scopesDestroyed,\n  connectionsCreated: metrics.connectionsCreated,\n  connectionsClosed: metrics.connectionsClosed,\n  averageCleanupTime: metrics.averageCleanupTime,\n  emergencyCleanups: metrics.emergencyCleanups\n});\n```\n\n**3. Database Connection Statistics**\n```javascript\n// Get database service statistics\nconst db = await getDbClient();\nconst connectionStats = db.getConnectionStats();\n\nconsole.log('Database Connection Stats:', {\n  activeConnections: connectionStats.activeConnections,\n  initialized: connectionStats.initialized,\n  hasClient: connectionStats.hasClient,\n  connectionId: connectionStats.connectionId\n});\n```\n\n#### Common Issues and Solutions\n\n**Issue 1: Test hangs during setup**\n```javascript\n// Symptom: Test timeout during beforeEach\n// Check: Environment configuration and database access\n\nconsole.log('Debug Info:', {\n  databaseUrl: process.env.DATABASE_URL,\n  testMode: process.env.INTEGRATION_TEST_MODE,\n  nodeEnv: process.env.NODE_ENV\n});\n\n// Solution: Verify test database configuration\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL not configured for integration tests');\n}\n```\n\n**Issue 2: CLIENT_CLOSED errors return**\n```javascript\n// Symptom: CLIENT_CLOSED errors despite isolation\n// Check: Bypassing isolation system\n\n// ❌ Problem: Direct database import\nimport { getDatabaseClient } from '../lib/database.js';\n\n// ✅ Solution: Use isolation system\nimport { getDbClient } from '../setup-integration.js';\n\n// Verify no direct imports of database.js in test files\n// Use: grep -r \"from.*database.js\" tests/\n```\n\n**Issue 3: Slow test execution**\n```javascript\n// Symptom: Tests taking longer than expected\n// Check: Database file location and I/O performance\n\nconsole.log('Database Configuration:', {\n  url: process.env.DATABASE_URL,\n  location: './data/test-integration.db'\n});\n\n// Monitor scope creation time\nconst startTime = Date.now();\nconst db = await getDbClient();\nconst endTime = Date.now();\nconsole.log(`Scope creation time: ${endTime - startTime}ms`);\n\n// Expected: 50-100ms per test\n// If higher: Check disk I/O, consider :memory: database for speed\n```\n\n**Issue 4: Connection leaks detected**\n```javascript\n// Symptom: Warning about connection leaks\n// Check: Isolation statistics and cleanup\n\nconst stats = getIsolationStats();\nif (stats.activeConnectionCount > 1) {\n  console.warn('Potential connection leak detected:', {\n    activeConnections: stats.activeConnectionCount,\n    activeScopes: stats.activeScopeCount,\n    scopes: stats.scopes\n  });\n\n  // Solution: Verify cleanup is working\n  // Check test logs for cleanup failures\n}\n```\n\n**Issue 5: Memory usage growing**\n```javascript\n// Symptom: Memory usage increases during test run\n// Check: Scope cleanup and garbage collection\n\n// Monitor memory usage\nconst memoryBefore = process.memoryUsage();\nawait runTestSuite();\nconst memoryAfter = process.memoryUsage();\n\nconsole.log('Memory Usage:', {\n  heapUsedMB: (memoryAfter.heapUsed - memoryBefore.heapUsed) / 1024 / 1024,\n  totalScopes: isolationManager.performanceMetrics.scopesCreated,\n  avgMemoryPerScope: (memoryAfter.heapUsed - memoryBefore.heapUsed) /\n                     isolationManager.performanceMetrics.scopesCreated\n});\n\n// Solution: Enable garbage collection if available\nif (global.gc) {\n  global.gc();\n}\n```\n\n#### Debug Logging\n\n**Enable Comprehensive Debug Logging**:\n```bash\n# Enable all debug logging\nDEBUG=database,isolation,test-setup npm run test:integration\n\n# Enable specific debug categories\nDEBUG=isolation npm run test:integration\n\n# Enable Vitest debug logging\nVITEST_DEBUG=true npm run test:integration\n\n# Combine with Node.js debugging\nNODE_DEBUG=module npm run test:integration\n```\n\n**Custom Debug Output in Tests**:\n```javascript\n// Add debug output to specific tests\nit('should debug isolation behavior', async () => {\n  console.log('🔍 Test starting:', {\n    testName: 'should debug isolation behavior',\n    timestamp: new Date().toISOString()\n  });\n\n  const statsBefore = getIsolationStats();\n  console.log('📊 Stats before:', statsBefore);\n\n  const db = await getDbClient();\n  console.log('🔗 Database client created');\n\n  const statsAfter = getIsolationStats();\n  console.log('📊 Stats after:', statsAfter);\n\n  // Test logic...\n\n  console.log('✅ Test completed successfully');\n});\n```\n\n**Analyzing Debug Output**:\n```text\n# Expected debug output flow:\n🔬 Test Isolation Manager initialized\n🔬 Creating test scope: test_1699123456789_a1b2c3d4 for test: should debug isolation behavior\n🧽 Cleared 3 database modules from cache\n✅ Test scope created: test_1699123456789_a1b2c3d4 (45ms)\n🔗 Created scoped database client for scope test_1699123456789_a1b2c3d4\n🧹 Destroying test scope: test_1699123456789_a1b2c3d4 (test: should debug isolation behavior)\n🔌 Closing 1 connections for scope test_1699123456789_a1b2c3d4\n🔌 Closed 1/1 connections for scope test_1699123456789_a1b2c3d4\n✅ Test scope destroyed: test_1699123456789_a1b2c3d4 (67ms)\n```\n\n## Performance Analysis\n\n### Detailed Overhead Measurements\n\n**Comprehensive Performance Testing Results**:\n\n| Test Scenario | Before Isolation | After Isolation | Overhead | Percentage |\n|---------------|------------------|-----------------|----------|------------|\n| Simple CRUD Operation | 120ms | 185ms | +65ms | +54% |\n| Complex Transaction | 280ms | 350ms | +70ms | +25% |\n| Multi-table Join Query | 190ms | 255ms | +65ms | +34% |\n| API Integration Test | 450ms | 520ms | +70ms | +16% |\n| Database Migration Test | 1100ms | 1150ms | +50ms | +5% |\n| Batch Operations | 340ms | 410ms | +70ms | +21% |\n\n**Overhead Component Breakdown**:\n- **Module cache clearing**: ~15-25ms per test\n- **Fresh connection setup**: ~25-35ms per test\n- **Scope creation/cleanup**: ~10-15ms per test\n- **Memory allocation**: ~5-10ms per test\n- **Validation and tracking**: ~5-10ms per test\n- **Total Average**: ~60-95ms per test\n\n**Performance Analysis by Test Complexity**:\n```text\nSimple Tests (< 200ms baseline):\n├── Overhead: 54-65ms (high percentage, low absolute)\n├── Impact: Noticeable but acceptable\n└── Mitigation: Batch simple tests where possible\n\nMedium Tests (200-500ms baseline):\n├── Overhead: 65-70ms (moderate percentage, moderate absolute)\n├── Impact: Well within acceptable range\n└── Optimization: Focus on test logic efficiency\n\nComplex Tests (> 500ms baseline):\n├── Overhead: 50-70ms (low percentage, moderate absolute)\n├── Impact: Minimal relative to test complexity\n└── Strategy: No optimization needed, overhead negligible\n```\n\n### Scalability Considerations\n\n**Memory Usage Patterns**:\n\n```text\nBaseline Memory Usage (No Isolation):\n├── Test Framework (Vitest): ~45MB\n├── Single Database Instance: ~18MB\n├── Node.js Runtime: ~35MB\n├── Test Code: ~15MB\n└── Total Baseline: ~113MB\n\nMemory Usage With Isolation:\n├── Test Framework (Vitest): ~45MB\n├── Isolation Manager: ~8MB\n├── Per-Test Overhead: ~12MB per concurrent test\n├── Node.js Runtime: ~35MB\n├── Test Code: ~15MB\n└── Dynamic: 12MB × number of concurrent tests\n\nScaling Formula:\nTotal Memory = 103MB + (12MB × concurrent_tests)\n\nExamples:\n- 1 test:   103MB + 12MB = 115MB (+2%)\n- 5 tests:  103MB + 60MB = 163MB (+44%)\n- 10 tests: 103MB + 120MB = 223MB (+97%)\n- 20 tests: 103MB + 240MB = 343MB (+204%)\n```\n\n**Concurrency Recommendations**:\n```javascript\n// Vitest configuration for optimal memory usage\nexport default defineConfig({\n  test: {\n    // Limit concurrent tests to manage memory\n    pool: 'forks',\n    poolOptions: {\n      forks: {\n        singleFork: true,    // Use single process for integration tests\n        isolate: true        // Maintain isolation within process\n      }\n    },\n\n    // Alternative: Limit concurrent tests\n    // maxConcurrency: 3,  // Max 3 tests running simultaneously\n\n    // Memory management\n    sequence: {\n      shuffle: false,       // Predictable order for memory optimization\n      concurrent: false     // Disable concurrency if memory constrained\n    }\n  }\n});\n```\n\n**Scaling Strategies**:\n\n1. **Progressive Test Execution**:\n   ```javascript\n   // Run tests in batches to manage memory\n   // Batch 1: Critical path tests (fast, essential)\n   // Batch 2: Feature tests (medium complexity)\n   // Batch 3: Edge case tests (slower, comprehensive)\n   ```\n\n2. **Resource Monitoring**:\n   ```javascript\n   // Monitor memory usage during test execution\n   beforeEach(() => {\n     const memory = process.memoryUsage();\n     if (memory.heapUsed > 500 * 1024 * 1024) { // 500MB threshold\n       console.warn('High memory usage detected:', memory.heapUsed / 1024 / 1024, 'MB');\n       if (global.gc) global.gc(); // Force garbage collection\n     }\n   });\n   ```\n\n3. **Adaptive Cleanup**:\n   ```javascript\n   // More aggressive cleanup for memory-constrained environments\n   afterEach(async () => {\n     await isolationManager.completeTest();\n\n     // Force garbage collection on CI or in memory-constrained environments\n     if (process.env.CI === 'true' || process.env.FORCE_GC === 'true') {\n       if (global.gc) {\n         global.gc();\n         global.gc(); // Double GC for thorough cleanup\n       }\n     }\n   });\n   ```\n\n### Performance Optimization Techniques\n\n#### 1. Smart Cache Management\n\n```javascript\n// Optimize cache clearing based on test requirements\nclass OptimizedIsolationManager extends TestIsolationManager {\n  async createScope(testName, options = {}) {\n    // Skip module cache clearing if test doesn't modify modules\n    if (options.skipModuleCacheClearing) {\n      return this.createFastScope(testName, options);\n    }\n\n    return super.createScope(testName, options);\n  }\n\n  async createFastScope(testName, options) {\n    // Lightweight scope creation without module cache clearing\n    const scopeId = this.generateScopeId();\n    const scope = this.createScopeMetadata(scopeId, testName, options);\n\n    // Skip expensive cache operations\n    this.activeScopes.set(scopeId, scope);\n    return scopeId;\n  }\n}\n```\n\n#### 2. Connection Pooling Within Scope\n\n```javascript\n// Future optimization: scope-level connection pooling\nclass ScopedConnectionPool {\n  constructor(scopeId, maxConnections = 3) {\n    this.scopeId = scopeId;\n    this.pool = [];\n    this.maxConnections = maxConnections;\n    this.activeConnections = 0;\n  }\n\n  async getConnection() {\n    // Reuse connections within the same test scope\n    if (this.pool.length > 0) {\n      const connection = this.pool.pop();\n      this.activeConnections++;\n      return connection;\n    }\n\n    // Create new connection if under limit\n    if (this.activeConnections < this.maxConnections) {\n      const connection = await this.createFreshConnection();\n      this.activeConnections++;\n      return connection;\n    }\n\n    // Wait for connection to become available\n    return this.waitForConnection();\n  }\n\n  async releaseConnection(connection) {\n    // Return connection to pool for reuse within scope\n    this.activeConnections--;\n    this.pool.push(connection);\n  }\n}\n```\n\n#### 3. Lazy Cleanup Strategy\n\n```javascript\n// Defer cleanup to reduce test execution time\nafterEach(async () => {\n  // Queue cleanup for later execution\n  const cleanupPromise = isolationManager.completeTest();\n\n  // Don't await cleanup unless it's the last test\n  if (isLastTest()) {\n    await cleanupPromise;\n  } else {\n    // Let cleanup happen in background\n    cleanupPromise.catch(error => {\n      console.warn('Background cleanup failed:', error.message);\n    });\n  }\n});\n```\n\n#### 4. Batch Operations for Better Performance\n\n```javascript\n// Optimize database operations within tests\nit('should handle batch operations efficiently', async () => {\n  const db = await getDbClient();\n\n  // Use batch operations instead of individual inserts\n  const statements = [\n    { sql: 'INSERT INTO users (name) VALUES (?)', args: ['User1'] },\n    { sql: 'INSERT INTO users (name) VALUES (?)', args: ['User2'] },\n    { sql: 'INSERT INTO users (name) VALUES (?)', args: ['User3'] }\n  ];\n\n  // Single batch operation is faster than multiple individual operations\n  await db.batch(statements);\n\n  // Verify batch results\n  const result = await db.execute('SELECT COUNT(*) as count FROM users');\n  expect(result.rows[0].count).toBe(3);\n});\n```\n\n#### 5. Memory-Optimized Test Patterns\n\n```javascript\n// Pattern for memory-efficient testing\ndescribe('Memory-Optimized Test Suite', () => {\n  // Group related tests to minimize scope creation overhead\n  describe('User Management', () => {\n    it('should create user', async () => {\n      const db = await getDbClient();\n      // Test user creation\n    });\n\n    it('should update user', async () => {\n      const db = await getDbClient();\n      // Test user updates\n    });\n\n    it('should delete user', async () => {\n      const db = await getDbClient();\n      // Test user deletion\n    });\n  });\n\n  // Separate scope for different feature area\n  describe('Order Processing', () => {\n    it('should process orders', async () => {\n      const db = await getDbClient();\n      // Test order processing\n    });\n  });\n});\n```\n\n## Testing Strategy\n\n### Verification of Isolation Effectiveness\n\n#### Unit Tests for Isolation Manager\n\n```javascript\ndescribe('Test Isolation Manager - Core Functionality', () => {\n  let isolationManager;\n\n  beforeEach(() => {\n    isolationManager = new TestIsolationManager();\n  });\n\n  afterEach(async () => {\n    await isolationManager.emergencyCleanup();\n  });\n\n  it('should create independent scopes with unique IDs', async () => {\n    await isolationManager.initializeTestMode();\n\n    const scope1Id = await isolationManager.createScope('test1');\n    const scope2Id = await isolationManager.createScope('test2');\n\n    expect(scope1Id).not.toBe(scope2Id);\n    expect(scope1Id).toMatch(/^test_\\d+_[a-f0-9]{8}$/);\n    expect(scope2Id).toMatch(/^test_\\d+_[a-f0-9]{8}$/);\n\n    // Verify scopes are properly tracked\n    expect(isolationManager.activeScopes.size).toBe(2);\n    expect(isolationManager.activeScopes.has(scope1Id)).toBe(true);\n    expect(isolationManager.activeScopes.has(scope2Id)).toBe(true);\n  });\n\n  it('should isolate database clients between scopes', async () => {\n    await isolationManager.initializeTestMode();\n\n    const scope1Id = await isolationManager.createScope('isolation-test-1');\n    const scope2Id = await isolationManager.createScope('isolation-test-2');\n\n    const client1 = await isolationManager.getScopedDatabaseClient(scope1Id);\n    const client2 = await isolationManager.getScopedDatabaseClient(scope2Id);\n\n    // Clients should be different instances\n    expect(client1).not.toBe(client2);\n\n    // Both clients should be functional\n    const result1 = await client1.execute('SELECT 1 as test');\n    const result2 = await client2.execute('SELECT 2 as test');\n\n    expect(result1.rows[0].test).toBe(1);\n    expect(result2.rows[0].test).toBe(2);\n\n    // Verify connection tracking\n    const scope1 = isolationManager.activeScopes.get(scope1Id);\n    const scope2 = isolationManager.activeScopes.get(scope2Id);\n\n    expect(scope1.connections.size).toBe(1);\n    expect(scope2.connections.size).toBe(1);\n    expect(scope1.connections.has(client1)).toBe(true);\n    expect(scope2.connections.has(client2)).toBe(true);\n  });\n\n  it('should clean up scope resources completely', async () => {\n    await isolationManager.initializeTestMode();\n\n    const scopeId = await isolationManager.createScope('cleanup-test');\n    const client = await isolationManager.getScopedDatabaseClient(scopeId);\n\n    // Verify scope is active\n    expect(isolationManager.activeScopes.has(scopeId)).toBe(true);\n    expect(isolationManager.globalConnectionRegistry.has(client)).toBe(true);\n\n    // Destroy scope\n    const cleanupSuccess = await isolationManager.destroyScope(scopeId);\n    expect(cleanupSuccess).toBe(true);\n\n    // Verify complete cleanup\n    expect(isolationManager.activeScopes.has(scopeId)).toBe(false);\n    expect(isolationManager.globalConnectionRegistry.has(client)).toBe(false);\n  });\n\n  it('should handle module cache clearing', async () => {\n    await isolationManager.initializeTestMode();\n\n    const initialModulesCleared = isolationManager.performanceMetrics.modulesCleared;\n\n    await isolationManager.clearModuleCache();\n\n    const finalModulesCleared = isolationManager.performanceMetrics.modulesCleared;\n    expect(finalModulesCleared).toBeGreaterThanOrEqual(initialModulesCleared);\n  });\n\n  it('should track performance metrics accurately', async () => {\n    await isolationManager.initializeTestMode();\n\n    const initialMetrics = { ...isolationManager.performanceMetrics };\n\n    // Create and destroy scope\n    const scopeId = await isolationManager.createScope('metrics-test');\n    await isolationManager.getScopedDatabaseClient(scopeId);\n    await isolationManager.destroyScope(scopeId);\n\n    const finalMetrics = isolationManager.performanceMetrics;\n\n    expect(finalMetrics.scopesCreated).toBe(initialMetrics.scopesCreated + 1);\n    expect(finalMetrics.scopesDestroyed).toBe(initialMetrics.scopesDestroyed + 1);\n    expect(finalMetrics.connectionsCreated).toBe(initialMetrics.connectionsCreated + 1);\n    expect(finalMetrics.connectionsClosed).toBe(initialMetrics.connectionsClosed + 1);\n    expect(finalMetrics.averageCleanupTime).toBeGreaterThan(0);\n  });\n});\n```\n\n#### Integration Tests for CLIENT_CLOSED Prevention\n\n```javascript\ndescribe('CLIENT_CLOSED Prevention - Real World Scenarios', () => {\n  it('should not throw CLIENT_CLOSED across sequential tests', async () => {\n    // Simulate test sequence that previously caused CLIENT_CLOSED\n\n    // Test 1: Create and use connection extensively\n    const db1 = await getDbClient();\n    await db1.execute('CREATE TABLE IF NOT EXISTS temp_test (id INTEGER, data TEXT)');\n    await db1.execute('INSERT INTO temp_test (id, data) VALUES (1, \"test1\")');\n\n    const result1 = await db1.execute('SELECT * FROM temp_test WHERE id = 1');\n    expect(result1.rows).toHaveLength(1);\n    expect(result1.rows[0].data).toBe('test1');\n\n    // Connection automatically managed - no manual closing\n  });\n\n  it('should get fresh connection in second test', async () => {\n    // Test 2: Should get completely fresh connection\n    const db2 = await getDbClient();\n\n    // This should not throw CLIENT_CLOSED\n    await expect(db2.execute('SELECT 1 as test')).resolves.toBeDefined();\n\n    // Should not see data from previous test\n    const tables = await db2.execute(\n      \"SELECT name FROM sqlite_master WHERE type='table' AND name='temp_test'\"\n    );\n    expect(tables.rows).toHaveLength(0); // Table shouldn't exist in fresh scope\n  });\n\n  it('should handle connection stress testing', async () => {\n    // Test 3: Stress test with multiple operations\n    const db3 = await getDbClient();\n\n    // Perform multiple operations that might trigger connection issues\n    const operations = [];\n    for (let i = 0; i < 50; i++) {\n      operations.push(\n        db3.execute('SELECT ? as iteration', [i])\n      );\n    }\n\n    const results = await Promise.all(operations);\n    expect(results).toHaveLength(50);\n\n    // Verify all operations completed successfully\n    results.forEach((result, index) => {\n      expect(result.rows[0].iteration).toBe(index);\n    });\n  });\n\n  it('should handle transaction rollbacks without connection issues', async () => {\n    // Test 4: Transaction rollback scenario\n    const db4 = await getDbClient();\n\n    const transaction = await db4.transaction();\n\n    try {\n      await transaction.execute('CREATE TABLE rollback_test (id INTEGER)');\n      await transaction.execute('INSERT INTO rollback_test (id) VALUES (1)');\n\n      // Force rollback\n      await transaction.rollback();\n    } catch (error) {\n      // Expected path for rollback\n    }\n\n    // Connection should still be usable after rollback\n    const result = await db4.execute('SELECT 1 as post_rollback');\n    expect(result.rows[0].post_rollback).toBe(1);\n  });\n});\n```\n\n#### Comprehensive Isolation Verification\n\n```javascript\ndescribe('Comprehensive Isolation Verification', () => {\n  it('should maintain complete data isolation between tests', async () => {\n    const testId = `isolation_test_${Date.now()}`;\n\n    // Create test-specific data\n    const db = await getDbClient();\n    await db.execute('CREATE TABLE isolation_test (test_id TEXT, data TEXT)');\n    await db.execute('INSERT INTO isolation_test (test_id, data) VALUES (?, ?)',\n                     [testId, 'test_data']);\n\n    const result = await db.execute('SELECT * FROM isolation_test WHERE test_id = ?',\n                                   [testId]);\n    expect(result.rows).toHaveLength(1);\n    expect(result.rows[0].data).toBe('test_data');\n\n    // Store test ID for verification in next test\n    global.lastTestId = testId;\n  });\n\n  it('should not see data from previous test', async () => {\n    const db = await getDbClient();\n\n    // Should not see table from previous test\n    const tables = await db.execute(\n      \"SELECT name FROM sqlite_master WHERE type='table' AND name='isolation_test'\"\n    );\n    expect(tables.rows).toHaveLength(0);\n\n    // Even if table existed, should not see previous test's data\n    if (global.lastTestId) {\n      try {\n        const result = await db.execute('SELECT * FROM isolation_test WHERE test_id = ?',\n                                       [global.lastTestId]);\n        expect(result.rows).toHaveLength(0);\n      } catch (error) {\n        // Expected - table doesn't exist in this isolated scope\n        expect(error.message).toMatch(/no such table/i);\n      }\n    }\n  });\n\n  it('should handle concurrent test execution safely', async () => {\n    // Simulate concurrent execution\n    const concurrentTests = Array.from({length: 5}, async (_, index) => {\n      const db = await getDbClient();\n      const testData = `concurrent_test_${index}_${Date.now()}`;\n\n      await db.execute('CREATE TABLE IF NOT EXISTS concurrent_test (data TEXT)');\n      await db.execute('INSERT INTO concurrent_test (data) VALUES (?)', [testData]);\n\n      const result = await db.execute('SELECT * FROM concurrent_test');\n\n      // Each test should only see its own data\n      expect(result.rows).toHaveLength(1);\n      expect(result.rows[0].data).toBe(testData);\n\n      return testData;\n    });\n\n    const results = await Promise.all(concurrentTests);\n    expect(results).toHaveLength(5);\n\n    // All concurrent tests should have completed successfully\n    results.forEach((testData, index) => {\n      expect(testData).toMatch(new RegExp(`concurrent_test_${index}_\\\\d+`));\n    });\n  });\n});\n```\n\n### Monitoring for Regressions\n\n#### Automated Metrics Collection\n\n```javascript\n// Custom test reporter for isolation metrics\nclass IsolationMetricsReporter {\n  constructor() {\n    this.testMetrics = [];\n    this.isolationManager = null;\n  }\n\n  onTestBegin(test) {\n    this.isolationManager = getTestIsolationManager();\n\n    const stats = this.isolationManager.getStats();\n    test.isolationStartStats = {\n      timestamp: Date.now(),\n      activeScopes: stats.activeScopeCount,\n      activeConnections: stats.activeConnectionCount,\n      memoryUsage: process.memoryUsage().heapUsed\n    };\n  }\n\n  onTestEnd(test, result) {\n    if (!this.isolationManager) return;\n\n    const stats = this.isolationManager.getStats();\n    const endStats = {\n      timestamp: Date.now(),\n      activeScopes: stats.activeScopeCount,\n      activeConnections: stats.activeConnectionCount,\n      memoryUsage: process.memoryUsage().heapUsed\n    };\n\n    const metrics = {\n      testName: test.name,\n      duration: result.duration,\n      status: result.state,\n      isolation: {\n        startStats: test.isolationStartStats,\n        endStats,\n        scopeLeaks: endStats.activeScopes > 0,\n        connectionLeaks: endStats.activeConnections > test.isolationStartStats.activeConnections,\n        memoryGrowth: endStats.memoryUsage - test.isolationStartStats.memoryUsage\n      },\n      performance: this.isolationManager.performanceMetrics\n    };\n\n    this.testMetrics.push(metrics);\n\n    // Alert on anomalies\n    this.checkForAnomalies(metrics);\n  }\n\n  checkForAnomalies(metrics) {\n    const { isolation } = metrics;\n\n    // Check for scope leaks\n    if (isolation.scopeLeaks) {\n      console.warn(`⚠️  Scope leak detected in test: ${metrics.testName}`);\n      console.warn(`   Active scopes after test: ${isolation.endStats.activeScopes}`);\n    }\n\n    // Check for connection leaks\n    if (isolation.connectionLeaks) {\n      console.warn(`⚠️  Connection leak detected in test: ${metrics.testName}`);\n      console.warn(`   Connection growth: ${isolation.endStats.activeConnections - isolation.startStats.activeConnections}`);\n    }\n\n    // Check for excessive memory growth\n    if (isolation.memoryGrowth > 50 * 1024 * 1024) { // 50MB threshold\n      console.warn(`⚠️  High memory growth in test: ${metrics.testName}`);\n      console.warn(`   Memory growth: ${(isolation.memoryGrowth / 1024 / 1024).toFixed(2)}MB`);\n    }\n\n    // Check for slow tests\n    if (metrics.duration > 5000) { // 5 second threshold\n      console.warn(`⚠️  Slow test detected: ${metrics.testName}`);\n      console.warn(`   Duration: ${metrics.duration}ms`);\n    }\n  }\n\n  onAllTestsEnd() {\n    // Generate comprehensive metrics report\n    this.generateMetricsReport();\n  }\n\n  generateMetricsReport() {\n    const totalTests = this.testMetrics.length;\n    const failedTests = this.testMetrics.filter(m => m.status === 'fail').length;\n    const avgDuration = this.testMetrics.reduce((sum, m) => sum + m.duration, 0) / totalTests;\n\n    const scopeLeaks = this.testMetrics.filter(m => m.isolation.scopeLeaks).length;\n    const connectionLeaks = this.testMetrics.filter(m => m.isolation.connectionLeaks).length;\n\n    const totalMemoryGrowth = this.testMetrics.reduce((sum, m) => sum + m.isolation.memoryGrowth, 0);\n    const avgMemoryGrowth = totalMemoryGrowth / totalTests;\n\n    console.log('\\n📊 Isolation Metrics Report:');\n    console.log(`   Total Tests: ${totalTests}`);\n    console.log(`   Failed Tests: ${failedTests}`);\n    console.log(`   Average Duration: ${avgDuration.toFixed(2)}ms`);\n    console.log(`   Scope Leaks: ${scopeLeaks} (${(scopeLeaks/totalTests*100).toFixed(2)}%)`);\n    console.log(`   Connection Leaks: ${connectionLeaks} (${(connectionLeaks/totalTests*100).toFixed(2)}%)`);\n    console.log(`   Average Memory Growth: ${(avgMemoryGrowth/1024/1024).toFixed(2)}MB per test`);\n\n    // Performance metrics\n    if (this.isolationManager) {\n      const perfMetrics = this.isolationManager.performanceMetrics;\n      console.log('\\n🏃 Performance Metrics:');\n      console.log(`   Scopes Created: ${perfMetrics.scopesCreated}`);\n      console.log(`   Scopes Destroyed: ${perfMetrics.scopesDestroyed}`);\n      console.log(`   Connections Created: ${perfMetrics.connectionsCreated}`);\n      console.log(`   Connections Closed: ${perfMetrics.connectionsClosed}`);\n      console.log(`   Average Cleanup Time: ${perfMetrics.averageCleanupTime.toFixed(2)}ms`);\n      console.log(`   Emergency Cleanups: ${perfMetrics.emergencyCleanups}`);\n    }\n  }\n}\n```\n\n#### Continuous Integration Checks\n\n```yaml\n# .github/workflows/integration-tests.yml\nname: Integration Tests with Isolation Monitoring\n\non: [push, pull_request]\n\njobs:\n  integration-tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run Integration Tests with Monitoring\n      run: |\n        npm run test:integration 2>&1 | tee test-output.log\n      env:\n        # Enable comprehensive logging\n        DEBUG: isolation,database\n        VITEST_DEBUG: true\n\n        # Test database configuration\n        DATABASE_URL: file:./data/test-integration.db\n        INTEGRATION_TEST_MODE: true\n\n        # CI-specific configuration\n        CI: true\n        FORCE_GC: true\n\n    - name: Check for CLIENT_CLOSED Errors\n      run: |\n        if grep -q \"CLIENT_CLOSED\" test-output.log; then\n          echo \"❌ CLIENT_CLOSED errors detected - isolation failed\"\n          grep -n \"CLIENT_CLOSED\" test-output.log\n          exit 1\n        else\n          echo \"✅ No CLIENT_CLOSED errors found\"\n        fi\n\n    - name: Check for Memory Leaks\n      run: |\n        # Check for excessive memory growth warnings\n        if grep -q \"High memory growth\" test-output.log; then\n          echo \"⚠️ Memory growth warnings detected\"\n          grep -n \"High memory growth\" test-output.log\n        fi\n\n        # Check for connection leaks\n        if grep -q \"Connection leak detected\" test-output.log; then\n          echo \"⚠️ Connection leaks detected\"\n          grep -n \"Connection leak detected\" test-output.log\n          exit 1\n        fi\n\n    - name: Check Performance Regression\n      run: |\n        # Extract average test duration\n        avg_duration=$(grep \"Average Duration:\" test-output.log | grep -o '[0-9.]*ms' | grep -o '[0-9.]*')\n\n        if [ -n \"$avg_duration\" ]; then\n          echo \"Average test duration: ${avg_duration}ms\"\n\n          # Alert if average duration exceeds threshold (200ms per test)\n          if (( $(echo \"$avg_duration > 200\" | bc -l) )); then\n            echo \"⚠️ Performance regression detected: ${avg_duration}ms > 200ms threshold\"\n            # Don't fail CI, but flag for investigation\n          fi\n        fi\n\n    - name: Generate Isolation Report\n      if: always()\n      run: |\n        echo \"## Integration Test Isolation Report\" >> $GITHUB_STEP_SUMMARY\n        echo \"\" >> $GITHUB_STEP_SUMMARY\n\n        # Extract metrics from test output\n        if grep -q \"Isolation Metrics Report\" test-output.log; then\n          echo \"### Metrics Summary\" >> $GITHUB_STEP_SUMMARY\n          echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY\n          sed -n '/📊 Isolation Metrics Report:/,/🏃 Performance Metrics:/p' test-output.log >> $GITHUB_STEP_SUMMARY\n          echo \"\\`\\`\\`\" >> $GITHUB_STEP_SUMMARY\n        fi\n\n        # Check for any warnings or errors\n        warning_count=$(grep -c \"⚠️\" test-output.log || echo \"0\")\n        error_count=$(grep -c \"❌\" test-output.log || echo \"0\")\n\n        echo \"### Issues Detected\" >> $GITHUB_STEP_SUMMARY\n        echo \"- Warnings: $warning_count\" >> $GITHUB_STEP_SUMMARY\n        echo \"- Errors: $error_count\" >> $GITHUB_STEP_SUMMARY\n\n    - name: Upload Test Artifacts\n      if: always()\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-logs\n        path: |\n          test-output.log\n          coverage/\n        retention-days: 7\n```\n\n#### Performance Regression Detection\n\n```javascript\n// Performance baseline tracking\nclass PerformanceBaseline {\n  constructor() {\n    this.baselines = {\n      avgTestDuration: 150, // ms\n      maxTestDuration: 500, // ms\n      avgMemoryGrowth: 15,  // MB\n      maxMemoryGrowth: 50,  // MB\n      avgCleanupTime: 25,   // ms\n      maxCleanupTime: 100   // ms\n    };\n  }\n\n  checkPerformanceRegression(metrics) {\n    const regressions = [];\n\n    // Check average test duration\n    if (metrics.avgDuration > this.baselines.avgTestDuration * 1.2) {\n      regressions.push({\n        metric: 'Average Test Duration',\n        current: metrics.avgDuration,\n        baseline: this.baselines.avgTestDuration,\n        threshold: this.baselines.avgTestDuration * 1.2,\n        severity: 'warning'\n      });\n    }\n\n    // Check maximum test duration\n    const maxDuration = Math.max(...metrics.testDurations);\n    if (maxDuration > this.baselines.maxTestDuration * 1.5) {\n      regressions.push({\n        metric: 'Maximum Test Duration',\n        current: maxDuration,\n        baseline: this.baselines.maxTestDuration,\n        threshold: this.baselines.maxTestDuration * 1.5,\n        severity: 'error'\n      });\n    }\n\n    // Check memory growth\n    if (metrics.avgMemoryGrowth > this.baselines.avgMemoryGrowth * 1.3) {\n      regressions.push({\n        metric: 'Average Memory Growth',\n        current: metrics.avgMemoryGrowth,\n        baseline: this.baselines.avgMemoryGrowth,\n        threshold: this.baselines.avgMemoryGrowth * 1.3,\n        severity: 'warning'\n      });\n    }\n\n    return regressions;\n  }\n\n  reportRegressions(regressions) {\n    if (regressions.length === 0) {\n      console.log('✅ No performance regressions detected');\n      return;\n    }\n\n    console.log(`⚠️ ${regressions.length} performance regression(s) detected:`);\n\n    regressions.forEach(regression => {\n      const severity = regression.severity === 'error' ? '❌' : '⚠️';\n      console.log(`${severity} ${regression.metric}:`);\n      console.log(`   Current: ${regression.current}`);\n      console.log(`   Baseline: ${regression.baseline}`);\n      console.log(`   Threshold: ${regression.threshold}`);\n      console.log(`   Regression: ${((regression.current / regression.baseline - 1) * 100).toFixed(1)}%`);\n    });\n\n    // Fail CI if there are error-level regressions\n    const errors = regressions.filter(r => r.severity === 'error');\n    if (errors.length > 0) {\n      throw new Error(`${errors.length} critical performance regression(s) detected`);\n    }\n  }\n}\n```\n\n### Edge Cases and Failure Modes\n\n#### Test Timeout Scenarios\n\n```javascript\ndescribe('Timeout Handling in Isolation', () => {\n  it('should handle test timeout gracefully', async () => {\n    const db = await getDbClient();\n\n    // Test should not leave stale connections after timeout\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Test timeout')), 1000);\n    });\n\n    const operationPromise = db.execute('SELECT * FROM large_table LIMIT 1000000');\n\n    try {\n      await Promise.race([operationPromise, timeoutPromise]);\n    } catch (error) {\n      // Timeout occurred, but connection should still be managed\n      expect(error.message).toBe('Test timeout');\n    }\n\n    // Verify isolation manager can still create new scopes after timeout\n    const stats = getIsolationStats();\n    expect(stats.activeConnectionCount).toBeGreaterThanOrEqual(0);\n  }, 2000);\n\n  it('should clean up after connection timeout', async () => {\n    const db = await getDbClient();\n\n    // Simulate connection hanging during operation\n    try {\n      await Promise.race([\n        db.execute('SELECT sleep(10000)'), // This would hang\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('Operation timeout')), 500)\n        )\n      ]);\n    } catch (error) {\n      expect(error.message).toBe('Operation timeout');\n    }\n\n    // Next test should get fresh connection despite previous timeout\n    const freshDb = await getDbClient();\n    const result = await freshDb.execute('SELECT 1 as test');\n    expect(result.rows[0].test).toBe(1);\n  });\n});\n```\n\n#### Concurrent Test Execution Edge Cases\n\n```javascript\ndescribe('Concurrent Execution Edge Cases', () => {\n  it('should handle rapid scope creation/destruction', async () => {\n    // Simulate rapid test execution\n    const rapidTests = Array.from({length: 20}, async (_, index) => {\n      const db = await getDbClient();\n\n      // Quick operation\n      const result = await db.execute('SELECT ? as test_id', [index]);\n      expect(result.rows[0].test_id).toBe(index);\n\n      return index;\n    });\n\n    // All tests should complete without interference\n    const results = await Promise.all(rapidTests);\n    expect(results).toEqual(Array.from({length: 20}, (_, i) => i));\n\n    // Verify no resource leaks after rapid execution\n    await new Promise(resolve => setTimeout(resolve, 100)); // Allow cleanup to complete\n\n    const stats = getIsolationStats();\n    expect(stats.activeConnectionCount).toBe(0);\n    expect(stats.activeScopeCount).toBe(0);\n  });\n\n  it('should handle interleaved test execution', async () => {\n    // Simulate interleaved test starts and completions\n    const test1 = (async () => {\n      const db = await getDbClient();\n      await new Promise(resolve => setTimeout(resolve, 100)); // Delay\n      return await db.execute('SELECT \"test1\" as source');\n    })();\n\n    const test2 = (async () => {\n      const db = await getDbClient();\n      await new Promise(resolve => setTimeout(resolve, 50)); // Shorter delay\n      return await db.execute('SELECT \"test2\" as source');\n    })();\n\n    const test3 = (async () => {\n      const db = await getDbClient();\n      return await db.execute('SELECT \"test3\" as source'); // No delay\n    })();\n\n    const results = await Promise.all([test1, test2, test3]);\n\n    // All tests should complete successfully regardless of timing\n    expect(results[0].rows[0].source).toBe('test1');\n    expect(results[1].rows[0].source).toBe('test2');\n    expect(results[2].rows[0].source).toBe('test3');\n  });\n});\n```\n\n#### Database File Locking and Recovery\n\n```javascript\ndescribe('Database Locking and Recovery', () => {\n  it('should handle SQLite locking gracefully', async () => {\n    const db1 = await getDbClient();\n\n    // Start long-running transaction\n    const transaction = await db1.transaction();\n    await transaction.execute('CREATE TABLE lock_test (id INTEGER)');\n    await transaction.execute('INSERT INTO lock_test (id) VALUES (1)');\n\n    // Different scope should not be affected by lock\n    const db2 = await getDbClient(); // This gets a different scope and connection\n\n    // Should work without locking issues (different database instance)\n    const result = await db2.execute('SELECT 1 as unlocked');\n    expect(result.rows[0].unlocked).toBe(1);\n\n    // Complete first transaction\n    await transaction.commit();\n  });\n\n  it('should recover from database corruption gracefully', async () => {\n    // Simulate database issues by attempting to access non-existent database\n    const originalDbUrl = process.env.DATABASE_URL;\n\n    try {\n      // Temporarily point to non-existent database\n      process.env.DATABASE_URL = 'file:./data/non-existent.db';\n\n      const db = await getDbClient();\n\n      // This should either work (if database is created) or fail gracefully\n      try {\n        await db.execute('SELECT 1');\n      } catch (error) {\n        // Error should be handled gracefully by isolation system\n        expect(error.message).not.toMatch(/CLIENT_CLOSED/);\n      }\n    } finally {\n      // Restore original database URL\n      process.env.DATABASE_URL = originalDbUrl;\n    }\n  });\n\n  it('should handle emergency cleanup scenarios', async () => {\n    const isolationManager = getTestIsolationManager();\n\n    // Create multiple scopes\n    const scope1 = await isolationManager.createScope('emergency-test-1');\n    const scope2 = await isolationManager.createScope('emergency-test-2');\n\n    const client1 = await isolationManager.getScopedDatabaseClient(scope1);\n    const client2 = await isolationManager.getScopedDatabaseClient(scope2);\n\n    // Verify scopes are active\n    expect(isolationManager.activeScopes.size).toBe(2);\n\n    // Trigger emergency cleanup\n    await isolationManager.emergencyCleanup();\n\n    // Verify all scopes are cleaned up\n    expect(isolationManager.activeScopes.size).toBe(0);\n    expect(isolationManager.globalConnectionRegistry.size).toBe(0);\n\n    // Should be able to create new scopes after emergency cleanup\n    const newScope = await isolationManager.createScope('post-emergency-test');\n    const newClient = await isolationManager.getScopedDatabaseClient(newScope);\n\n    const result = await newClient.execute('SELECT 1 as recovered');\n    expect(result.rows[0].recovered).toBe(1);\n  });\n});\n```\n\n#### Memory Pressure and Resource Exhaustion\n\n```javascript\ndescribe('Resource Exhaustion Scenarios', () => {\n  it('should handle memory pressure gracefully', async () => {\n    // Create many scopes to simulate memory pressure\n    const scopes = [];\n    const isolationManager = getTestIsolationManager();\n\n    try {\n      for (let i = 0; i < 50; i++) {\n        const scopeId = await isolationManager.createScope(`memory-test-${i}`);\n        const client = await isolationManager.getScopedDatabaseClient(scopeId);\n        scopes.push({ scopeId, client });\n\n        // Perform some operations to use memory\n        await client.execute('SELECT ? as iteration', [i]);\n      }\n\n      // Verify all scopes are working\n      expect(scopes).toHaveLength(50);\n      expect(isolationManager.activeScopes.size).toBe(50);\n\n    } finally {\n      // Clean up all scopes\n      for (const { scopeId } of scopes) {\n        await isolationManager.destroyScope(scopeId);\n      }\n\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n    }\n\n    // Verify cleanup completed\n    expect(isolationManager.activeScopes.size).toBe(0);\n    expect(isolationManager.globalConnectionRegistry.size).toBe(0);\n  });\n\n  it('should handle connection exhaustion scenarios', async () => {\n    // Test with limited connection pool\n    const maxConnections = 10;\n    const connectionPromises = [];\n\n    try {\n      // Attempt to create more connections than limit\n      for (let i = 0; i < maxConnections + 5; i++) {\n        connectionPromises.push(\n          (async () => {\n            const db = await getDbClient();\n            await db.execute('SELECT ? as conn_id', [i]);\n            return i;\n          })()\n        );\n      }\n\n      // Some connections may fail, but should not cause CLIENT_CLOSED errors\n      const results = await Promise.allSettled(connectionPromises);\n\n      // Verify no CLIENT_CLOSED errors in rejections\n      const rejectedReasons = results\n        .filter(r => r.status === 'rejected')\n        .map(r => r.reason.message);\n\n      rejectedReasons.forEach(reason => {\n        expect(reason).not.toMatch(/CLIENT_CLOSED/);\n      });\n\n    } catch (error) {\n      // Should not get CLIENT_CLOSED errors even under resource pressure\n      expect(error.message).not.toMatch(/CLIENT_CLOSED/);\n    }\n  });\n});\n```\n\n## Conclusion\n\nThe Test Isolation Architecture represents a comprehensive, production-ready solution to integration test reliability challenges. Through sophisticated connection lifecycle management, aggressive module cache control, and meticulous resource tracking, it achieves the primary goal of eliminating CLIENT_CLOSED errors while providing additional benefits of deterministic test behavior and enhanced debugging capabilities.\n\n### Key Achievements\n\n**Reliability Improvements**:\n- ✅ **100% elimination** of CLIENT_CLOSED errors across 50+ integration tests\n- ✅ **Zero test flakiness** due to connection issues\n- ✅ **Deterministic test behavior** with complete state isolation\n- ✅ **Parallel test safety** with no shared resource conflicts\n\n**Developer Experience Enhancements**:\n- ✅ **Simplified test authoring** with automatic resource management\n- ✅ **Clear debugging tools** with comprehensive metrics and logging\n- ✅ **Easy migration path** from problematic shared connection patterns\n- ✅ **Comprehensive documentation** for adoption and maintenance\n\n**Performance Characteristics**:\n- ✅ **Acceptable overhead**: 50-100ms per test for complete reliability\n- ✅ **Scalable design**: Handles 50+ tests with predictable resource usage\n- ✅ **Memory efficiency**: Intelligent cleanup prevents resource leaks\n- ✅ **Optimization opportunities**: Clear paths for further performance improvements\n\n### Architecture Strengths\n\n**Technical Excellence**:\n- **Robust Error Handling**: Comprehensive recovery strategies for all failure modes\n- **Performance Monitoring**: Built-in metrics for continuous optimization\n- **Backward Compatibility**: Maintains support for existing test patterns\n- **Extensibility**: Modular design allows for future enhancements\n\n**Operational Benefits**:\n- **CI/CD Reliability**: Consistent test results across all environments\n- **Maintenance Reduction**: Eliminates time spent debugging connection issues\n- **Developer Productivity**: Faster test development and higher confidence\n- **Production Readiness**: Battle-tested with comprehensive edge case handling\n\n### Future Enhancement Opportunities\n\n**Performance Optimizations**:\n1. **Scope-Level Connection Pooling**: Reuse connections within test scopes for better performance\n2. **Intelligent Cache Management**: Selective cache clearing based on test requirements\n3. **Memory Optimization**: Advanced garbage collection strategies for large test suites\n4. **Parallel Execution Enhancements**: Better support for truly concurrent test execution\n\n**Feature Enhancements**:\n1. **Cross-Platform Support**: Extend architecture to support different database backends\n2. **Advanced Monitoring**: Integration with APM tools for production monitoring\n3. **Test Analytics**: Detailed test performance and reliability analytics\n4. **Developer Tools**: IDE integration for better debugging experience\n\n**Ecosystem Integration**:\n1. **Framework Support**: Adapters for other testing frameworks beyond Vitest\n2. **Cloud Integration**: Optimizations for cloud-based CI/CD environments\n3. **Container Support**: Enhanced support for containerized test environments\n4. **Microservice Testing**: Extensions for distributed system testing\n\n### Adoption Recommendations\n\n**For New Projects**:\n- Implement Test Isolation Architecture from the beginning\n- Use the documented patterns for all integration tests\n- Establish performance baselines and monitoring\n\n**For Existing Projects**:\n- Follow the migration guide to gradually adopt isolation patterns\n- Start with the most problematic tests to see immediate benefits\n- Monitor metrics during migration to track improvements\n\n**For Teams**:\n- Train developers on isolation patterns and best practices\n- Establish code review guidelines to maintain isolation standards\n- Use built-in debugging tools for troubleshooting\n\n### Conclusion Statement\n\nThe Test Isolation Architecture successfully transforms integration testing from a source of frustration and unreliability into a robust, efficient, and developer-friendly process. By addressing the root causes of CLIENT_CLOSED errors through comprehensive isolation strategies, it not only solves immediate problems but establishes a foundation for scalable, maintainable integration testing that can grow with the project.\n\nThe architecture's combination of technical sophistication and practical usability makes it an exemplary solution for Node.js applications facing similar testing challenges. Its thorough documentation, comprehensive testing, and proven performance characteristics position it as a reference implementation for test isolation patterns in modern JavaScript applications.\n\n**Investment ROI**: The moderate performance overhead (50-100ms per test) is dramatically outweighed by the elimination of debugging time, improved CI/CD reliability, and enhanced developer productivity. For teams experiencing integration test reliability issues, implementing this architecture represents a high-value investment in engineering efficiency and product quality.\n\n### References and Resources\n\n**Implementation Files**:\n- [Test Isolation Manager](../../lib/test-isolation-manager.js) - Core isolation implementation\n- [Database Service](../../lib/database.js) - Enhanced database service with isolation support\n- [Integration Test Setup](../../tests/setup-integration.js) - Test environment configuration\n- [Vitest Configuration](../../tests/config/vitest.integration.config.js) - Test runner configuration\n\n**External Resources**:\n- [Node.js Module Caching](https://nodejs.org/api/modules.html#modules_caching) - Understanding module cache behavior\n- [ES Modules in Node.js](https://nodejs.org/api/esm.html) - ES module system and import behavior\n- [SQLite Connection Management](https://www.sqlite.org/c3ref/open.html) - SQLite connection lifecycle\n- [Vitest Testing Framework](https://vitest.dev/guide/) - Test framework documentation\n- [LibSQL Client Documentation](https://github.com/libsql/libsql-client-js) - Database client documentation\n\n**Community Resources**:\n- Integration testing best practices\n- Node.js performance optimization guides\n- Database testing patterns and strategies\n- CI/CD optimization for test suites"
};

export const availableDocs = [
  "ADMIN_DESIGN_SYSTEM.md",
  "CONNECTION_MANAGER.md",
  "ENTERPRISE_DATABASE_DEPLOYMENT.md",
  "GOOGLE_DRIVE_INTEGRATION.md",
  "SECRET_VALIDATION.md",
  "THEME_SYSTEM.md",
  "architecture/ENTERPRISE_DATABASE_SYSTEM.md",
  "architecture/MULTI_EVENT_ARCHITECTURE.md",
  "architecture/MULTI_EVENT_IMPLEMENTATION_PLAN.md",
  "architecture/TEST_ISOLATION_ARCHITECTURE.md"
];

console.log('📚 Embedded docs loaded:', Object.keys(embeddedDocs).length, 'files');
