name: Test Infrastructure Complexity Check

on:
  pull_request:
    paths:
      - 'tests-new/**'
      - 'tests/**'
      - 'scripts/test-*.js'
      - 'scripts/**test**.js'

jobs:
  complexity-check:
    runs-on: ubuntu-latest
    name: Prevent Test Infrastructure Bloat
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check Test Infrastructure Complexity
      run: |
        echo "üîç Analyzing test infrastructure complexity..."
        
        # Count total lines in test framework
        TOTAL_TEST_LINES=$(find tests-new -name "*.js" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo 0)
        
        # Count test files
        TEST_FILE_COUNT=$(find tests-new -name "*.js" | wc -l || echo 0)
        
        # Count utility files in core/helpers/fixtures
        UTIL_FILE_COUNT=$(find tests-new/core tests-new/helpers tests-new/fixtures -name "*.js" 2>/dev/null | wc -l || echo 0)
        
        echo "üìä Current Test Infrastructure Metrics:"
        echo "  Total test lines: $TOTAL_TEST_LINES"
        echo "  Test file count: $TEST_FILE_COUNT" 
        echo "  Utility file count: $UTIL_FILE_COUNT"
        
        # Check total lines threshold
        if [ "$TOTAL_TEST_LINES" -gt 3000 ]; then
          echo "‚ùå COMPLEXITY FAILURE: Total test lines ($TOTAL_TEST_LINES) exceeds 3000 line threshold"
          echo "   This indicates test infrastructure bloat. Consider:"
          echo "   ‚Ä¢ Removing duplicate test utilities"
          echo "   ‚Ä¢ Simplifying complex test patterns"
          echo "   ‚Ä¢ Using direct assertions instead of helper abstractions"
          exit 1
        fi
        
        # Check for oversized test files
        echo "üîç Checking individual test file sizes..."
        OVERSIZED_FILES=""
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            LINE_COUNT=$(wc -l < "$file")
            if [ "$LINE_COUNT" -gt 200 ]; then
              echo "‚ö†Ô∏è  Large test file: $file ($LINE_COUNT lines)"
              OVERSIZED_FILES="$OVERSIZED_FILES\n  $file ($LINE_COUNT lines)"
            fi
          fi
        done < <(find tests-new -name "*.test.js" -type f 2>/dev/null || true)
        
        # Check for oversized utility files
        echo "üîç Checking utility file sizes..."
        OVERSIZED_UTILS=""
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            LINE_COUNT=$(wc -l < "$file")
            if [ "$LINE_COUNT" -gt 150 ]; then
              echo "‚ö†Ô∏è  Large utility file: $file ($LINE_COUNT lines)"
              OVERSIZED_UTILS="$OVERSIZED_UTILS\n  $file ($LINE_COUNT lines)"
            fi
          fi
        done < <(find tests-new/core tests-new/helpers tests-new/fixtures -name "*.js" -type f 2>/dev/null || true)
        
        # Report oversized files as warnings, not failures
        if [ -n "$OVERSIZED_FILES" ]; then
          echo "‚ö†Ô∏è  WARNING: Large test files detected (>200 lines):"
          echo -e "$OVERSIZED_FILES"
          echo "   Consider breaking these into smaller, focused tests"
        fi
        
        if [ -n "$OVERSIZED_UTILS" ]; then
          echo "‚ö†Ô∏è  WARNING: Large utility files detected (>150 lines):"
          echo -e "$OVERSIZED_UTILS" 
          echo "   Consider if these utilities add necessary value or create complexity"
        fi
        
        # Success message
        echo "‚úÖ Test infrastructure complexity within acceptable limits"
        echo "   Keep tests simple and focused!"

    - name: Generate Complexity Report
      run: |
        echo "üìã Test Infrastructure Complexity Report" > complexity-report.md
        echo "Generated: $(date)" >> complexity-report.md
        echo "" >> complexity-report.md
        
        # Metrics
        TOTAL_LINES=$(find tests-new -name "*.js" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo 0)
        FILE_COUNT=$(find tests-new -name "*.js" | wc -l || echo 0)
        UTIL_COUNT=$(find tests-new/core tests-new/helpers tests-new/fixtures -name "*.js" 2>/dev/null | wc -l || echo 0)
        
        echo "## Current Metrics" >> complexity-report.md
        echo "- **Total Lines**: $TOTAL_LINES / 3000 threshold" >> complexity-report.md
        echo "- **Test Files**: $FILE_COUNT" >> complexity-report.md  
        echo "- **Utility Files**: $UTIL_COUNT" >> complexity-report.md
        echo "" >> complexity-report.md
        
        # Top 5 largest files
        echo "## Largest Test Files" >> complexity-report.md
        find tests-new -name "*.js" -exec wc -l {} + 2>/dev/null | sort -nr | head -6 | tail -5 | while read line file; do
          echo "- $file: $line lines" >> complexity-report.md
        done
        
        # Prevention guidance
        echo "" >> complexity-report.md
        echo "## Prevention Guidelines" >> complexity-report.md
        echo "- Keep test files under 200 lines" >> complexity-report.md
        echo "- Keep utility files under 150 lines" >> complexity-report.md
        echo "- Avoid complex test abstractions" >> complexity-report.md
        echo "- Use direct assertions over helper methods" >> complexity-report.md
        echo "- Delete unused test utilities immediately" >> complexity-report.md
        
    - name: Upload Complexity Report
      uses: actions/upload-artifact@v4
      with:
        name: test-complexity-report
        path: complexity-report.md