name: Test Infrastructure Complexity Check

on:
  pull_request:
    paths:
      - 'tests/**'
      - 'scripts/test-*.js'
      - 'scripts/**test**.js'

jobs:
  complexity-check:
    runs-on: ubuntu-latest
    name: Prevent Test Infrastructure Bloat
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        
      - name: Check Test Infrastructure Complexity
        run: |
          echo "üîç Analyzing test infrastructure complexity..."
          
          # IMPORTANT: We track different test types separately:
          # - Unit tests (*.test.js): Core business logic and API contract validation (800 line limit)
          # - E2E tests (tests/e2e/): Full user flow testing (no line limit - comprehensive scenarios)
          # - Utilities: helpers.js, setup.js, etc. (separate limits)
          # - Config files: vitest.config.js, etc. (not counted)
          
          # Count total lines in unit test files ONLY (excluding E2E tests and utility files)
          TOTAL_TEST_LINES=$(find tests -name "*.test.js" -not -path "tests/e2e/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo 0)
          
          # Count test files (excluding E2E tests and utility files)
          TEST_FILE_COUNT=$(find tests -name "*.test.js" -not -path "tests/e2e/*" | wc -l || echo 0)
          
          # Count utility files (should be minimal)
          UTIL_FILE_COUNT=$(find tests \( -name "helpers.js" -o -name "setup.js" \) -type f 2>/dev/null | wc -l || echo 0)
          
          echo "üìä Current Test Infrastructure Metrics (Unit Tests Only):"
          echo "  Total unit test lines: $TOTAL_TEST_LINES (*.test.js files only)"
          echo "  Unit test file count: $TEST_FILE_COUNT (*.test.js files only)" 
          echo "  Utility file count: $UTIL_FILE_COUNT"
          echo ""
          echo "‚ÑπÔ∏è  Note: E2E tests, utilities, and config files are tracked separately"
          
          # Check total lines threshold - reasonable target is 800 lines max for 26 essential unit tests
          # This allows room for critical API contracts, security validation, and business flows
          if [ "$TOTAL_TEST_LINES" -gt 800 ]; then
            echo "‚ùå COMPLEXITY FAILURE: Total unit test lines ($TOTAL_TEST_LINES) exceeds 800 line threshold"
            echo "   The streamlined unit test approach should stay under 800 lines total. Consider:"
            echo "   ‚Ä¢ Removing unnecessary test abstractions"
            echo "   ‚Ä¢ Simplifying test logic"
            echo "   ‚Ä¢ Using direct assertions instead of complex helpers"
            echo "   ‚Ä¢ Focus only on critical business flows"
            echo "   Current target: 26 essential unit tests covering API contracts and business flows."
            echo "   Note: E2E tests and utility files are not counted in this limit."
            exit 1
          fi
          
          # Check for oversized test files
          echo "üîç Checking individual test file sizes..."
          OVERSIZED_FILES=""
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              LINE_COUNT=$(wc -l < "$file")
              if [ "$LINE_COUNT" -gt 250 ]; then
                echo "‚ö†Ô∏è  Large test file: $file ($LINE_COUNT lines)"
                OVERSIZED_FILES="$OVERSIZED_FILES\n  $file ($LINE_COUNT lines)"
              fi
            fi
          done < <(find tests -name "*.test.js" -type f 2>/dev/null || true)
          
          # Check for oversized utility files
          echo "üîç Checking utility file sizes..."
          OVERSIZED_UTILS=""
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              LINE_COUNT=$(wc -l < "$file")
              if [ "$LINE_COUNT" -gt 200 ]; then
                echo "‚ö†Ô∏è  Large utility file: $file ($LINE_COUNT lines)"
                OVERSIZED_UTILS="$OVERSIZED_UTILS\n  $file ($LINE_COUNT lines)"
              fi
            fi
          done < <(find tests \( -name "helpers.js" -o -name "setup.js" \) -type f 2>/dev/null || true)
          
          # Report oversized files as warnings, not failures
          if [ -n "$OVERSIZED_FILES" ]; then
            echo "‚ö†Ô∏è  WARNING: Large test files detected (>250 lines):"
            echo -e "$OVERSIZED_FILES"
            echo "   Consider breaking these into smaller, focused tests"
          fi
          
          if [ -n "$OVERSIZED_UTILS" ]; then
            echo "‚ö†Ô∏è  WARNING: Large utility files detected (>200 lines):"
            echo -e "$OVERSIZED_UTILS" 
            echo "   Consider if these utilities add necessary value or create complexity"
          fi
          
          # Success message
          echo "‚úÖ Unit test complexity within acceptable limits"
          echo "   üìä Current: $TOTAL_TEST_LINES lines for unit tests (*.test.js files only)"
          echo "   üéØ Target: Keep unit tests under 800 lines total, individual files under 250 lines"
          echo "   üìà Efficiency: $(echo "scale=1; $TOTAL_TEST_LINES / $TEST_FILE_COUNT" | bc -l) lines per test file on average"
          echo "   ‚ÑπÔ∏è  Note: E2E tests, utilities, and config files have separate limits"

      - name: Generate Complexity Report
        run: |
          echo "üìã Test Infrastructure Complexity Report" > complexity-report.md
          echo "Generated: $(date)" >> complexity-report.md
          echo "" >> complexity-report.md
          
          # Metrics for unit test files only (excluding E2E and utilities)
          TOTAL_LINES=$(find tests -name "*.test.js" -not -path "tests/e2e/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo 0)
          FILE_COUNT=$(find tests -name "*.test.js" -not -path "tests/e2e/*" | wc -l || echo 0)
          UTIL_COUNT=$(find tests -name "helpers.js" -o -name "setup.js" 2>/dev/null | wc -l || echo 0)
          
          # Calculate actual test count from files
          TEST_COUNT=$(find tests -name "*.test.js" -not -path "tests/e2e/*" -exec grep -c "test\|it\|describe" {} + 2>/dev/null | awk '{s+=$1} END {print s}' || echo 0)
          
          echo "## Current Metrics" >> complexity-report.md
          echo "- **Total Unit Test Lines**: $TOTAL_LINES / 800 threshold (*.test.js files only)" >> complexity-report.md
          echo "- **Unit Test Files**: $FILE_COUNT" >> complexity-report.md  
          echo "- **Utility Files**: $UTIL_COUNT" >> complexity-report.md
          echo "- **Test Count**: $TEST_COUNT unit tests" >> complexity-report.md
          echo "- **Efficiency**: $(echo "scale=1; $TOTAL_LINES / $FILE_COUNT" | bc -l) lines per test file" >> complexity-report.md
          echo "" >> complexity-report.md
          
          # Top 5 largest unit test files (excluding E2E and utilities)
          echo "## Largest Unit Test Files (*.test.js Only)" >> complexity-report.md
          find tests -name "*.test.js" -not -path "tests/e2e/*" -exec wc -l {} + 2>/dev/null | grep -vE '\\stotal$' | sort -nr | head -5 | while read line file; do
            echo "- $file: $line lines" >> complexity-report.md
          done
          
          # Prevention guidance
          echo "" >> complexity-report.md
          echo "## Unit Test Complexity Guidelines" >> complexity-report.md
          echo "- **Unit test suite**: Stay under 800 lines total (*.test.js files only)" >> complexity-report.md
          echo "- **Individual test files**: Under 250 lines each" >> complexity-report.md
          echo "- **Helper files**: Under 200 lines each (separate from unit test count)" >> complexity-report.md
          echo "- **Focus**: Test critical business flows and API contracts" >> complexity-report.md
          echo "- **Approach**: Direct API calls, minimal mocking" >> complexity-report.md
          echo "- **Simplicity**: Any developer should understand tests immediately" >> complexity-report.md
          echo "- **Separation**: E2E tests, utilities, and config files tracked separately" >> complexity-report.md
          echo "- **Current Status**: ‚úÖ Unit tests efficiently covering essential functionality" >> complexity-report.md
        
      - name: Upload Complexity Report
        uses: actions/upload-artifact@v4
        with:
          name: test-complexity-report
          path: complexity-report.md