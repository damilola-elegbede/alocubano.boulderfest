name: "üì∏ Monthly Database Snapshot"

on:
  schedule:
    # 1st of every month at 3 AM UTC
    - cron: '0 3 1 * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show what would happen without making changes)'
        required: false
        default: false
        type: boolean
  # TEMPORARY: Testing workflow on fix/turso-backups branch
  # TODO: Remove these triggers before merging to main
  push:
    branches:
      - fix/turso-backups
  pull_request:
    branches:
      - fix/turso-backups

permissions:
  contents: read

jobs:
  snapshot:
    name: "üì∏ Create Monthly Snapshots"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "üîß Install Turso CLI"
        run: |
          echo "üîß Installing Turso CLI..."
          curl -sSfL https://get.tur.so/install.sh | bash

          # Verify installation
          if [ ! -f "$HOME/.turso/turso" ]; then
            echo "‚ùå Turso CLI installation failed - binary not found"
            exit 1
          fi

          echo "‚úÖ Turso CLI installed: $(ls -lh $HOME/.turso/turso)"

          # Add to PATH for subsequent steps (correct directory)
          echo "$HOME/.turso" >> $GITHUB_PATH

      - name: "üîê Verify Turso API Token"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
        run: |
          echo "üîê Verifying Turso API token..."

          # Check if token is set
          if [ -z "$TURSO_API_TOKEN" ]; then
            echo "‚ùå TURSO_API_TOKEN secret is not set"
            echo ""
            echo "üìù Fix: Go to GitHub Settings ‚Üí Secrets ‚Üí Actions ‚Üí New secret"
            echo "   Name: TURSO_API_TOKEN"
            echo "   Value: Run 'turso auth token' to get your platform API token"
            echo ""
            echo "‚ö†Ô∏è  Note: TURSO_API_TOKEN (platform token) is different from"
            echo "   TURSO_AUTH_TOKEN (database connection token)"
            exit 1
          fi

          # Verify token format (JWT should start with 'eyJ')
          if [[ ! "$TURSO_API_TOKEN" =~ ^eyJ ]]; then
            echo "‚ö†Ô∏è  Warning: Token doesn't appear to be a valid JWT (should start with 'eyJ')"
          fi

          echo "‚úÖ TURSO_API_TOKEN is configured"

      - name: "üîç Verify Database Access"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
          PROD_DB: ${{ vars.TURSO_PROD_DB_NAME }}
          DEV_DB: ${{ vars.TURSO_DEV_DB_NAME }}
        run: |
          echo "üîç Verifying database access and data..."
          echo ""

          # Check production database
          echo "üìä Production Database: $PROD_DB"
          if turso db show "$PROD_DB" > /dev/null 2>&1; then
            echo "  ‚úÖ Can access production database"

            # Try to get a row count from a table to verify data access
            ROW_COUNT=$(turso db shell "$PROD_DB" "SELECT COUNT(*) as count FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'" | tail -n 1 | tr -d ' ')
            echo "  üìä Tables in production: $ROW_COUNT"
          else
            echo "  ‚ùå Cannot access production database"
            exit 1
          fi

          echo ""

          # Check development database
          echo "üìä Development Database: $DEV_DB"
          if turso db show "$DEV_DB" > /dev/null 2>&1; then
            echo "  ‚úÖ Can access development database"

            # Try to get a row count from a table to verify data access
            ROW_COUNT=$(turso db shell "$DEV_DB" "SELECT COUNT(*) as count FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'" | tail -n 1 | tr -d ' ')
            echo "  üìä Tables in development: $ROW_COUNT"
          else
            echo "  ‚ùå Cannot access development database"
            exit 1
          fi

          echo ""
          echo "‚úÖ Database access verification complete"

      - name: "üì∏ Create Production Snapshot"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
          PROD_DB: ${{ vars.TURSO_PROD_DB_NAME }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üì∏ Creating Production Database Snapshot"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Generate snapshot name with YYYY-MM format
          SNAPSHOT_MONTH=$(date -u '+%Y-%m')
          SNAPSHOT_NAME="${PROD_DB}-${SNAPSHOT_MONTH}"

          echo "üìä Source Database: $PROD_DB"
          echo "üìÖ Snapshot Name: $SNAPSHOT_NAME"
          echo "üîç Dry Run: ${DRY_RUN:-false}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Check if snapshot already exists
          if turso db list | grep -q "^${SNAPSHOT_NAME}\s"; then
            echo "‚ö†Ô∏è  Snapshot already exists: $SNAPSHOT_NAME"
            echo "   Skipping creation to avoid duplicates"
            exit 0
          fi

          if [ "${DRY_RUN}" = "true" ]; then
            echo "üîç DRY RUN: Would create snapshot: $SNAPSHOT_NAME"
            exit 0
          fi

          # Create snapshot branch
          echo "üì∏ Creating snapshot branch..."
          turso db create "$SNAPSHOT_NAME" --from-db "$PROD_DB" --wait

          # Verify snapshot was created
          if turso db list | grep -q "^${SNAPSHOT_NAME}\s"; then
            echo "‚úÖ Production snapshot created successfully"

            # Get snapshot details
            turso db show "$SNAPSHOT_NAME"
          else
            echo "‚ùå Failed to verify snapshot creation"
            exit 1
          fi

      - name: "üì∏ Create Development Snapshot"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
          DEV_DB: ${{ vars.TURSO_DEV_DB_NAME }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üì∏ Creating Development Database Snapshot"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Generate snapshot name with YYYY-MM format
          SNAPSHOT_MONTH=$(date -u '+%Y-%m')
          SNAPSHOT_NAME="${DEV_DB}-${SNAPSHOT_MONTH}"

          echo "üìä Source Database: $DEV_DB"
          echo "üìÖ Snapshot Name: $SNAPSHOT_NAME"
          echo "üîç Dry Run: ${DRY_RUN:-false}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Check if snapshot already exists
          if turso db list | grep -q "^${SNAPSHOT_NAME}\s"; then
            echo "‚ö†Ô∏è  Snapshot already exists: $SNAPSHOT_NAME"
            echo "   Skipping creation to avoid duplicates"
            exit 0
          fi

          if [ "${DRY_RUN}" = "true" ]; then
            echo "üîç DRY RUN: Would create snapshot: $SNAPSHOT_NAME"
            exit 0
          fi

          # Create snapshot branch
          echo "üì∏ Creating snapshot branch..."
          turso db create "$SNAPSHOT_NAME" --from-db "$DEV_DB" --wait

          # Verify snapshot was created
          if turso db list | grep -q "^${SNAPSHOT_NAME}\s"; then
            echo "‚úÖ Development snapshot created successfully"

            # Get snapshot details
            turso db show "$SNAPSHOT_NAME"
          else
            echo "‚ùå Failed to verify snapshot creation"
            exit 1
          fi

      - name: "üßπ Cleanup Old Snapshots"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
          PROD_DB: ${{ vars.TURSO_PROD_DB_NAME }}
          DEV_DB: ${{ vars.TURSO_DEV_DB_NAME }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üßπ Cleaning Up Old Snapshots (>12 months)"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Calculate cutoff date (12 months ago)
          CUTOFF_DATE=$(date -u -d '12 months ago' '+%Y-%m' 2>/dev/null || date -u -v-12m '+%Y-%m')
          echo "üìÖ Cutoff Date: Snapshots before $CUTOFF_DATE will be deleted"
          echo "üîç Dry Run: ${DRY_RUN:-false}"
          echo ""

          # List all databases
          ALL_DBS=$(turso db list | tail -n +2 | awk '{print $1}')

          DELETED_COUNT=0
          KEPT_COUNT=0

          for DB in $ALL_DBS; do
            # Check if this is a snapshot (contains YYYY-MM pattern)
            if echo "$DB" | grep -qE '-(20[0-9]{2}-[0-9]{2})$'; then
              # Extract the date from the database name
              SNAPSHOT_DATE=$(echo "$DB" | grep -oE '20[0-9]{2}-[0-9]{2}$')

              # Check if this snapshot is for our databases
              if echo "$DB" | grep -qE "^(${PROD_DB}|${DEV_DB})-"; then
                # Compare dates
                if [ "$SNAPSHOT_DATE" \< "$CUTOFF_DATE" ]; then
                  echo "üóëÔ∏è  Deleting old snapshot: $DB (from $SNAPSHOT_DATE)"

                  if [ "${DRY_RUN}" != "true" ]; then
                    turso db destroy "$DB" --yes
                    echo "   ‚úÖ Deleted"
                  else
                    echo "   üîç DRY RUN: Would delete"
                  fi

                  DELETED_COUNT=$((DELETED_COUNT + 1))
                else
                  echo "‚úÖ Keeping recent snapshot: $DB (from $SNAPSHOT_DATE)"
                  KEPT_COUNT=$((KEPT_COUNT + 1))
                fi
              fi
            fi
          done

          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Cleanup Summary"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üóëÔ∏è  Snapshots Deleted: $DELETED_COUNT"
          echo "‚úÖ Snapshots Kept: $KEPT_COUNT"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      - name: "üìä List Current Snapshots"
        env:
          TURSO_API_TOKEN: ${{ secrets.TURSO_API_TOKEN }}
          PROD_DB: ${{ vars.TURSO_PROD_DB_NAME }}
          DEV_DB: ${{ vars.TURSO_DEV_DB_NAME }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Current Monthly Snapshots"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # List all databases and filter for our snapshots
          ALL_DBS=$(turso db list | tail -n +2 | awk '{print $1}')

          echo "Production Snapshots:"
          for DB in $ALL_DBS; do
            if echo "$DB" | grep -qE "^${PROD_DB}-20[0-9]{2}-[0-9]{2}$"; then
              SNAPSHOT_DATE=$(echo "$DB" | grep -oE '20[0-9]{2}-[0-9]{2}$')
              echo "  üì∏ $DB (from $SNAPSHOT_DATE)"
            fi
          done

          echo ""
          echo "Development Snapshots:"
          for DB in $ALL_DBS; do
            if echo "$DB" | grep -qE "^${DEV_DB}-20[0-9]{2}-[0-9]{2}$"; then
              SNAPSHOT_DATE=$(echo "$DB" | grep -oE '20[0-9]{2}-[0-9]{2}$')
              echo "  üì∏ $DB (from $SNAPSHOT_DATE)"
            fi
          done

          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

  notify:
    name: "üìß Notify on Failure"
    runs-on: ubuntu-latest
    needs: snapshot
    if: failure()

    steps:
      - name: "üìß Send Failure Notification"
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå SNAPSHOT FAILURE NOTIFICATION"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚è∞ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "‚ö†Ô∏è  Monthly database snapshot failed!"
          echo "   Please check the workflow logs and investigate."
          echo ""
          echo "üîç Common Issues:"
          echo "   - Turso authentication failure (check TURSO_AUTH_TOKEN)"
          echo "   - Database name mismatch (check GitHub variables)"
          echo "   - Database quota exceeded (check Turso dashboard)"
          echo "   - Snapshot already exists (may not be an error)"
          echo ""
          echo "üìö See docs/DISASTER_RECOVERY.md for troubleshooting guidance"
