# ======================================================================
# A Lo Cubano Boulder Fest - CI/CD Pipeline
# ======================================================================
# Simple, working CI with clear separation of concerns:
# - Unit/Integration tests: Run locally with SQLite
# - E2E tests: Run against Vercel preview deployments
# ======================================================================

name: Main CI Pipeline

on:
  push:
    branches: [main, develop, "feature/**", "release/**", "hotfix/**"]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  NODE_VERSION: "20"
  CI: true

jobs:
  # ======================================================================
  # Stage 1: Unit Tests (Local, Fast, SQLite)
  # ======================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          CI: true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/

  # ======================================================================
  # Stage 2: Build Verification
  # ======================================================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build project
        run: npm run build

      - name: ✅ Verify build artifacts
        run: |
          echo "Verifying build output..."
          ls -la

  # ======================================================================
  # Stage 3: Deploy to Vercel (Get Preview URL)
  # ======================================================================
  deploy-preview:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: github.event_name == 'pull_request'
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Wait for Vercel Preview
        id: deploy
        run: |
          echo "Waiting for Vercel bot to deploy preview..."
          # Wait for Vercel deployment (the bot handles this)
          sleep 30
          
          # Extract preview URL from PR comments
          PREVIEW_URL=$(gh pr view ${{ github.event.number }} --json comments -q '.comments[] | select(.author.login == "vercel[bot]") | .body' | grep -oP 'https://[a-z0-9-]+\.vercel\.app' | head -1)
          
          if [ -z "$PREVIEW_URL" ]; then
            echo "No preview URL found yet, using placeholder"
            PREVIEW_URL="https://alocubano-boulderfest.vercel.app"
          fi
          
          echo "Preview URL: $PREVIEW_URL"
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ======================================================================
  # Stage 4: E2E Tests (Against Vercel Preview)
  # ======================================================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        browser: [chromium, firefox]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🌐 Run E2E tests against preview
        run: |
          echo "Running E2E tests against: ${{ needs.deploy-preview.outputs.preview-url }}"
          npx playwright test --project=${{ matrix.browser }}
        env:
          PREVIEW_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}
          PLAYWRIGHT_BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}

      - name: 📊 Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/

  # ======================================================================
  # Stage 5: Performance Tests (Optional)
  # ======================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    continue-on-error: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: ⚡ Run performance tests
        run: npm run test:performance || true
        env:
          BASE_URL: ${{ needs.deploy-preview.outputs.preview-url }}

  # ======================================================================
  # Stage 6: Security Scan
  # ======================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests]
    continue-on-error: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high || true

  # ======================================================================
  # Stage 7: CI Status (Summary)
  # ======================================================================
  ci-status:
    name: 📊 CI Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [unit-tests, build, security-scan]
    if: always()

    steps:
      - name: 📋 Check CI Status
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ CI Failed"
            exit 1
          fi
          echo "✅ CI Passed"