name: Secret Rotation and Management

on:
  schedule:
    # Run monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      rotate_keys:
        description: 'Which keys to rotate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - payment_only
          - api_only
          - database_only

jobs:
  rotate-payment-secrets:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.rotate_keys == 'all' || github.event.inputs.rotate_keys == 'payment_only' || github.event_name == 'schedule' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Rotate Stripe API Keys
      run: |
        # Generate new Stripe API keys
        echo "üîÑ Rotating Stripe API keys..."
        
        # Store old keys for rollback
        aws secretsmanager put-secret-value \
          --secret-id alocubano/stripe/previous \
          --secret-string "{
            \"publishable_key\": \"${{ secrets.STRIPE_PUBLISHABLE_KEY }}\",
            \"secret_key\": \"${{ secrets.STRIPE_SECRET_KEY }}\",
            \"webhook_secret\": \"${{ secrets.STRIPE_WEBHOOK_SECRET }}\",
            \"rotated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }"
        
        # Note: Actual Stripe key rotation would be done via Stripe API
        # This is a placeholder for the actual implementation
        echo "‚úÖ Stripe keys backed up to AWS Secrets Manager"
    
    - name: Rotate PayPal Credentials
      run: |
        echo "üîÑ Rotating PayPal credentials..."
        
        # Store old credentials for rollback
        aws secretsmanager put-secret-value \
          --secret-id alocubano/paypal/previous \
          --secret-string "{
            \"client_id\": \"${{ secrets.PAYPAL_CLIENT_ID }}\",
            \"client_secret\": \"${{ secrets.PAYPAL_CLIENT_SECRET }}\",
            \"rotated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }"
        
        echo "‚úÖ PayPal credentials backed up"
    
    - name: Update Vercel Environment Variables
      run: |
        # Update production environment
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -H "Content-Type: application/json" \
          https://api.vercel.com/v1/projects/${{ secrets.VERCEL_PROJECT_ID }}/env \
          -d '{
            "key": "STRIPE_SECRET_KEY",
            "value": "${{ secrets.NEW_STRIPE_SECRET_KEY }}",
            "target": ["production"]
          }'
        
        echo "‚úÖ Vercel environment variables updated"
    
    - name: Validate New Keys
      run: |
        # Test new payment keys
        response=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer ${{ secrets.NEW_STRIPE_SECRET_KEY }}" \
          https://api.stripe.com/v1/charges)
        
        if [ "$response" -eq "200" ]; then
          echo "‚úÖ New Stripe keys validated"
        else
          echo "‚ùå Stripe key validation failed"
          exit 1
        fi

  rotate-database-credentials:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.rotate_keys == 'all' || github.event.inputs.rotate_keys == 'database_only' || github.event_name == 'schedule' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Rotate Database Password
      run: |
        echo "üîÑ Rotating database credentials..."
        
        # Generate new password
        NEW_PASSWORD=$(openssl rand -base64 32)
        
        # Update database user password (example for PostgreSQL)
        PGPASSWORD="${{ secrets.DATABASE_ADMIN_PASSWORD }}" psql \
          -h ${{ secrets.DATABASE_HOST }} \
          -U ${{ secrets.DATABASE_ADMIN_USER }} \
          -d ${{ secrets.DATABASE_NAME }} \
          -c "ALTER USER payment_api PASSWORD '$NEW_PASSWORD';"
        
        # Update connection strings in secrets
        echo "DATABASE_URL=postgresql://payment_api:$NEW_PASSWORD@${{ secrets.DATABASE_HOST }}:5432/${{ secrets.DATABASE_NAME }}" \
          >> $GITHUB_ENV
        
        echo "‚úÖ Database password rotated"
    
    - name: Update Database Secrets
      uses: google-github-actions/set-secret@v1
      with:
        name: DATABASE_URL
        value: ${{ env.DATABASE_URL }}
        repository: ${{ github.repository }}

  rotate-api-keys:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.rotate_keys == 'all' || github.event.inputs.rotate_keys == 'api_only' || github.event_name == 'schedule' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate New API Keys
      run: |
        echo "üîÑ Generating new API keys..."
        
        # Generate new API keys
        INTERNAL_API_KEY=$(openssl rand -hex 32)
        WEBHOOK_SIGNING_KEY=$(openssl rand -hex 64)
        
        # Store in environment for next steps
        echo "INTERNAL_API_KEY=$INTERNAL_API_KEY" >> $GITHUB_ENV
        echo "WEBHOOK_SIGNING_KEY=$WEBHOOK_SIGNING_KEY" >> $GITHUB_ENV
        
        echo "‚úÖ New API keys generated"
    
    - name: Update API Keys in Services
      run: |
        # Update keys in monitoring services
        curl -X PUT \
          -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
          -H "Content-Type: application/json" \
          https://api.datadoghq.com/api/v1/synthetics/variables \
          -d "{
            \"name\": \"PAYMENT_API_KEY\",
            \"value\": \"${{ env.INTERNAL_API_KEY }}\"
          }"
        
        echo "‚úÖ API keys updated in external services"

  security-audit:
    runs-on: ubuntu-latest
    needs: [rotate-payment-secrets, rotate-database-credentials, rotate-api-keys]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Audit Secret Usage
      run: |
        echo "üîç Auditing secret usage..."
        
        # Check for hardcoded secrets
        if grep -r -E "(sk_live_|pk_live_|AKIA|eyJ)" \
           --include="*.js" --include="*.html" \
           --exclude-dir=node_modules \
           --exclude-dir=.git \
           .; then
          echo "‚ùå Potential hardcoded secrets found!"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded secrets detected"
    
    - name: Check Secret Expiration
      run: |
        # Check when secrets were last rotated
        LAST_ROTATION=$(aws secretsmanager describe-secret \
          --secret-id alocubano/rotation-log \
          --query 'LastChangedDate' \
          --output text)
        
        DAYS_SINCE_ROTATION=$(( ($(date +%s) - $(date -d "$LAST_ROTATION" +%s)) / 86400 ))
        
        if [ $DAYS_SINCE_ROTATION -gt 90 ]; then
          echo "‚ö†Ô∏è Some secrets haven't been rotated in $DAYS_SINCE_ROTATION days"
        else
          echo "‚úÖ All secrets rotated within compliance window"
        fi
    
    - name: Update Rotation Log
      run: |
        aws secretsmanager put-secret-value \
          --secret-id alocubano/rotation-log \
          --secret-string "{
            \"last_rotation\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"rotated_secrets\": \"${{ github.event.inputs.rotate_keys || 'all' }}\",
            \"triggered_by\": \"${{ github.event_name }}\",
            \"status\": \"completed\"
          }"
    
    - name: Send Notification
      if: always()
      run: |
        STATUS="${{ job.status }}"
        MESSAGE="Secret rotation $STATUS for: ${{ github.event.inputs.rotate_keys || 'all' }}"
        
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d "{
            \"text\": \"$MESSAGE\",
            \"attachments\": [{
              \"color\": \"$([[ $STATUS == 'success' ]] && echo 'good' || echo 'danger')\",
              \"fields\": [{
                \"title\": \"Environment\",
                \"value\": \"Production\",
                \"short\": true
              }, {
                \"title\": \"Triggered By\",
                \"value\": \"${{ github.event_name }}\",
                \"short\": true
              }]
            }]
          }"