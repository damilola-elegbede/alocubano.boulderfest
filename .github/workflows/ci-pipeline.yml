name: "🚀 CI Pipeline"

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: ci-pipeline-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  deployments: read
  # Optional: issues: write  # For PR comments and issue creation

env:
  NODE_ENV: test
  CI: true
  NODE_VERSION: "20"
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  unit-tests:
    name: "🧪 Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased from 10 to allow for cold starts
    outputs:
      total_tests: ${{ steps.unit-test.outputs.total_tests }}
      passing_tests: ${{ steps.unit-test.outputs.passing_tests }}
      failing_tests: ${{ steps.unit-test.outputs.failing_tests }}
      duration: ${{ steps.unit-test.outputs.duration }}

    strategy:
      matrix:
        node-version: ['20.x']

    env:
      DATABASE_URL: ":memory:"
      PHASE3_PERFORMANCE_TARGET_MS: 2000
      VITEST_TEST_TIMEOUT: 10000       # Increased from 5000 to 10 seconds for unit tests
      VITEST_HOOK_TIMEOUT: 15000       # Increased from 10000 to 15 seconds for hooks
      VITEST_SETUP_TIMEOUT: 15000      # Increased from 10000 to 15 seconds for setup
      VITEST_CLEANUP_TIMEOUT: 10000    # Increased from 5000 to 10 seconds for cleanup

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: "📦 Install Dependencies"
        run: npm ci --prefer-offline --no-audit --no-fund
        env:
          NGROK_SKIP_DOWNLOAD: true

      - name: "🧪 Run Unit Tests"
        id: unit-test
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Running Unit Test Suite"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Expected: 806+ unit tests"
          echo "🎯 Performance Target: <2 seconds"
          echo "💾 Database: In-memory SQLite"
          echo "⏱️  Timeout: 15 minutes (CI buffer)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          start_time=$(date +%s%3N)
          npm test 2>&1 | tee unit-test-output.log
          test_exit_code=${PIPESTATUS[0]}
          end_time=$(date +%s%3N)
          duration=$((end_time - start_time))

          # Extract test counts - updated regex to match "Tests 902 passed" format
          total_tests=$(grep -oP '(?<=^\s*Tests\s+)\d+(?=\s+passed)' unit-test-output.log | head -1 || echo "0")
          passing_tests=$total_tests
          failing_tests=$(grep -oP '(?<=^\s*Tests\s+)\d+(?=\s+failed)' unit-test-output.log | head -1 || echo "0")

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Unit Test Results"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Tests Passed: $passing_tests"
          echo "❌ Tests Failed: $failing_tests"
          echo "📈 Total Tests: $total_tests"
          echo "⏱️  Duration: ${duration}ms"

          if [ "$duration" -lt "$PHASE3_PERFORMANCE_TARGET_MS" ]; then
            echo "🏆 EXCELLENT: Unit tests completed within 2-second target!"
          else
            echo "⚠️  WARNING: Unit tests exceeded 2-second target"
          fi

          # Set outputs for downstream jobs
          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "passing_tests=$passing_tests" >> $GITHUB_OUTPUT
          echo "failing_tests=$failing_tests" >> $GITHUB_OUTPUT
          echo "duration=${duration}ms" >> $GITHUB_OUTPUT

          exit $test_exit_code

      - name: "📤 Upload Unit Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: unit-test-output.log
          retention-days: 7

  integration-tests:
    name: "🔗 Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Increased from 1 to 5 minutes for database initialization and migration
    needs: unit-tests   # Run after unit tests pass
    outputs:
      total_tests: ${{ steps.integration-test.outputs.total_tests }}
      passing_tests: ${{ steps.integration-test.outputs.passing_tests }}
      failing_tests: ${{ steps.integration-test.outputs.failing_tests }}
      duration: ${{ steps.integration-test.outputs.duration }}

    strategy:
      matrix:
        node-version: ['20.x']

    env:
      DATABASE_URL: "file:./data/test-integration.db"
      # Test environment variables for integration tests
      STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY || 'sk_test_dummy_integration_key' }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.TEST_STRIPE_PUBLISHABLE_KEY || 'pk_test_dummy_integration_key' }}
      BREVO_API_KEY: ${{ secrets.TEST_BREVO_API_KEY || 'test_brevo_integration_key' }}
      BREVO_NEWSLETTER_LIST_ID: "1"
      BREVO_WEBHOOK_SECRET: ${{ secrets.TEST_BREVO_WEBHOOK_SECRET || 'test_webhook_secret' }}
      ADMIN_SECRET: ${{ secrets.TEST_ADMIN_SECRET || 'test_admin_secret_minimum_32_characters_for_jwt_signing' }}
      ADMIN_PASSWORD: "$2b$10$dummy.bcrypt.hash.for.integration.testing"
      INTERNAL_API_KEY: ${{ secrets.TEST_INTERNAL_API_KEY }}
      WALLET_AUTH_SECRET: ${{ secrets.TEST_WALLET_AUTH_SECRET || 'test_wallet_auth_secret_minimum_32_chars' }}
      APPLE_PASS_KEY: ${{ secrets.TEST_APPLE_PASS_KEY || 'dGVzdF9hcHBsZV9wYXNzX2tleQ==' }}
      # Integration test timeouts - increased for CI environment
      VITEST_TEST_TIMEOUT: 60000       # Increased from 30000 to 60 seconds for integration tests
      VITEST_HOOK_TIMEOUT: 45000       # Increased from 30000 to 45 seconds for hooks
      VITEST_SETUP_TIMEOUT: 20000      # Increased from 10000 to 20 seconds for setup
      VITEST_CLEANUP_TIMEOUT: 10000    # Increased from 5000 to 10 seconds for cleanup
      VITEST_REQUEST_TIMEOUT: 45000    # Increased from 30000 to 45 seconds for HTTP requests

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: "💾 Restore Dependencies Cache"
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: "📦 Install Dependencies"
        run: npm ci --prefer-offline --no-audit --no-fund
        env:
          NGROK_SKIP_DOWNLOAD: true

      - name: "🗃️ Setup SQLite Database"
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🗃️ Setting up Integration Test Database"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Create data directory if it doesn't exist
          mkdir -p data

          # Remove any existing integration test database
          rm -f data/test-integration.db

          # Run database migrations first
          echo "🔄 Running database migrations..."
          NODE_ENV=test node scripts/migrate.js

          # Verify database creation
          if [ -f "data/test-integration.db" ]; then
            echo "✅ Integration test database created successfully"
            echo "📊 Database size: $(du -h data/test-integration.db | cut -f1)"
          else
            echo "❌ Failed to create integration test database"
            exit 1
          fi

      - name: "🔗 Run Integration Tests"
        id: integration-test
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Running Integration Test Suite"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 Timeout: 5 minutes total (stage limit)"
          echo "🗃️ Database: SQLite with real file storage"
          echo "🌐 APIs: Limited external service integration"
          echo "🧪 Expected: ~30-50 integration tests"
          echo "⚙️  Environment: Test credentials configured"
          echo "⏱️  Individual Test Timeout: 60 seconds"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Record start time
          start_time=$(date +%s%3N)

          # Run integration tests with increased timeout (280 seconds, 20 seconds buffer)
          timeout 280s npm run test:integration 2>&1 | tee integration-test-output.log
          test_exit_code=${PIPESTATUS[0]}

          # Record end time
          end_time=$(date +%s%3N)
          duration=$((end_time - start_time))

          # Extract test counts from output - updated regex to match "Tests 902 passed" format
          total_tests=$(grep -oP '(?<=^\s*Tests\s+)\d+(?=\s+passed)' integration-test-output.log | head -1 || echo "0")
          passing_tests=$total_tests
          failing_tests=$(grep -oP '(?<=^\s*Tests\s+)\d+(?=\s+failed)' integration-test-output.log | head -1 || echo "0")

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Integration Test Results"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Tests Passed: $passing_tests"
          echo "❌ Tests Failed: $failing_tests"
          echo "📈 Total Tests: $total_tests"
          echo "⏱️  Duration: ${duration}ms"
          echo "🗃️ Database: File-based SQLite"

          # Timeout evaluation
          if [ "$duration" -lt 300000 ]; then
            echo "🏆 EXCELLENT: Integration tests completed within 5-minute limit!"
          else
            echo "⚠️  WARNING: Integration tests exceeded 5-minute timeout limit"
          fi

          # Set outputs for summary
          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "passing_tests=$passing_tests" >> $GITHUB_OUTPUT
          echo "failing_tests=$failing_tests" >> $GITHUB_OUTPUT
          echo "duration=${duration}ms" >> $GITHUB_OUTPUT

          exit $test_exit_code

      - name: "🧹 Database Cleanup"
        if: always()
        run: |
          echo "🧹 Cleaning up integration test database..."
          rm -f data/test-integration.db
          echo "✅ Integration test database cleanup completed"

      - name: "📤 Upload Integration Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-node-${{ matrix.node-version }}
          path: integration-test-output.log
          retention-days: 7

  # ============================================================================
  # E2E TESTS DISABLED - Handled by separate e2e-tests-preview.yml workflow
  # ============================================================================
  #
  # The E2E testing has been moved to a dedicated workflow (e2e-tests-preview.yml)
  # to prevent duplicate test execution and conflicts. The dedicated workflow:
  #
  # - Triggers on deployment_status (when Vercel deployments succeed)
  # - Uses modern Vercel Preview Deployments approach
  # - Runs 12 comprehensive Playwright tests
  # - Provides better browser matrix support
  # - Eliminates port conflicts and server management complexity
  #
  # This CI pipeline now focuses on:
  # - Unit tests (fast feedback)
  # - Integration tests (API contracts)
  # - E2E tests are handled separately and asynchronously
  #
  # To re-enable E2E tests in this pipeline, uncomment the job below and
  # update the summary job dependencies to include e2e-tests again.
  # ============================================================================
  
  # e2e-tests:
  #   name: "🎭 E2E Tests"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15  # E2E tests can take longer due to browser automation
  #   needs: [unit-tests, integration-tests]  # Run only after previous tests pass
  #   if: github.event_name == 'pull_request'  # Only run on PR events
  #   outputs:
  #     total_tests: ${{ steps.e2e-test.outputs.total_tests }}
  #     passing_tests: ${{ steps.e2e-test.outputs.passing_tests }}
  #     failing_tests: ${{ steps.e2e-test.outputs.failing_tests }}
  #     duration: ${{ steps.e2e-test.outputs.duration }}
  #     preview_url: ${{ steps.wait-for-vercel.outputs.url }}
  #
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       browser: ['chromium', 'firefox'] # Fixed: removed webkit due to CI resource constraints
  #
  #   env:
  #     # PLAYWRIGHT_BROWSERS_PATH: Fixed browser caching path for better matrix handling
  #     PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.playwright-browsers
  #     # Admin Authentication Test Variables
  #     TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
  #     ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
  #     ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
  #     # Database Configuration (using repository variable for URL)
  #     TURSO_DATABASE_URL: ${{ vars.TURSO_DATABASE_URL }}
  #     TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
  #     # Google Drive Service Account Configuration
  #     GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
  #     GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
  #     GOOGLE_DRIVE_GALLERY_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_GALLERY_FOLDER_ID }}
  #     # GitHub Token (automatically provided by GitHub Actions)
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #   steps:
  #     - name: "📥 Checkout Code"
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: "🔧 Setup Node.js"
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #         cache-dependency-path: package-lock.json
  #
  #     - name: "📦 Install Dependencies"
  #       run: npm ci --prefer-offline --no-audit --no-fund
  #       env:
  #         NGROK_SKIP_DOWNLOAD: true
  #
  #     - name: "🧩 Cache Playwright Browsers"
  #       uses: actions/cache@v4
  #       with:
  #         path: .playwright-browsers
  #         # Fixed: More specific cache key per browser for better matrix handling
  #         key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('package-lock.json') }}-v2
  #         restore-keys: |
  #           ${{ runner.os }}-playwright-${{ matrix.browser }}-
  #           ${{ runner.os }}-playwright-
  #
  #     - name: "🎭 Install Playwright Browsers"
  #       run: |
  #         # Fixed: Install only the specific browser for this matrix job
  #         echo "🔄 Installing Playwright browser: ${{ matrix.browser }}..."
  #         npx playwright install --with-deps ${{ matrix.browser }}
  #         echo "✅ Browser installed: ${{ matrix.browser }}"
  #
  #   [... rest of e2e-tests job commented out ...]

  summary:
    name: "📊 CI Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]  # Removed e2e-tests dependency
    if: always()

    steps:
      - name: "📊 Generate CI Pipeline Report"
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const unitStatus = '${{ needs.unit-tests.result }}';
            const integrationStatus = '${{ needs.integration-tests.result }}';

            // Get output values from jobs
            const unitOutputs = ${{ toJSON(needs.unit-tests.outputs) }};
            const integrationOutputs = ${{ toJSON(needs.integration-tests.outputs) }};

            const overallStatus = (unitStatus === 'success' && integrationStatus === 'success') ? '✅' : '❌';
            const statusText = (unitStatus === 'success' && integrationStatus === 'success') ? 'PASSED' : 'FAILED';

            const comment = `## ${overallStatus} CI Pipeline ${statusText}

            ### 🚀 Pipeline Results
            | Stage | Status | Tests | Duration | Details |
            |-------|--------|-------|----------|---------|
            | **Unit Tests** | ${unitStatus === 'success' ? '✅ Passed' : '❌ Failed'} | ${unitOutputs?.total_tests || 'N/A'} | ${unitOutputs?.duration || 'N/A'} | In-memory SQLite, <2s target, 15min timeout |
            | **Integration Tests** | ${integrationStatus === 'success' ? '✅ Passed' : '❌ Failed'} | ${integrationOutputs?.total_tests || 'N/A'} | ${integrationOutputs?.duration || 'N/A'} | File SQLite, <5min limit, with migrations |
            | **E2E Tests** | ⚙️ Separate Workflow | See e2e-tests-preview.yml | See separate workflow | Vercel Preview Deployments, Production-like environment |

            ### 🎯 E2E Testing Architecture
            - **Dedicated Workflow**: E2E tests run in separate \`e2e-tests-preview.yml\` workflow
            - **Trigger**: Runs on successful Vercel Preview Deployments (\`deployment_status\`)
            - **Environment**: Real production environment via Vercel Preview Deployments
            - **Tests**: 12 comprehensive Playwright tests across multiple browsers
            - **Benefits**: No duplicate execution, eliminates port conflicts, modern approach

            ### ⚙️ Pipeline Features
            - **Sequential Execution**: Each stage runs only after previous stages pass
            - **Quality Gates**: Unit and Integration tests must pass for PR approval
            - **Timeout Controls**: 15min unit, 5min integration limits
            - **Database Isolation**: In-memory (unit) → File (integration)
            - **Environment Progression**: Local → Isolated testing
            - **Dependency Caching**: NPM dependencies cached for faster execution
            - **Automated Cleanup**: Database and artifact cleanup after tests
            - **Separate E2E Testing**: Dedicated workflow prevents conflicts and duplication

            ### 🔧 Environment Configuration
            - **Node.js**: 20.x with optimized memory allocation (4GB base)
            - **Databases**: SQLite in-memory (unit) → file-based (integration)
            - **Timeouts**: Progressive timeout increases: unit (10s) → integration (60s)
            - **Caching**: NPM dependencies and Node modules
            - **Security**: Test credentials isolated from production
            - **Parsing**: Robust test output parsing for Vitest framework

            ${overallStatus === '✅' ?
              '### 🎉 All pipeline stages passed successfully!' :
              '### ⚠️ Pipeline failures detected - review workflow output'}

            ### 📋 Next Steps
            ${unitStatus !== 'success' ? '- ❌ Fix failing unit tests (subsequent stages skipped)\n' : ''}
            ${unitStatus === 'success' && integrationStatus !== 'success' ? '- ❌ Review integration test failures and database setup\n' : ''}
            ${overallStatus === '✅' ? '- ✅ Pipeline ready for deployment - unit and integration tests passed\n- 🎭 E2E tests will run automatically via separate workflow on deployment\n' : ''}

            ### 🔄 Recent Improvements
            - **E2E Separation**: E2E tests moved to dedicated workflow to prevent conflicts
            - **Modern Architecture**: Eliminated duplicate E2E execution across workflows
            - **Vercel Integration**: E2E tests use modern Preview Deployment approach
            - **Enhanced Reporting**: Clear separation between CI pipeline and E2E testing
            - **Optimized Performance**: Cached dependencies and faster execution
            - **Conflict Resolution**: Single E2E workflow prevents parallel execution issues
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CI Pipeline')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: "🔒 Deployment Quality Gate"
        if: github.event_name == 'pull_request'
        run: |
          UNIT_STATUS="${{ needs.unit-tests.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔒 Deployment Quality Gate Validation"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🧪 Unit Tests: $UNIT_STATUS"
          echo "🔗 Integration Tests: $INTEGRATION_STATUS"
          echo "🎭 E2E Tests: Handled by separate workflow"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          if [ "$UNIT_STATUS" = "success" ] && [ "$INTEGRATION_STATUS" = "success" ]; then
            echo "✅ CI PIPELINE QUALITY GATES PASSED - Ready for deployment"
            echo "🎉 This PR meets CI pipeline requirements:"
            echo "   - Unit tests: Fast feedback loop validated"
            echo "   - Integration tests: API contracts verified"
            echo "   - E2E tests: Will be validated separately via e2e-tests-preview.yml"
            echo ""
            echo "📋 E2E Testing Notes:"
            echo "   - E2E tests run in dedicated workflow (e2e-tests-preview.yml)"
            echo "   - Triggers on successful Vercel Preview Deployments"
            echo "   - Uses production-like environment for realistic testing"
            echo "   - Prevents duplicate test execution and workflow conflicts"
            exit 0
          else
            echo "❌ CI PIPELINE QUALITY GATE FAILURE - Deployment blocked"
            echo "🚫 This PR does not meet CI pipeline requirements:"
            [ "$UNIT_STATUS" != "success" ] && echo "   - Unit tests failed or skipped"
            [ "$INTEGRATION_STATUS" != "success" ] && echo "   - Integration tests failed or skipped"
            echo "📋 Action required: Fix failing tests before deployment"
            echo ""
            echo "ℹ️  Note: E2E tests are handled separately and do not block this pipeline"
            exit 1
          fi