name: "🚀 CI Pipeline"

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ci-pipeline-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  NODE_ENV: test
  CI: true
  NODE_VERSION: "20"
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  unit-tests:
    name: "🧪 Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased from 10 to allow for cold starts

    strategy:
      matrix:
        node-version: ['20.x']

    env:
      DATABASE_URL: ":memory:"
      PHASE3_PERFORMANCE_TARGET_MS: 2000
      VITEST_TEST_TIMEOUT: 10000       # Increased from 5000 to 10 seconds for unit tests
      VITEST_HOOK_TIMEOUT: 15000       # Increased from 10000 to 15 seconds for hooks
      VITEST_SETUP_TIMEOUT: 15000      # Increased from 10000 to 15 seconds for setup
      VITEST_CLEANUP_TIMEOUT: 10000    # Increased from 5000 to 10 seconds for cleanup

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: "💾 Cache Dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: "📦 Install Dependencies"
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: "🧪 Run Unit Tests"
        id: unit-test
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Running Unit Test Suite"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Expected: 806+ unit tests"
          echo "🎯 Performance Target: <2 seconds"
          echo "💾 Database: In-memory SQLite"
          echo "⏱️  Timeout: 15 minutes (CI buffer)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          start_time=$(date +%s%3N)
          npm test 2>&1 | tee unit-test-output.log
          test_exit_code=${PIPESTATUS[0]}
          end_time=$(date +%s%3N)
          duration=$((end_time - start_time))

          # Extract test counts
          total_tests=$(grep -oP '\d+(?= passing)' unit-test-output.log | head -1 || echo "0")
          passing_tests=$(grep -oP '\d+(?= passing)' unit-test-output.log | head -1 || echo "0")
          failing_tests=$(grep -oP '\d+(?= failing)' unit-test-output.log | head -1 || echo "0")

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Unit Test Results"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Tests Passed: $passing_tests"
          echo "❌ Tests Failed: $failing_tests"
          echo "📈 Total Tests: $total_tests"
          echo "⏱️  Duration: ${duration}ms"

          if [ "$duration" -lt "$PHASE3_PERFORMANCE_TARGET_MS" ]; then
            echo "🏆 EXCELLENT: Unit tests completed within 2-second target!"
          else
            echo "⚠️  WARNING: Unit tests exceeded 2-second target"
          fi

          # Set outputs for downstream jobs
          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "passing_tests=$passing_tests" >> $GITHUB_OUTPUT
          echo "failing_tests=$failing_tests" >> $GITHUB_OUTPUT
          echo "duration=${duration}ms" >> $GITHUB_OUTPUT

          exit $test_exit_code

      - name: "📤 Upload Unit Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: unit-test-output.log
          retention-days: 7

  integration-tests:
    name: "🔗 Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 3  # Increased from 1 to 3 minutes (180 seconds) for database initialization and migration
    needs: unit-tests   # Run after unit tests pass

    strategy:
      matrix:
        node-version: ['20.x']

    env:
      DATABASE_URL: "data/test-integration.db"
      # Test environment variables for integration tests
      STRIPE_SECRET_KEY: "sk_test_dummy_integration_key"
      STRIPE_PUBLISHABLE_KEY: "pk_test_dummy_integration_key"
      BREVO_API_KEY: "test_brevo_integration_key"
      BREVO_NEWSLETTER_LIST_ID: "1"
      BREVO_WEBHOOK_SECRET: "test_webhook_secret"
      ADMIN_SECRET: "test_admin_secret_minimum_32_characters_for_jwt_signing"
      ADMIN_PASSWORD: "$2b$10$dummy.bcrypt.hash.for.integration.testing"
      INTERNAL_API_KEY: "test_internal_api_key_for_integration"
      WALLET_AUTH_SECRET: "test_wallet_auth_secret_minimum_32_chars"
      # Integration test timeouts - increased for CI environment
      VITEST_TEST_TIMEOUT: 60000       # Increased from 30000 to 60 seconds for integration tests
      VITEST_HOOK_TIMEOUT: 45000       # Increased from 30000 to 45 seconds for hooks
      VITEST_SETUP_TIMEOUT: 20000      # Increased from 10000 to 20 seconds for setup
      VITEST_CLEANUP_TIMEOUT: 10000    # Increased from 5000 to 10 seconds for cleanup
      VITEST_REQUEST_TIMEOUT: 45000    # Increased from 30000 to 45 seconds for HTTP requests

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: "💾 Restore Dependencies Cache"
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: "📦 Install Dependencies"
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: "🗃️ Setup SQLite Database"
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🗃️ Setting up Integration Test Database"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Create data directory if it doesn't exist
          mkdir -p data
          
          # Remove any existing integration test database
          rm -f data/test-integration.db
          
          # Run database migrations
          echo "🔄 Running database migrations..."
          npm run migrate:up
          
          # Verify database creation
          if [ -f "data/test-integration.db" ]; then
            echo "✅ Integration test database created successfully"
            echo "📊 Database size: $(du -h data/test-integration.db | cut -f1)"
          else
            echo "❌ Failed to create integration test database"
            exit 1
          fi

      - name: "🔗 Run Integration Tests"
        id: integration-test
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Running Integration Test Suite"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 Timeout: 180 seconds total (stage limit)"
          echo "🗃️ Database: SQLite with real file storage"
          echo "🌐 APIs: Limited external service integration"
          echo "🧪 Expected: ~30-50 integration tests"
          echo "⚙️  Environment: Test credentials configured"
          echo "⏱️  Individual Test Timeout: 60 seconds"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Record start time
          start_time=$(date +%s%3N)

          # Run integration tests with increased timeout (160 seconds, 20 seconds buffer)
          timeout 160s npm run test:integration 2>&1 | tee integration-test-output.log
          test_exit_code=${PIPESTATUS[0]}

          # Record end time
          end_time=$(date +%s%3N)
          duration=$((end_time - start_time))

          # Extract test counts from output
          total_tests=$(grep -oP '\d+(?= passed)' integration-test-output.log | head -1 || echo "0")
          passing_tests=$(grep -oP '\d+(?= passed)' integration-test-output.log | head -1 || echo "0")
          failing_tests=$(grep -oP '\d+(?= failed)' integration-test-output.log | head -1 || echo "0")

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Integration Test Results"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Tests Passed: $passing_tests"
          echo "❌ Tests Failed: $failing_tests"
          echo "📈 Total Tests: $total_tests"
          echo "⏱️  Duration: ${duration}ms"
          echo "🗃️ Database: File-based SQLite"

          # Timeout evaluation
          if [ "$duration" -lt 180000 ]; then
            echo "🏆 EXCELLENT: Integration tests completed within 180-second limit!"
          else
            echo "⚠️  WARNING: Integration tests exceeded 180-second timeout limit"
          fi

          # Set outputs for summary
          echo "total_tests=$total_tests" >> $GITHUB_OUTPUT
          echo "passing_tests=$passing_tests" >> $GITHUB_OUTPUT
          echo "failing_tests=$failing_tests" >> $GITHUB_OUTPUT
          echo "duration=${duration}ms" >> $GITHUB_OUTPUT

          exit $test_exit_code

      - name: "🧹 Database Cleanup"
        if: always()
        run: |
          echo "🧹 Cleaning up integration test database..."
          rm -f data/test-integration.db
          echo "✅ Integration test database cleanup completed"

      - name: "📤 Upload Integration Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-node-${{ matrix.node-version }}
          path: integration-test-output.log
          retention-days: 7

  summary:
    name: "📊 CI Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: "📊 Generate CI Pipeline Report"
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const unitStatus = '${{ needs.unit-tests.result }}';
            const integrationStatus = '${{ needs.integration-tests.result }}';
            
            // Get output values from jobs
            const unitOutputs = ${{ toJSON(needs.unit-tests.outputs) }};
            const integrationOutputs = ${{ toJSON(needs.integration-tests.outputs) }};

            const overallStatus = (unitStatus === 'success' && integrationStatus === 'success') ? '✅' : '❌';
            const statusText = (unitStatus === 'success' && integrationStatus === 'success') ? 'PASSED' : 'FAILED';

            const comment = `## ${overallStatus} CI Pipeline ${statusText}

            ### 🚀 Pipeline Results
            | Stage | Status | Tests | Duration | Details |
            |-------|--------|-------|----------|---------|
            | **Unit Tests** | ${unitStatus === 'success' ? '✅ Passed' : '❌ Failed'} | ${unitOutputs?.total_tests || 'N/A'} | ${unitOutputs?.duration || 'N/A'} | In-memory SQLite, <2s target, 15min timeout |
            | **Integration Tests** | ${integrationStatus === 'success' ? '✅ Passed' : '❌ Failed'} | ${integrationOutputs?.total_tests || 'N/A'} | ${integrationOutputs?.duration || 'N/A'} | File SQLite, <180s limit, 3min timeout |

            ### ⚙️ Pipeline Features
            - **Sequential Execution**: Integration tests run only after unit tests pass
            - **Timeout Controls**: 180-second hard limit for integration stage (increased from 60s)
            - **Database Isolation**: Separate in-memory (unit) and file (integration) databases
            - **Dependency Caching**: NPM dependencies cached for performance
            - **Environment Variables**: Complete test credentials configured
            - **Automatic Cleanup**: Database cleanup after integration tests

            ### 🔧 Environment Configuration
            - **Node.js**: 20.x with optimized memory allocation (4GB)
            - **Database**: SQLite in-memory (unit) / file-based (integration)
            - **Timeouts**: Vitest configured with CI-appropriate timeouts (increased for stability)
            - **Caching**: NPM dependencies cached between jobs
            - **Security**: Test credentials isolated from production

            ${overallStatus === '✅' ?
              '### 🎉 All pipeline stages passed successfully!' :
              '### ⚠️ Pipeline failures detected - review workflow output'}

            ### 📋 Next Steps
            ${unitStatus !== 'success' ? '- ❌ Fix failing unit tests (integration tests skipped)\n' : ''}
            ${unitStatus === 'success' && integrationStatus !== 'success' ? '- ❌ Review integration test failures and database setup\n' : ''}
            ${overallStatus === '✅' ? '- ✅ Pipeline ready for deployment\n' : ''}

            ### 🔄 Recent Timeout Improvements
            - **Integration Tests**: Increased from 60s to 180s total timeout
            - **Individual Test Timeouts**: Increased Vitest timeouts for CI environment
            - **Database Operations**: More time for migration and initialization
            - **HTTP Requests**: Extended timeout for external service calls
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CI Pipeline')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }