---
name: 📦 Reusable NPM Setup & Caching

# Reusable workflow for standardized NPM setup with aggressive caching optimizations
# Implements Wave 1 optimizations: smart caching, CI configuration, and parallel dependency resolution
# Usage: Standardizes Node.js setup across all workflows with consistent performance optimizations

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to setup'
        required: false
        type: string
        default: '20'
      cache-strategy:
        description: 'NPM cache strategy level'
        required: false
        type: string
        default: 'aggressive'  # standard, aggressive, minimal
      install-dependencies:
        description: 'Auto-install dependencies after setup'
        required: false
        type: boolean
        default: true
      working-directory:
        description: 'Working directory for npm operations'
        required: false
        type: string
        default: '.'
      optimization-profile:
        description: 'NPM optimization profile'
        required: false
        type: string
        default: 'ci'  # ci, development, production
      skip-lockfile-check:
        description: 'Skip package-lock.json validation'
        required: false
        type: boolean
        default: false
      memory-limit:
        description: 'Node.js memory limit (in MB)'
        required: false
        type: string
        default: '3072'
    outputs:
      cache-hit:
        description: 'Whether npm cache was hit'
        value: ${{ jobs.npm-setup.outputs.cache-hit }}
      node-version:
        description: 'Resolved Node.js version'
        value: ${{ jobs.npm-setup.outputs.node-version }}
      npm-version:
        description: 'NPM version used'
        value: ${{ jobs.npm-setup.outputs.npm-version }}
      install-time:
        description: 'Time taken for dependency installation'
        value: ${{ jobs.npm-setup.outputs.install-time }}

env:
  # Dynamic Node.js memory optimization
  NODE_OPTIONS: >-
    --max-old-space-size=${{ inputs.memory-limit }}
    --max-http-header-size=8192
  # NPM performance environment variables
  NPM_CONFIG_LOGLEVEL: warn
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false
  NPM_CONFIG_CACHE: ${{ github.workspace }}/.npm-cache

jobs:
  npm-setup:
    name: 📦 NPM Setup (${{ inputs.cache-strategy }} cache)
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      cache-hit: ${{ steps.npm-cache.outputs.cache-hit }}
      node-version: ${{ steps.node-setup.outputs.node-version }}
      npm-version: ${{ steps.npm-version.outputs.npm-version }}
      install-time: ${{ steps.timing.outputs.install-time }}
    
    steps:
      - name: ⏱️ Start Timing
        id: timing-start
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: 🔧 Setup Node.js ${{ inputs.node-version }}
        id: node-setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
          check-latest: false
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📋 Capture Node Version Info
        id: npm-version
        working-directory: ${{ inputs.working-directory }}
        run: |
          NODE_VERSION=$(node --version)
          NPM_VERSION=$(npm --version)
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "npm-version=$NPM_VERSION" >> $GITHUB_OUTPUT
          echo "🔧 Node.js: $NODE_VERSION"
          echo "📦 NPM: $NPM_VERSION"

      - name: 🔍 Validate Package Lock
        if: inputs.skip-lockfile-check != true
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "⚠️ Warning: package-lock.json not found"
            echo "Creating package-lock.json..."
            npm install --package-lock-only
          else
            echo "✅ package-lock.json found"
            
            # Validate lockfile integrity
            npm ls --depth=0 >/dev/null || {
              echo "⚠️ Package lock validation failed, attempting fix..."
              rm -f package-lock.json
              npm install --package-lock-only
            }
          fi

      - name: 💾 Enhanced NPM Cache
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.npm-cache
            ${{ inputs.working-directory }}/node_modules
          key: |
            npm-${{ inputs.cache-strategy }}-${{ runner.os }}-node${{ inputs.node-version }}-${{ hashFiles(format('{0}/package-lock.json', inputs.working-directory)) }}-v3
          restore-keys: |
            npm-${{ inputs.cache-strategy }}-${{ runner.os }}-node${{ inputs.node-version }}-
            npm-${{ inputs.cache-strategy }}-${{ runner.os }}-
            npm-standard-${{ runner.os }}-node${{ inputs.node-version }}-

      - name: ⚙️ Configure NPM Optimizations
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "🔧 Applying NPM optimizations for ${{ inputs.optimization-profile }} profile..."
          
          # Create optimized .npmrc based on strategy and profile
          case "${{ inputs.cache-strategy }}" in
            "aggressive")
              cat > .npmrc.ci << 'EOF'
          # Aggressive CI optimization
          maxsockets=20
          fetch-retries=5
          fetch-timeout=120000
          fetch-retry-mintimeout=10000
          fetch-retry-maxtimeout=60000
          prefer-offline=true
          prefer-dedupe=true
          no-audit=true
          no-fund=true
          progress=false
          loglevel=warn
          cache-min=3600000
          cache-max=86400000
          # Network optimizations
          registry=https://registry.npmjs.org/
          strict-ssl=true
          # Performance settings
          package-lock-only=false
          save-exact=true
          EOF
              ;;
            "standard")
              cat > .npmrc.ci << 'EOF'
          # Standard CI optimization  
          maxsockets=15
          fetch-retries=3
          fetch-timeout=60000
          prefer-offline=true
          no-audit=true
          no-fund=true
          progress=false
          loglevel=warn
          cache-min=86400
          EOF
              ;;
            "minimal")
              cat > .npmrc.ci << 'EOF'
          # Minimal CI optimization
          progress=false
          loglevel=error
          no-audit=true
          no-fund=true
          EOF
              ;;
          esac
          
          echo "✅ NPM configuration applied: ${{ inputs.cache-strategy }} strategy"

      - name: 📦 Install Dependencies (Optimized)
        if: inputs.install-dependencies == true
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "📦 Installing dependencies with optimizations..."
          
          INSTALL_START=$(date +%s)
          
          if [ -f ".npmrc.ci" ]; then
            echo "📋 Using optimized CI configuration"
            cp .npmrc.ci .npmrc
          fi
          
          # Use CI installation with optimization flags
          if [ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]; then
            echo "⚡ Cache hit detected - using cached node_modules"
            # Verify cache integrity
            if [ -d "node_modules" ] && npm ls --depth=0 >/dev/null 2>&1; then
              echo "✅ Cached node_modules valid, skipping installation"
              INSTALL_END=$(date +%s)
              INSTALL_TIME=$((INSTALL_END - INSTALL_START))
              echo "install-time=${INSTALL_TIME}s (cached)" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "⚠️ Cached node_modules invalid, proceeding with installation"
            fi
          fi
          
          # Progressive installation strategy
          case "${{ inputs.optimization-profile }}" in
            "ci")
              npm ci --verbose
              ;;
            "production") 
              npm ci --only=production --verbose
              ;;
            "development")
              npm install --verbose
              ;;
            *)
              npm ci --verbose
              ;;
          esac
          
          INSTALL_END=$(date +%s)
          INSTALL_TIME=$((INSTALL_END - INSTALL_START))
          echo "install-time=${INSTALL_TIME}s" >> $GITHUB_OUTPUT
          echo "✅ Dependencies installed in ${INSTALL_TIME}s"
        env:
          # Additional CI optimizations
          CI: true
          CYPRESS_INSTALL_BINARY: 0
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: 🔍 Post-Install Validation
        if: inputs.install-dependencies == true
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "🔍 Validating installation..."
          
          # Basic validation
          if [ ! -d "node_modules" ]; then
            echo "❌ node_modules directory not found"
            exit 1
          fi
          
          # Package validation
          npm ls --depth=0 --only=prod >/dev/null || {
            echo "⚠️ Warning: Some packages may have issues"
            npm ls --depth=0 --only=prod || true
          }
          
          # Security audit (non-blocking for performance)
          if [ "${{ inputs.cache-strategy }}" != "minimal" ]; then
            npm audit --audit-level=high --only=prod || {
              echo "⚠️ Security vulnerabilities detected (non-blocking)"
            }
          fi
          
          echo "✅ Installation validation completed"

      - name: 📊 Generate Setup Summary
        run: |
          echo "# 📦 NPM Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Node.js Version | ${{ steps.npm-version.outputs.node-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Version | ${{ steps.npm-version.outputs.npm-version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Strategy | ${{ inputs.cache-strategy }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Hit | ${{ steps.npm-cache.outputs.cache-hit && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Optimization Profile | ${{ inputs.optimization-profile }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory Limit | ${{ inputs.memory-limit }}MB |" >> $GITHUB_STEP_SUMMARY
          echo "| Working Directory | ${{ inputs.working-directory }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.install-dependencies }}" == "true" ]; then
            echo "| Install Time | ${{ steps.timing.outputs.install-time || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔧 Optimizations Applied:**" >> $GITHUB_STEP_SUMMARY
          echo "- Enhanced dependency caching" >> $GITHUB_STEP_SUMMARY
          echo "- Progressive installation strategy" >> $GITHUB_STEP_SUMMARY
          echo "- Memory optimization (${{ inputs.memory-limit }}MB)" >> $GITHUB_STEP_SUMMARY
          echo "- Network timeout optimization" >> $GITHUB_STEP_SUMMARY
          echo "- Audit and fund disabled for performance" >> $GITHUB_STEP_SUMMARY

      - name: ⏱️ Calculate Total Time
        id: timing
        run: |
          START_TIME=${{ steps.timing-start.outputs.start-time }}
          END_TIME=$(date +%s)
          TOTAL_TIME=$((END_TIME - START_TIME))
          echo "total-time=${TOTAL_TIME}s" >> $GITHUB_OUTPUT
          echo "⏱️ Total NPM setup time: ${TOTAL_TIME}s"