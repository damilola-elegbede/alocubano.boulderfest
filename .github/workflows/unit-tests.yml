name: "🧪 Unit Tests"

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: unit-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  NODE_ENV: test
  CI: true
  NODE_VERSION: "20.19.5"
  NODE_OPTIONS: "--max-old-space-size=4096"
  npm_config_build_from_source: "false"
  # Consolidated environment variables to reduce duplication
  NGROK_SKIP_DOWNLOAD: ${{ vars.NGROK_SKIP_DOWNLOAD || '1' }}
  PYTHON: ${{ vars.PYTHON_PATH || '/usr/bin/python3' }}

jobs:
  test:
    name: "🧪 Unit Tests (Node ${{ matrix.node-version }})"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      # FIXED: Proper fail-fast configuration
      fail-fast: false
      matrix:
        node-version: ['22.x', '20.x']

    env:
      DATABASE_URL: ":memory:"
      PHASE3_PERFORMANCE_TARGET_MS: ${{ vars.PHASE3_PERFORMANCE_TARGET_MS || '2000' }}
      # Increased timeouts for stability (matching local config)
      VITEST_TEST_TIMEOUT: ${{ vars.VITEST_TEST_TIMEOUT || '15000' }}
      VITEST_HOOK_TIMEOUT: ${{ vars.VITEST_HOOK_TIMEOUT || '18000' }}
      VITEST_SETUP_TIMEOUT: ${{ vars.VITEST_SETUP_TIMEOUT || '20000' }}
      VITEST_CLEANUP_TIMEOUT: ${{ vars.VITEST_CLEANUP_TIMEOUT || '10000' }}
      # Critical API secrets configuration - REQUIRED (no fallbacks for unit/integration tests)
      # These must match local .env.vercel for consistent behavior
      QR_SECRET_KEY: ${{ secrets.QR_SECRET_KEY }}
      ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
      WALLET_AUTH_SECRET: ${{ secrets.WALLET_AUTH_SECRET }}
      APPLE_PASS_KEY: ${{ secrets.APPLE_PASS_KEY }}
      INTERNAL_API_KEY: ${{ secrets.INTERNAL_API_KEY }}
      TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      REGISTRATION_SECRET: ${{ secrets.REGISTRATION_SECRET }}
      # Brevo service configuration - required for unit tests
      BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
      BREVO_NEWSLETTER_LIST_ID: ${{ vars.BREVO_NEWSLETTER_LIST_ID || '1' }}
      BREVO_WEBHOOK_SECRET: ${{ secrets.BREVO_WEBHOOK_SECRET }}

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "🔐 Validate Required Secrets"
        run: |
          echo "🔍 Checking secrets configuration for unit tests..."
          missing_secrets=()

          # Unit tests use in-memory SQLite and test defaults
          # Only validate truly critical secrets that can't be defaulted
          [ -z "$BREVO_API_KEY" ] && missing_secrets+=("BREVO_API_KEY")
          [ -z "$BREVO_WEBHOOK_SECRET" ] && missing_secrets+=("BREVO_WEBHOOK_SECRET")

          if [ ${#missing_secrets[@]} -gt 0 ]; then
            echo "⚠️  Warning: Missing secrets: ${missing_secrets[*]}"
            echo "   Some email-related unit tests may be skipped"
            echo ""
            echo "📋 Optional: Configure these secrets in GitHub repository settings:"
            echo "   Settings → Secrets and variables → Actions → Repository secrets"
          else
            echo "✅ All critical secrets configured for unit tests"
          fi

          # NOTE: QR_SECRET_KEY, REGISTRATION_SECRET, INTERNAL_API_KEY are optional
          # Unit tests set their own test secrets in beforeEach/setup hooks

      - name: "🔧 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "📦 Install Dependencies"
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'
          PUPPETEER_SKIP_DOWNLOAD: '1'
          SKIP_HEAVYWEIGHT_DOWNLOADS: '1'
        run: |
          echo "📦 Installing minimal dependencies for unit tests..."

          # Install with npm ci, skipping ALL postinstall scripts to prevent ngrok download failures
          # ngrok's postinstall tries to download binaries which fails with HTTP 503 in CI
          npm ci --ignore-scripts --prefer-offline --no-audit --no-fund

          # Only install the specific LibSQL binary we need
          if [ "$RUNNER_OS" = "Linux" ]; then
            if [ ! -d "node_modules/@libsql/linux-x64-gnu" ]; then
              echo "🔧 Installing LibSQL Linux binary..."
              npm install @libsql/linux-x64-gnu@0.5.22 --no-save --no-audit --ignore-scripts
            fi
          fi

          echo "✅ Minimal dependencies installed (skipped postinstall scripts)"

      - name: "🧹 Optimize for Unit Tests"
        run: |
          echo "🧹 Removing unnecessary heavyweight dependencies..."
          # Remove packages not needed for unit tests (saves ~77MB)
          rm -rf node_modules/playwright* 2>/dev/null || true
          rm -rf node_modules/lighthouse* 2>/dev/null || true
          rm -rf node_modules/ngrok* 2>/dev/null || true
          rm -rf node_modules/vercel 2>/dev/null || true
          rm -rf node_modules/@axe-core 2>/dev/null || true
          rm -rf node_modules/puppeteer* 2>/dev/null || true
          echo "🎯 Optimized for unit tests"

      - name: "🧪 Run Unit Tests"
        id: test
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Running Unit Test Suite"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Expected: 800+ unit tests"
          echo "🎯 Performance Target: <2 seconds"
          echo "💾 Database: In-memory SQLite"
          echo "⏱️  Timeout: 15 minutes (CI buffer)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          start_time=$(date +%s%3N)

          # CRITICAL FIX: Use Vitest's outputFile to separate JSON from verbose output
          # - Verbose output goes to stdout → tee → unit-test-output.log
          # - JSON output goes directly to unit-test-results-raw.json (clean, no mixing)
          set +e  # Allow command to fail without stopping script
          CI=true npm test -- --reporter=verbose --reporter=json --outputFile=./unit-test-results-raw.json --no-color 2>&1 | tee unit-test-output.log
          test_exit_code=$?
          set -e  # Re-enable exit on error

          end_time=$(date +%s%3N)
          duration=$((end_time - start_time))

          # FIXED: Improved test parsing using JSON output + robust fallback patterns
          echo "🔍 Parsing test results using JSON reporter with fallbacks..."

          # Method 1: Parse JSON output (most reliable)
          if [ -f "unit-test-results-raw.json" ] && jq empty unit-test-results-raw.json 2>/dev/null; then
            echo "✅ Using JSON test results"
            total_tests=$(jq -r '.numTotalTests // 0' unit-test-results-raw.json 2>/dev/null || echo "0")
            passing_tests=$(jq -r '.numPassedTests // 0' unit-test-results-raw.json 2>/dev/null || echo "0")
            failing_tests=$(jq -r '.numFailedTests // 0' unit-test-results-raw.json 2>/dev/null || echo "0")
            parsing_method="json_primary"
          else
            echo "🔄 JSON parsing failed, using robust fallback patterns..."

            # Method 2: Standard Vitest output pattern "Tests X passed"
            passing_tests=$(grep -E "Tests[[:space:]]+[0-9]+[[:space:]]+passed" unit-test-output.log | sed -E "s/.*Tests[[:space:]]+([0-9]+)[[:space:]]+passed.*/\1/" | head -1 || echo "0")
            failing_tests=$(grep -E "Tests[[:space:]]+[0-9]+[[:space:]]+failed" unit-test-output.log | sed -E "s/.*Tests[[:space:]]+([0-9]+)[[:space:]]+failed.*/\1/" | head -1 || echo "0")

            # Method 3: Alternative patterns if standard fails
            if [ "$passing_tests" = "0" ] && [ "$failing_tests" = "0" ]; then
              echo "🔄 Trying alternative test result patterns..."
              passing_tests=$(grep -E "[0-9]+[[:space:]]+tests?[[:space:]]+passed" unit-test-output.log | sed -E "s/.*([0-9]+)[[:space:]]+tests?[[:space:]]+passed.*/\1/" | head -1 || echo "0")
              failing_tests=$(grep -E "[0-9]+[[:space:]]+tests?[[:space:]]+failed" unit-test-output.log | sed -E "s/.*([0-9]+)[[:space:]]+tests?[[:space:]]+failed.*/\1/" | head -1 || echo "0")
            fi

            # Method 4: Checkmark patterns
            if [ "$passing_tests" = "0" ] && [ "$failing_tests" = "0" ]; then
              echo "🔄 Trying checkmark patterns..."
              passing_tests=$(grep -E "✓[[:space:]]+[0-9]+[[:space:]]+tests?" unit-test-output.log | sed -E "s/.*✓[[:space:]]+([0-9]+)[[:space:]]+tests?.*/\1/" | head -1 || echo "0")
              failing_tests=$(grep -E "✗[[:space:]]+[0-9]+[[:space:]]+tests?" unit-test-output.log | sed -E "s/.*✗[[:space:]]+([0-9]+)[[:space:]]+tests?.*/\1/" | head -1 || echo "0")
            fi

            # Method 5: Final summary pattern parsing
            if [ "$passing_tests" = "0" ] && [ "$failing_tests" = "0" ]; then
              echo "🔄 Trying final summary patterns..."
              # Look for summary line like "Test Files  2 passed, 2 total"
              passing_tests=$(grep -E "Test Files[[:space:]]+[0-9]+" unit-test-output.log | sed -E "s/.*Test Files[[:space:]]+([0-9]+)[[:space:]]+passed.*/\1/" | head -1 || echo "0")
              # Look for any numeric patterns in test results
              if [ "$passing_tests" = "0" ]; then
                passing_tests=$(grep -oE "[0-9]+[[:space:]]*passed" unit-test-output.log | grep -oE "[0-9]+" | head -1 || echo "0")
              fi
              failing_tests=$(grep -oE "[0-9]+[[:space:]]*failed" unit-test-output.log | grep -oE "[0-9]+" | head -1 || echo "0")
            fi

            # Calculate total as sum
            total_tests=$((passing_tests + failing_tests))
            parsing_method="fallback_patterns"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 Unit Test Results"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Tests Passed: $passing_tests"
          echo "❌ Tests Failed: $failing_tests"
          echo "📈 Total Tests: $total_tests"
          echo "⏱️  Duration: ${duration}ms"
          echo "🔍 Parsing Method: $parsing_method"

          # Performance evaluation with environment variable fallback
          performance_target=${PHASE3_PERFORMANCE_TARGET_MS:-2000}
          if [ "$duration" -lt "$performance_target" ]; then
            echo "🏆 EXCELLENT: Unit tests completed within ${performance_target}ms target!"
          else
            echo "⚠️  WARNING: Unit tests exceeded ${performance_target}ms target"
          fi

          # CRITICAL FIX: Explicit exit code based on test failures
          # Don't just pass through test_exit_code - validate it matches our parsed results
          if [ "$failing_tests" -gt 0 ]; then
            echo ""
            echo "❌ TESTS FAILED: $failing_tests test(s) failed"
            echo "   Exiting with code 1"
            exit 1
          elif [ "$test_exit_code" -ne 0 ]; then
            echo ""
            echo "❌ TEST RUNNER EXITED WITH ERROR: exit code $test_exit_code"
            echo "   Even though no test failures were detected"
            exit $test_exit_code
          else
            echo ""
            echo "✅ ALL TESTS PASSED"
            exit 0
          fi

      - name: "📤 Upload Test Results"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: unit-test-output.log
          retention-days: 7

      - name: "📊 Report to PR"
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read output with fallback
            let output = '';
            try {
              output = fs.readFileSync('unit-test-output.log', 'utf8');
            } catch (error) {
              output = `⚠️  Log file not found: ${error.message}`;
            }

            const nodeVersion = '${{ matrix.node-version }}';
            const status = '${{ job.status }}';

            const statusIcon = status === 'success' ? '✅' : '❌';
            const statusText = status === 'success' ? 'PASSED' : 'FAILED';

            const comment = `## ${statusIcon} Unit Tests ${statusText} (Node ${nodeVersion})

            ### 🛠️ Wave 2 Improvements Applied
            - **✅ JSON Test Parsing**: Primary JSON reporter with 5-level fallback system
            - **✅ Robust Pattern Matching**: Multiple regex patterns for reliable result extraction
            - **✅ Performance Monitoring**: Built-in performance target validation
            - **✅ Environment Resilience**: Comprehensive default values for all configurations

            <details>
            <summary>View Test Output</summary>

            \`\`\`
            ${output.slice(-3000)}
            \`\`\`

            </details>
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes(`Unit Tests`) &&
              comment.body.includes(`Node ${nodeVersion}`)
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }