name: "Main Branch - Post-Merge Validation"

on:
  push:
    branches: [main]
  workflow_dispatch:

# FIXED: Enhanced concurrency control to prevent conflicts with other main branch workflows
concurrency:
  group: post-merge-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: false

env:
  NODE_ENV: test
  CI: true
  # Memory limit for Node.js to prevent OOM errors
  NODE_OPTIONS: "--max-old-space-size=1024"
  # Consistent database configuration
  DATABASE_URL: "file:./data/ci-test.db"
  TURSO_DATABASE_URL: "file:./data/ci-test.db"
  # Test secrets from GitHub Secrets (not hardcoded)
  BREVO_API_KEY: ${{ secrets.BREVO_API_KEY_TEST || '' }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST || '' }}
  ADMIN_SECRET: ${{ secrets.ADMIN_SECRET_TEST || '' }}
  # Vercel configuration for production-like testing
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID || '' }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID || '' }}

jobs:
  validate:
    name: Post-Merge Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]  # Single LTS version for consistency
        # Remove sharding for only 27 tests
      fail-fast: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Calculate Dynamic Port
        id: port
        run: |
          # Use standard port 3000 for Vercel Dev
          PORT=3000
          echo "CI_PORT=$PORT" >> $GITHUB_ENV
          echo "port=$PORT" >> $GITHUB_OUTPUT
          echo "Using port: $PORT (Vercel Dev)"

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm ls --depth=0

      - name: 🚀 Install Vercel CLI
        run: |
          echo "📦 Installing Vercel CLI for production-like testing..."
          npm install -g vercel@latest
          
          # Verify installation
          vercel --version
          echo "✅ Vercel CLI installed successfully"

      # ngrok removed from CI for security - only use in local development

      - name: 🧹 Clean up any existing processes
        run: |
          # Find and gracefully terminate processes on port 3000
          if lsof -ti:$CI_PORT > /dev/null 2>&1; then
            lsof -ti:$CI_PORT | xargs kill -TERM 2>/dev/null || true
            sleep 2
            # Force kill only if still running
            lsof -ti:$CI_PORT | xargs kill -9 2>/dev/null || true
          fi
          # Gracefully terminate any orphaned Vercel processes
          pkill -TERM -f "vercel dev" 2>/dev/null || true
          pkill -TERM -f "next-server" 2>/dev/null || true
          sleep 2

      - name: 📁 Create database directory
        run: |
          # Ensure data directory exists for SQLite database
          mkdir -p data
          echo "✅ Created data directory for database"

      - name: 🚀 Start Vercel Dev Server
        id: server
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Starting Vercel dev server on port $CI_PORT..."

          # Export port for server to use
          export PORT=$CI_PORT

          # Start Vercel dev server directly for CI (bypass complex wrappers)
          node scripts/vercel-dev-ci.js &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "server_pid=$SERVER_PID" >> $GITHUB_OUTPUT

          # Store PID for cleanup
          echo $SERVER_PID > /tmp/server.pid

          # Wait for server to be fully ready (not just health endpoint)
          echo "Waiting for Vercel dev server initialization..."
          MAX_ATTEMPTS=30
          ATTEMPT=0

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # Check if server is responding (don't use -f flag which fails on non-2xx)
            if curl -s "http://localhost:$CI_PORT/api/health/check" >/dev/null 2>&1; then
              echo "✅ Vercel dev server is responding"

              # Server is up and responding, that's enough for CI tests
              # The health endpoint may report unhealthy if services aren't configured
              # but the server is still usable for testing
              break
            fi

            ATTEMPT=$((ATTEMPT + 1))
            echo "Waiting for Vercel dev server... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
            sleep 2
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "❌ Vercel dev server failed to start within timeout"
            cat /tmp/vercel-dev.log || true
            exit 1
          fi

          # Warm up serverless functions BEFORE tests
          echo "🔥 Warming up serverless functions..."
          for endpoint in health/check health/database gallery featured-photos; do
            for i in {1..3}; do
              curl -f "http://localhost:$CI_PORT/api/$endpoint" >/dev/null 2>&1 || true
              sleep 0.5
            done
          done

          echo "✅ Vercel dev server ready on port $CI_PORT (production-like environment)"

      # ngrok removed from CI workflow for security reasons
      # Public tunnel exposure in CI is a security risk

      - name: 🧪 Run Streamlined Tests
        id: tests
        env:
          TEST_BASE_URL: "http://localhost:${{ steps.port.outputs.port }}"
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo "Running tests against Vercel dev server at localhost:$CI_PORT"
          echo "Testing in production-like serverless environment"

          # Run the streamlined test suite once
          npm test

          # Capture test results
          TEST_EXIT_CODE=$?
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ Tests failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi

          echo "✅ All tests passed successfully with Vercel dev server"

      # DISABLED: Security and payment tests disabled for unit-only mode
      # - name: 🔍 Run Security Tests
      #   if: success()
      #   env:
      #     TEST_BASE_URL: "http://localhost:${{ steps.port.outputs.port }}"
      #   run: |
      #     echo "Running security validation tests with Vercel dev server..."
      #     echo "Security tests integrated into basic-validation.test.js (SQL injection, XSS)"
      #     npx vitest run tests/basic-validation.test.js --config tests/vitest.config.js -t "SQL injection"

      # - name: 💳 Run Payment Tests
      #   if: success()
      #   env:
      #     TEST_BASE_URL: "http://localhost:${{ steps.port.outputs.port }}"
      #   run: |
      #     echo "Running payment validation tests with Vercel dev server..."
      #     echo "Payment tests integrated into api-contracts.test.js (Stripe checkout)"
      #     npx vitest run tests/api-contracts.test.js --config tests/vitest.config.js -t "payment"

      - name: 📊 Performance Check
        if: success()
        run: |
          echo "Checking test performance with Vercel dev server..."
          # Simple performance check without arbitrary thresholds
          DURATION=$(grep "Duration" /tmp/test-output.log 2>/dev/null | grep -oE '[0-9]+ms' | grep -oE '[0-9]+' || echo "0")
          echo "Test suite completed in ${DURATION}ms with production-like environment"

          if [ "$DURATION" -gt 5000 ]; then
            echo "⚠️ Tests took longer than 5 seconds, consider optimization"
          else
            echo "✅ Test performance is acceptable"
          fi

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up Vercel dev server processes..."

          # Kill server process
          if [ -f /tmp/server.pid ]; then
            SERVER_PID=$(cat /tmp/server.pid)
            if [ -n "$SERVER_PID" ]; then
              echo "Terminating Vercel dev server process $SERVER_PID..."
              kill -TERM $SERVER_PID 2>/dev/null || true
              sleep 1
              kill -9 $SERVER_PID 2>/dev/null || true
            fi
          fi

          # Kill ngrok process (if any)
          if [ -f /tmp/ngrok.pid ]; then
            NGROK_PID=$(cat /tmp/ngrok.pid)
            if [ -n "$NGROK_PID" ]; then
              echo "Terminating ngrok process $NGROK_PID..."
              kill -TERM $NGROK_PID 2>/dev/null || true
            fi
          fi

          # Clean up any remaining Vercel processes
          pkill -f "vercel dev" || true
          pkill -f "next-server" || true
          lsof -ti:$CI_PORT | xargs kill -9 2>/dev/null || true

          # Clean up temp files
          rm -f /tmp/server.pid /tmp/ngrok.pid /tmp/ngrok.log /tmp/vercel-dev.log /tmp/test-output.log

          echo "✅ Cleanup completed"

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Single deployment validation job instead of multiple
  validate-deployment:
    name: Validate Vercel Deployment
    runs-on: ubuntu-latest
    needs: validate
    if: success()
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Wait for Vercel Deployment
        uses: ./.github/actions/wait-for-vercel
        id: deployment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          timeout: 600
          interval: 15

      - name: ✅ Validate Production Deployment
        if: steps.deployment.outputs.url
        run: |
          DEPLOYMENT_URL="${{ steps.deployment.outputs.url }}"
          echo "Validating deployment at: $DEPLOYMENT_URL"

          # Basic smoke test of production deployment
          curl -f "$DEPLOYMENT_URL/api/health/check" || exit 1
          echo "✅ Production deployment is healthy"

  # Notification job for completion
  notify:
    name: Post-Merge Notification
    runs-on: ubuntu-latest
    needs: [validate, validate-deployment]
    if: always()

    steps:
      - name: 📊 Summary
        run: |
          echo "## Post-Merge Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Server Environment**: Vercel Dev (production-like testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ **Tests:** Passed with Vercel Dev" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.validate-deployment.result }}" == "success" ]; then
            echo "✅ **Deployment:** Validated" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-deployment.result }}" == "skipped" ]; then
            echo "⏭️ **Deployment:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌟 **Testing Environment**: Production-like serverless execution with Vercel Dev" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY