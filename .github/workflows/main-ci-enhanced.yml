# ======================================================================
# A Lo Cubano Boulder Fest - Enhanced CI/CD Pipeline with Test Comments
# ======================================================================
# Production-Ready CI with Quality Gates and Comprehensive PR Comments
# - Comprehensive testing: unit, E2E, performance, security
# - Vercel deployment with preview environments
# - Detailed PR comments with test results and performance metrics
# - Real-time test status updates
# ======================================================================

name: Enhanced Main CI Pipeline

on:
  push:
    branches: [main, develop, "feature/**", "release/**", "hotfix/**"]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      skip_cache:
        description: "Skip build cache"
        required: false
        default: "false"
      debug_mode:
        description: "Enable debug mode"
        required: false
        default: "false"

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Global environment variables
env:
  NODE_VERSION: "20"
  VITEST_TEST_TIMEOUT: "60000"
  VITEST_HOOK_TIMEOUT: "30000"
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "0"
  TURSO_CONNECTION_TIMEOUT: "30000"
  CI: true

jobs:
  # ======================================================================
  # Stage 1: Initialize and Track Start Time
  # ======================================================================
  initialize:
    name: üöÄ Initialize CI Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      start-time: ${{ steps.init.outputs.start-time }}
      pr-number: ${{ steps.init.outputs.pr-number }}

    steps:
      - name: üìã Initialize Pipeline
        id: init
        run: |
          START_TIME=$(date +%s)
          echo "start-time=$START_TIME" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            echo "pr-number=" >> $GITHUB_OUTPUT
          fi
          
          echo "üöÄ CI Pipeline initialized at $(date -u)"
          echo "üìä Start time: $START_TIME"

  # ======================================================================
  # Stage 2: Code Quality & Static Analysis
  # ======================================================================
  code-quality:
    name: üé® Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [initialize]
    outputs:
      status: ${{ steps.collect-results.outputs.status }}
      summary: ${{ steps.collect-results.outputs.summary }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          echo "‚úÖ Dependencies installed"

      - name: üé® Run ESLint
        id: eslint
        run: |
          echo "üîç Running ESLint..."
          npm run lint:js 2>&1 | tee eslint-output.log
          ESLINT_EXIT_CODE=${PIPESTATUS[0]}

          if [ $ESLINT_EXIT_CODE -ne 0 ]; then
            echo "‚ùå ESLint found issues"
            echo "eslint_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ ESLint passed"
            echo "eslint_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: üìù Run Markdown Quality Checks
        id: markdown
        if: always()
        run: |
          echo "üìù Checking markdown quality..."
          if ./scripts/validate-markdown-quality.sh check; then
            echo "‚úÖ Markdown quality passed"
            echo "markdown_failed=false" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Markdown quality issues found"
            echo "markdown_failed=true" >> $GITHUB_OUTPUT
            echo "üí° Run './scripts/validate-markdown-quality.sh fix' locally to auto-fix"
            exit 1
          fi

      - name: üèóÔ∏è Check HTML validity
        id: html
        if: always()
        run: |
          echo "üèóÔ∏è Validating HTML files..."
          npm run lint:html 2>&1 | tee html-output.log
          HTML_EXIT_CODE=${PIPESTATUS[0]}

          if [ $HTML_EXIT_CODE -ne 0 ]; then
            echo "‚ùå HTML validation failed"
            echo "html_failed=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ HTML validation passed"
            echo "html_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: üóÉÔ∏è Collect Code Quality Results
        id: collect-results
        if: always()
        run: |
          # Determine overall status
          if [ "${{ steps.eslint.outcome }}" = "failure" ] || [ "${{ steps.markdown.outcome }}" = "failure" ] || [ "${{ steps.html.outcome }}" = "failure" ]; then
            STATUS="failure"
          else
            STATUS="success"
          fi
          
          # Create summary
          SUMMARY=$(cat <<EOF
          {
            "type": "code-quality",
            "status": "$STATUS",
            "eslint": {
              "status": "${{ steps.eslint.outcome }}",
              "failed": "${{ steps.eslint.outputs.eslint_failed }}"
            },
            "markdown": {
              "status": "${{ steps.markdown.outcome }}",
              "failed": "${{ steps.markdown.outputs.markdown_failed }}"
            },
            "html": {
              "status": "${{ steps.html.outcome }}",
              "failed": "${{ steps.html.outputs.html_failed }}"
            }
          }
          EOF
          )
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "summary=$(echo "$SUMMARY" | jq -c .)" >> $GITHUB_OUTPUT

  # ======================================================================
  # Stage 3: Security Scanning
  # ======================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [initialize]
    outputs:
      status: ${{ steps.collect-results.outputs.status }}
      summary: ${{ steps.collect-results.outputs.summary }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üîç Run npm audit
        id: npm-audit
        continue-on-error: true
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=high --production 2>&1 | tee audit-output.log
          AUDIT_EXIT_CODE=${PIPESTATUS[0]}

          if [ $AUDIT_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è npm audit found vulnerabilities"
            echo "audit_failed=true" >> $GITHUB_OUTPUT

            # Check for critical vulnerabilities
            if grep -q "critical" audit-output.log; then
              echo "üö® Critical vulnerabilities found!"
              exit 1
            fi
          else
            echo "‚úÖ No vulnerabilities found"
            echo "audit_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: üîê Check for secrets
        id: secrets-check
        run: |
          echo "üîê Checking for exposed secrets..."

          # Check for common secret patterns
          if grep -r --include="*.js" --include="*.json" --exclude-dir=node_modules \
             -E "(api[_-]?key|secret|password|token|private[_-]?key)['\"]?\s*[:=]\s*['\"][^'\"]{10,}" . 2>/dev/null; then
            echo "üö® Potential secrets found in code!"
            echo "secrets_found=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "‚úÖ No exposed secrets detected"
          echo "secrets_found=false" >> $GITHUB_OUTPUT

      - name: üìä Collect Security Results
        id: collect-results
        if: always()
        uses: ./.github/actions/collect-test-results
        with:
          test-type: "security"
          test-results-path: "."
          job-start-time: ${{ needs.initialize.outputs.start-time }}

  # ======================================================================
  # Stage 4: Unit Tests with Enhanced Metrics
  # ======================================================================
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [initialize, code-quality]
    outputs:
      status: ${{ steps.collect-results.outputs.status }}
      summary: ${{ steps.collect-results.outputs.summary }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          echo "‚úÖ Dependencies installed"

      - name: üóÑÔ∏è Setup test database
        run: |
          echo "üóÑÔ∏è Initializing SQLite database for testing..."
          mkdir -p data
          touch data/test.db
          npm run migrate:status || true
          echo "‚úÖ Test database ready"

      - name: üìä Record Test Start Time
        id: test-start
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: üß™ Run unit tests with JSON output
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./data/test.db"
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD || '$2b$10$K7L1OJ0TfmHrVj2lEwjBOe7MJQkPH5c6WqzT5LJlvGA8MXl7T5jKq' }}
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET || 'test-secret-minimum-32-characters-long' }}
          TEST_ADMIN_PASSWORD: test-password-123
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || 'sk_test_dummy' }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY || 'test-api-key' }}
          WALLET_AUTH_SECRET: ${{ secrets.WALLET_AUTH_SECRET || 'test-wallet-secret-32-chars-minimum' }}
        run: |
          echo "üß™ Running unit tests with detailed reporting..."
          
          # Run tests with JSON reporter for parsing
          npx vitest run --config tests/vitest.config.js --reporter=json --outputFile=test-results.json 2>&1 | tee test-output.log
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          # Extract test summary from output
          if grep -q "Test Files" test-output.log; then
            echo "üìä Test Results:"
            grep -A 5 "Test Files" test-output.log || true
          fi

          # Always generate JSON output even on failure
          if [ ! -f "test-results.json" ] && [ -f "test-output.log" ]; then
            # Create basic JSON from log output if JSON file wasn't created
            PASSED=$(grep -o "[0-9]\+ passed" test-output.log | head -1 | grep -o "[0-9]\+" || echo "0")
            FAILED=$(grep -o "[0-9]\+ failed" test-output.log | head -1 | grep -o "[0-9]\+" || echo "0")
            TOTAL=$((PASSED + FAILED))
            
            cat > test-results.json <<EOF
          {
            "numTotalTests": $TOTAL,
            "numPassedTests": $PASSED,
            "numFailedTests": $FAILED,
            "numPendingTests": 0
          }
          EOF
          fi

          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi

          echo "‚úÖ All unit tests passed"

      - name: üìä Generate coverage report
        if: always()
        continue-on-error: true
        run: |
          echo "üìä Generating coverage report..."
          npm run test:coverage || true

      - name: üì§ Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ github.run_number }}
          path: |
            test-results.json
            test-output.log
            coverage/
          retention-days: 7

      - name: üìä Collect Unit Test Results
        id: collect-results
        if: always()
        uses: ./.github/actions/collect-test-results
        with:
          test-type: "unit"
          test-results-path: "."
          coverage-path: "coverage"
          job-start-time: ${{ steps.test-start.outputs.start-time }}

  # ======================================================================
  # Stage 5: Build Verification
  # ======================================================================
  build-check:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests]
    outputs:
      status: ${{ steps.collect-results.outputs.status }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üì¶ Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          echo "‚úÖ Dependencies installed"

      - name: üîç Verify API structure
        run: |
          echo "üîç Checking API handler exports..."

          # Check that all API files export default functions
          for file in api/**/*.js; do
            if [ -f "$file" ] && [[ ! "$file" =~ "/lib/" ]]; then
              if ! grep -q "export default" "$file"; then
                echo "‚ùå Missing default export in $file"
                exit 1
              fi
            fi
          done

          echo "‚úÖ API structure verified"

      - name: üìù Check migration files
        run: |
          echo "üìù Validating database migrations..."

          # Check migration file format
          for file in migrations/*.sql; do
            if [ -f "$file" ]; then
              # Check for transaction blocks
              if ! grep -q "BEGIN TRANSACTION\|BEGIN;" "$file"; then
                echo "‚ö†Ô∏è Migration $file missing transaction block"
              fi

              # Check for dangerous operations
              if grep -qi "drop table\|truncate\|delete from" "$file"; then
                echo "‚ö†Ô∏è Migration $file contains potentially dangerous operations"
              fi
            fi
          done

          echo "‚úÖ Migration files validated"

      - name: üèóÔ∏è Test build process
        id: build-test
        run: |
          echo "üèóÔ∏è Verifying build process..."

          # Check package.json scripts
          npm run --silent | grep -E "(build|deploy|test)" || true

          # Verify critical files exist
          CRITICAL_FILES=(
            "package.json"
            "vercel.json"
            "api/lib/database.js"
            "pages/index.html"
          )

          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Critical file missing: $file"
              exit 1
            fi
          done

          echo "‚úÖ Build verification complete"

      - name: üìä Collect Build Results
        id: collect-results
        if: always()
        run: |
          if [ "${{ steps.build-test.outcome }}" = "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

  # ======================================================================
  # Stage 6: E2E Tests (Matrix) with Enhanced Reporting
  # ======================================================================
  e2e-tests:
    name: üé≠ E2E - ${{ matrix.suite-name }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ matrix.timeout-minutes }}
    needs: [initialize, build-check]
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch'
    outputs:
      results: ${{ steps.collect-results.outputs.summary }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Core functionality tests (fastest, most critical)
          - suite: core
            suite-name: "Core Features"
            browser: chromium
            test-pattern: "basic-navigation|registration-flow|cart-functionality"
            retry-count: 2
            timeout-minutes: 15
            memory-limit: 2048

          # Admin functionality tests
          - suite: admin
            suite-name: "Admin Panel"
            browser: chromium
            test-pattern: "admin-auth|admin-dashboard"
            retry-count: 2
            timeout-minutes: 15
            memory-limit: 2048

          # User experience tests
          - suite: user-experience
            suite-name: "User Experience"
            browser: chromium
            test-pattern: "newsletter-simple|gallery-basic|user-engagement"
            retry-count: 2
            timeout-minutes: 20
            memory-limit: 3072

          # Advanced scenarios (payment, tickets)
          - suite: advanced
            suite-name: "Advanced Features"
            browser: chromium
            test-pattern: "payment-flow|ticket-validation"
            retry-count: 3
            timeout-minutes: 20
            memory-limit: 3072

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üìä Record Test Start Time
        id: test-start
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: üì¶ Install dependencies
        run: |
          echo "üì¶ Installing dependencies for ${{ matrix.suite-name }}..."
          npm ci --prefer-offline --no-audit --no-fund

          # Install Playwright browsers
          echo "üé≠ Installing Playwright browsers..."
          npx playwright install --with-deps ${{ matrix.browser }}

          # Install Vercel CLI
          echo "‚ñ≤ Installing Vercel CLI..."
          npm install -g vercel@latest

          echo "‚úÖ Dependencies ready"

      - name: üîê Setup E2E Environment
        id: setup-env
        run: |
          echo "üîê Configuring E2E environment for ${{ matrix.suite-name }}..."

          # Allocate dynamic port
          DYNAMIC_PORT=$((3000 + RANDOM % 1000))
          echo "DYNAMIC_PORT=${DYNAMIC_PORT}" >> $GITHUB_ENV
          echo "dynamic_port=${DYNAMIC_PORT}" >> $GITHUB_OUTPUT

          # Set base URL for Playwright
          echo "PLAYWRIGHT_BASE_URL=http://localhost:${DYNAMIC_PORT}" >> $GITHUB_ENV

          # Export test mode flag
          echo "E2E_TEST_MODE=true" >> $GITHUB_ENV

          echo "‚úÖ Environment configured:"
          echo "  Port: ${DYNAMIC_PORT}"
          echo "  Suite: ${{ matrix.suite }}"
          echo "  Browser: ${{ matrix.browser }}"

      - name: üóÑÔ∏è Database Setup Check
        id: db-check
        env:
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL_CI || secrets.TURSO_DATABASE_URL || '' }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN_CI || secrets.TURSO_AUTH_TOKEN || '' }}
        run: |
          echo "üóÑÔ∏è Checking database configuration..."

          if [ -n "$TURSO_DATABASE_URL" ] && [ -n "$TURSO_AUTH_TOKEN" ]; then
            echo "‚úÖ Turso database configured"
            echo "db_type=turso" >> $GITHUB_OUTPUT

            # Test connection
            echo "Testing Turso connection..."
            npm run health:database || echo "‚ö†Ô∏è Database health check failed"
          else
            echo "‚ö†Ô∏è Turso not configured, using SQLite fallback"
            echo "db_type=sqlite" >> $GITHUB_OUTPUT

            # Setup SQLite
            mkdir -p data
            touch data/e2e-test.db
            echo "DATABASE_URL=file:./data/e2e-test.db" >> $GITHUB_ENV

            # Initialize schema
            npm run migrate:up || echo "‚ö†Ô∏è Migration failed"
            echo "‚ö†Ô∏è SQLite fallback ready for ${{ matrix.suite }}"
          fi

      - name: üé≠ Run E2E Tests with JSON Output (${{ matrix.suite-name }})
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.PLAYWRIGHT_BASE_URL }}
          NODE_OPTIONS: "--max-old-space-size=${{ matrix.memory-limit }}"
          E2E_TEST_MODE: true
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL_CI || secrets.TURSO_DATABASE_URL || '' }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN_CI || secrets.TURSO_AUTH_TOKEN || '' }}
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          PORT: ${{ env.DYNAMIC_PORT }}
          DYNAMIC_PORT: ${{ env.DYNAMIC_PORT }}
          TEST_ADMIN_PASSWORD: test-password-123
          ADMIN_PASSWORD: '$2b$10$K7L1OJ0TfmHrVj2lEwjBOe7MJQkPH5c6WqzT5LJlvGA8MXl7T5jKq'
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET || 'fallback-test-secret-minimum-32-chars' }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY || '' }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY || '' }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN || '' }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID || '' }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID || '' }}
        run: |
          echo "üé≠ Running E2E tests: ${{ matrix.suite-name }}..."
          echo "üìä Test suite: ${{ matrix.suite }}"
          echo "üåê Browser: ${{ matrix.browser }}"
          echo "üéØ Pattern: ${{ matrix.test-pattern || 'All tests' }}"
          echo "üì° Port: ${{ env.DYNAMIC_PORT }}"

          # Construct test command with JSON output
          TEST_CMD="npx playwright test --config=playwright-e2e-vercel-main.config.js --project=${{ matrix.browser }}"

          # Add test pattern filtering
          if [ -n "${{ matrix.test-pattern }}" ]; then
            TEST_CMD="$TEST_CMD --grep=\"(${{ matrix.test-pattern }})\""
          fi

          # Add retries and timeout
          TEST_CMD="$TEST_CMD --retries=${{ matrix.retry-count }} --timeout=120000"

          # Add JSON reporter for parsing results
          TEST_CMD="$TEST_CMD --reporter=list,json:test-results/e2e-${{ matrix.browser }}-results.json"

          echo "üìã Executing: $TEST_CMD"

          # Create results directory
          mkdir -p test-results

          # Execute with timeout protection
          if timeout ${{ matrix.timeout-minutes }}m bash -c "$TEST_CMD"; then
            echo "‚úÖ E2E tests completed successfully: ${{ matrix.suite-name }}"
          else
            EXIT_CODE=$?
            echo "‚ùå E2E tests failed: ${{ matrix.suite-name }} (exit code: $EXIT_CODE)"
            exit $EXIT_CODE
          fi

      - name: üì§ Upload E2E Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.suite }}-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            playwright-report/
            test-results/
            tests/e2e/screenshots/
          retention-days: 7

      - name: üìä Collect E2E Test Results
        id: collect-results
        if: always()
        uses: ./.github/actions/collect-test-results
        with:
          test-type: "e2e"
          test-results-path: "test-results"
          browser-name: ${{ matrix.browser }}
          job-start-time: ${{ steps.test-start.outputs.start-time }}

  # ======================================================================
  # Stage 7: Performance Testing
  # ======================================================================
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [initialize, build-check]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      results: ${{ steps.collect-results.outputs.summary }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: üìä Record Test Start Time
        id: test-start
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: üì¶ Install dependencies
        run: npm ci

      - name: ‚ö° Run Performance Tests
        run: |
          echo "‚ö° Running performance validation..."
          
          # Create performance results directory
          mkdir -p test-results
          
          TARGET_URL="https://alocubanoboulderfest.vercel.app"
          echo "Target URL: $TARGET_URL"
          
          # Basic performance testing with curl
          echo "Testing API response times..."
          HEALTH_TIME=$(time (curl -f "$TARGET_URL/api/health/check" > /dev/null) 2>&1 | grep real | awk '{print $2}' | sed 's/m/:/g' | sed 's/s//g')
          
          # Create basic performance results
          cat > test-results/performance-results.json <<EOF
          {
            "health_check_time": "$HEALTH_TIME",
            "target_url": "$TARGET_URL",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          echo "‚úÖ Performance validation complete"

      - name: üì§ Upload Performance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.run_number }}
          path: test-results/
          retention-days: 7

      - name: üìä Collect Performance Results
        id: collect-results
        if: always()
        uses: ./.github/actions/collect-test-results
        with:
          test-type: "performance"
          test-results-path: "test-results"
          job-start-time: ${{ steps.test-start.outputs.start-time }}

  # ======================================================================
  # Stage 8: Deployment (Vercel)
  # ======================================================================
  deploy:
    name: üöÄ Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, security-scan, unit-tests, e2e-tests]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' ||
       github.ref == 'refs/heads/develop' ||
       startsWith(github.ref, 'refs/heads/release/'))
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ‚ñ≤ Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "üöÄ Deploying to Vercel..."

          # Install Vercel CLI
          npm install -g vercel@latest

          # Determine environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "üì¶ Deploying to production..."
            DEPLOYMENT_URL=$(vercel --prod --token=$VERCEL_TOKEN --yes)
          else
            echo "üëÅÔ∏è Deploying preview..."
            DEPLOYMENT_URL=$(vercel --token=$VERCEL_TOKEN --yes)
          fi

          echo "‚úÖ Deployed to: $DEPLOYMENT_URL"
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: üîç Verify deployment
        run: |
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          echo "üîç Verifying deployment at $DEPLOY_URL..."

          # Wait for deployment to be ready
          sleep 10

          # Check if site is accessible
          if curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" | grep -q "200\|301\|302"; then
            echo "‚úÖ Deployment verified successfully"
          else
            echo "‚ö†Ô∏è Deployment may not be ready yet"
          fi

  # ======================================================================
  # Stage 9: Comprehensive Test Status Comment
  # ======================================================================
  test-status-comment:
    name: üí¨ Post Test Status Comment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [initialize, code-quality, security-scan, unit-tests, build-check, e2e-tests, performance-tests, deploy]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üìä Calculate Total CI Time
        id: timing
        run: |
          START_TIME=${{ needs.initialize.outputs.start-time }}
          END_TIME=$(date +%s)
          TOTAL_TIME=$((END_TIME - START_TIME))
          echo "total-time=$TOTAL_TIME" >> $GITHUB_OUTPUT

      - name: üìã Aggregate E2E Results
        id: aggregate-e2e
        run: |
          # Collect E2E results from matrix jobs
          E2E_RESULTS="[]"
          
          # This would be populated by the matrix results in a real scenario
          # For now, we'll create a placeholder structure
          echo "e2e-results=$E2E_RESULTS" >> $GITHUB_OUTPUT

      - name: üí¨ Post Comprehensive Test Comment
        uses: ./.github/actions/post-test-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          unit-test-results: ${{ needs.unit-tests.outputs.summary || '{}' }}
          e2e-test-results: ${{ steps.aggregate-e2e.outputs.e2e-results }}
          performance-test-results: ${{ needs.performance-tests.outputs.results || '{}' }}
          security-test-results: ${{ needs.security-scan.outputs.summary || '{}' }}
          build-status: ${{ needs.build-check.outputs.status }}
          deployment-url: ${{ needs.deploy.outputs.deployment-url || '' }}
          workflow-run-id: ${{ github.run_id }}
          commit-sha: ${{ github.sha }}
          total-ci-time: ${{ steps.timing.outputs.total-time }}

  # ======================================================================
  # Final Status Report
  # ======================================================================
  ci-status:
    name: üìä CI Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-quality, security-scan, unit-tests, build-check, e2e-tests]
    if: always()

    steps:
      - name: üìä Generate CI Report
        run: |
          echo "========================================"
          echo "üìä Enhanced CI Pipeline Summary"
          echo "========================================"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run: #${{ github.run_number }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "========================================"
          echo "Stage Results:"
          echo "  Code Quality:  ${{ needs.code-quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
          echo "  Security:      ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
          echo "  Unit Tests:    ${{ needs.unit-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
          echo "  Build Check:   ${{ needs.build-check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
          echo "  E2E Tests:     ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}"
          echo "========================================"

          # Determine overall status
          if [ "${{ needs.code-quality.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ] && \
             [ "${{ needs.unit-tests.result }}" == "success" ] && \
             [ "${{ needs.build-check.result }}" == "success" ] && \
             [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "üéâ Overall Status: SUCCESS"
            echo "‚úÖ Enhanced CI Pipeline completed successfully with comprehensive test reporting!"
            exit 0
          else
            echo "‚ùå Overall Status: FAILED"
            echo ""
            echo "Please check the failed stages above for details."
            echo "üìù Detailed test results and failure analysis are available in the PR comment."
            exit 1
          fi