name: Payment Feature CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/payment-* ]
    paths:
      - 'api/payment/**'
      - 'pages/payment/**'
      - 'js/payment/**'
      - 'tests/payment/**'
      - '.github/workflows/payment-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/payment/**'
      - 'pages/payment/**'
      - 'js/payment/**'
      - 'tests/payment/**'

env:
  # Environment-specific variables (set in GitHub Secrets)
  NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

jobs:
  # Security scanning for payment-related code
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run SAST scan with Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/javascript
          p/typescript
        generateSarif: true
    
    - name: Upload SAST results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
    
    - name: Dependency vulnerability scan
      run: |
        npm audit --audit-level=moderate
        npx snyk test --severity-threshold=high || echo "::warning::Vulnerabilities found in dependencies"
    
    - name: Secret scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # Compliance checks for payment processing
  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: PCI DSS compliance check
      run: |
        # Check for credit card data storage
        if grep -r -E "(4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13})" \
           --include="*.js" --include="*.html" \
           --exclude-dir=node_modules \
           --exclude-dir=tests \
           .; then
          echo "❌ Potential credit card numbers found in code!"
          exit 1
        fi
        
        # Check for proper encryption usage
        if ! grep -r "crypto\|encrypt\|TLS" api/payment/; then
          echo "⚠️ Warning: No encryption references found in payment API"
        fi
        
        # Verify no sensitive data in logs
        if grep -r "console\.log.*payment\|console\.log.*card" api/payment/; then
          echo "❌ Payment data logging detected!"
          exit 1
        fi
        
        echo "✅ Basic PCI compliance checks passed"
    
    - name: GDPR compliance check
      run: |
        # Check for data retention policies
        if ! grep -r "retention\|deletion\|gdpr" api/payment/; then
          echo "⚠️ Warning: No data retention policy references found"
        fi
        
        # Check for user consent handling
        if ! grep -r "consent\|privacy" js/payment/; then
          echo "⚠️ Warning: No consent handling found in payment flow"
        fi

  # Payment-specific unit tests
  payment-unit-tests:
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run payment unit tests
      run: |
        npm test -- tests/payment/unit --coverage
        
    - name: Check coverage thresholds
      run: |
        COVERAGE=$(npm test -- tests/payment/unit --coverage --coverageReporters=json-summary | grep -o '"pct":[0-9.]*' | head -1 | cut -d':' -f2)
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
          exit 1
        fi
        echo "✅ Coverage ${COVERAGE}% meets threshold"

  # Payment integration tests
  payment-integration-tests:
    runs-on: ubuntu-latest
    needs: [payment-unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        # Create test environment file
        cat > .env.test << EOF
        STRIPE_SECRET_KEY=${{ secrets.STRIPE_TEST_SECRET_KEY }}
        STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_TEST_WEBHOOK_SECRET }}
        PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_TEST_CLIENT_ID }}
        PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_TEST_CLIENT_SECRET }}
        DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
        EOF
    
    - name: Run payment integration tests
      run: |
        npm test -- tests/payment/integration
    
    - name: Run payment webhook tests
      run: |
        npm test -- tests/payment/webhooks

  # Contract testing for payment APIs
  contract-tests:
    runs-on: ubuntu-latest
    needs: [payment-unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run contract tests
      run: |
        npm test -- tests/payment/contracts
    
    - name: Validate OpenAPI spec
      run: |
        npx @apidevtools/swagger-cli validate api/payment/openapi.yaml

  # Performance testing for payment endpoints
  performance-tests:
    runs-on: ubuntu-latest
    needs: [payment-integration-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run load tests
      run: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run load tests
        k6 run tests/payment/performance/load-test.js
    
    - name: Check performance thresholds
      run: |
        # Verify response times < 200ms for payment endpoints
        node scripts/check-performance-thresholds.js

  # Database migration validation
  database-migration:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test migrations
      run: |
        # Test migration up
        npm run db:migrate:test:up
        
        # Test migration down
        npm run db:migrate:test:down
        
        # Test migration idempotency
        npm run db:migrate:test:up
        npm run db:migrate:test:up

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, compliance-check, payment-integration-tests, contract-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup deployment
      run: |
        # Create deployment record
        DEPLOYMENT_ID=$(curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments \
          -d '{"ref":"${{ github.ref }}","environment":"staging","auto_merge":false}' \
          | jq -r '.id')
        echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
    
    - name: Deploy to Vercel Staging
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--target preview'
        alias-domains: |
          staging-alocubano.vercel.app
    
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run smoke tests against staging
        STAGING_URL="${{ steps.deploy.outputs.preview-url }}" npm run test:smoke
    
    - name: Update deployment status
      if: always()
      run: |
        STATUS="${{ job.status == 'success' && 'success' || 'failure' }}"
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
          -d "{\"state\":\"$STATUS\",\"environment_url\":\"${{ steps.deploy.outputs.preview-url }}\"}"

  # Canary deployment to production
  deploy-canary:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production-canary
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy canary version
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--target production'
        alias-domains: |
          canary-alocubano.vercel.app
    
    - name: Configure canary traffic split
      run: |
        # Configure 10% traffic to canary
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -H "Content-Type: application/json" \
          https://api.vercel.com/v1/projects/${{ secrets.VERCEL_PROJECT_ID }}/env \
          -d '{"CANARY_PERCENTAGE": "10"}'
    
    - name: Monitor canary metrics
      run: |
        # Monitor error rates and performance for 15 minutes
        npm run monitor:canary -- --duration 900
    
    - name: Canary validation
      id: validation
      run: |
        # Check canary health metrics
        ERROR_RATE=$(npm run metrics:error-rate -- --deployment canary)
        RESPONSE_TIME=$(npm run metrics:response-time -- --deployment canary)
        
        if (( $(echo "$ERROR_RATE > 1" | bc -l) )); then
          echo "❌ Canary error rate ${ERROR_RATE}% exceeds threshold"
          echo "canary_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if (( $(echo "$RESPONSE_TIME > 300" | bc -l) )); then
          echo "❌ Canary response time ${RESPONSE_TIME}ms exceeds threshold"
          echo "canary_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ Canary metrics healthy"
        echo "canary_status=success" >> $GITHUB_OUTPUT

  # Full production deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-canary]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://alocubano.boulderfest.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Pre-deployment backup
      run: |
        # Trigger database backup
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.DATABASE_API_KEY }}" \
          https://api.database.com/backup \
          -d '{"label": "pre-payment-deployment-${{ github.sha }}"}'
    
    - name: Deploy to production
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--target production --prod'
    
    - name: Post-deployment validation
      run: |
        # Wait for deployment propagation
        sleep 60
        
        # Run production smoke tests
        PRODUCTION_URL="https://alocubano.boulderfest.com" npm run test:smoke
        
        # Validate payment endpoints
        npm run test:production:payments
    
    - name: Update monitoring
      run: |
        # Update Datadog deployment marker
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
          -H "Content-Type: application/json" \
          -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
          -d '{
            "title": "Payment Feature Deployed",
            "text": "Deployment ${{ github.sha }} to production",
            "tags": ["deployment:production", "feature:payment"],
            "alert_type": "info"
          }'

  # Rollback mechanism
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    
    steps:
    - name: Trigger rollback
      run: |
        # Revert to previous production deployment
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          https://api.vercel.com/v1/deployments/${{ secrets.VERCEL_PROJECT_ID }}/rollback
        
        # Notify team
        curl -X POST \
          -H "Content-Type: application/json" \
          ${{ secrets.SLACK_WEBHOOK_URL }} \
          -d '{
            "text": "⚠️ Payment deployment failed. Automatic rollback initiated.",
            "attachments": [{
              "color": "danger",
              "fields": [{
                "title": "Deployment",
                "value": "${{ github.sha }}",
                "short": true
              }]
            }]
          }'