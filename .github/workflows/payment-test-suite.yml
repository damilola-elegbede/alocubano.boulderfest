name: Payment System Test Suite

on:
  push:
    branches: [ main, develop, feature/payment-* ]
    paths:
      - 'api/payment/**'
      - 'api/webhooks/**'
      - 'lib/payment/**'
      - 'lib/db/**'
      - 'tests/**'
      - 'package*.json'
      - '.github/workflows/payment-test-suite.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/payment/**'
      - 'api/webhooks/**'
      - 'lib/payment/**'
      - 'lib/db/**'
      - 'tests/**'
      - 'package*.json'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_ENV: test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/alocubano_test
  STRIPE_PUBLISHABLE_KEY: pk_test_fake_key_for_testing
  STRIPE_SECRET_KEY: sk_test_fake_key_for_testing
  STRIPE_WEBHOOK_SECRET: whsec_fake_secret_for_testing
  SENDGRID_API_KEY: SG.fake_key_for_testing
  MOCK_PAYMENTS: true
  MOCK_EMAILS: true

jobs:
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Run ESLint
        run: npm run lint:js
        
      - name: Run HTML validation
        run: npm run lint:html
        
      - name: Check code formatting
        run: npx prettier --check "tests/**/*.js" "lib/**/*.js" "api/**/*.js"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./tests/coverage
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: tests/results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Start test server
        run: |
          npm start &
          sleep 10
          
      - name: Run E2E tests
        run: npx playwright test --config=config/playwright.config.js
        
      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: tests/e2e-results/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Run security tests
        run: npm run test -- --testPathPattern=security
        
      - name: Run dependency audit
        run: npm audit --audit-level=high
        
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: tests/security-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && contains(github.ref, 'main')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Start test server
        run: |
          npm start &
          sleep 10
          
      - name: Run performance tests
        run: k6 run tests/payment/performance/load-test.js
        env:
          BASE_URL: http://localhost:3000
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: tests/performance-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alocubano_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Setup test database
        run: |
          npm run db:migrate -- --test
          
      - name: Start test server
        run: |
          npm start &
          sleep 10
          
      - name: Run accessibility tests
        run: npx playwright test --config=config/playwright.config.js --project=accessibility
        
      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: tests/accessibility-results/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "# Payment System Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tests**: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" && \
                "${{ needs.security-tests.result }}" == "success" ]]; then
            echo "✅ **All tests passed! Payment system is ready for deployment.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed. Please review the results before deployment.**" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              lint: '${{ needs.lint.result }}',
              unit: '${{ needs.unit-tests.result }}',
              integration: '${{ needs.integration-tests.result }}',
              e2e: '${{ needs.e2e-tests.result }}',
              security: '${{ needs.security-tests.result }}'
            };
            
            const passed = Object.values(results).every(r => r === 'success');
            const emoji = passed ? '✅' : '❌';
            const status = passed ? 'All tests passed!' : 'Some tests failed';
            
            const body = `
            ## ${emoji} Payment System Test Results
            
            ${status}
            
            | Test Suite | Status |
            |------------|--------|
            | Linting | ${results.lint === 'success' ? '✅' : '❌'} |
            | Unit Tests | ${results.unit === 'success' ? '✅' : '❌'} |
            | Integration Tests | ${results.integration === 'success' ? '✅' : '❌'} |
            | E2E Tests | ${results.e2e === 'success' ? '✅' : '❌'} |
            | Security Tests | ${results.security === 'success' ? '✅' : '❌'} |
            
            ${passed ? '🚀 Ready for deployment!' : '⚠️ Please fix failing tests before merging.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: |
      github.ref == 'refs/heads/develop' &&
      needs.lint.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.integration-tests.result == 'success' &&
      needs.e2e-tests.result == 'success' &&
      needs.security-tests.result == 'success'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-summary, performance-tests]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.lint.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.integration-tests.result == 'success' &&
      needs.e2e-tests.result == 'success' &&
      needs.security-tests.result == 'success' &&
      needs.performance-tests.result == 'success'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here