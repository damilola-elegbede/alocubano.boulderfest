---
name: 🚀 Vercel Deployment Health Check

# Monitors Vercel deployments and validates health status
# Uses deployment mode to bypass external service checks during initial deployment

on:
  deployment_status:
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Vercel deployment URL to check'
        required: true
        type: string
      max_retries:
        description: 'Maximum retry attempts'
        required: false
        default: '30'
        type: string
      retry_interval:
        description: 'Retry interval in seconds'
        required: false
        default: '4'
        type: string

permissions:
  deployments: read
  statuses: write
  pull-requests: write

jobs:
  health-check:
    name: 🏥 Deployment Health Validation
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event.deployment_status.state == 'success' && 
       github.event.deployment_status.environment_url != '')
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        run: |
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y jq curl
          
          # Make script executable
          chmod +x scripts/vercel-deployment-health.sh

      - name: 🎯 Determine Deployment URL
        id: get-url
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DEPLOYMENT_URL="${{ github.event.inputs.deployment_url }}"
            MAX_RETRIES="${{ github.event.inputs.max_retries }}"
            RETRY_INTERVAL="${{ github.event.inputs.retry_interval }}"
          else
            DEPLOYMENT_URL="${{ github.event.deployment_status.environment_url }}"
            MAX_RETRIES="30"
            RETRY_INTERVAL="4"
          fi
          
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "MAX_RETRIES=$MAX_RETRIES" >> $GITHUB_OUTPUT
          echo "RETRY_INTERVAL=$RETRY_INTERVAL" >> $GITHUB_OUTPUT
          
          echo "🎯 Deployment URL: $DEPLOYMENT_URL"
          echo "⏱️ Max retries: $MAX_RETRIES"
          echo "⏱️ Retry interval: ${RETRY_INTERVAL}s"

      - name: 🏥 Run Health Check
        id: health-check
        env:
          MAX_RETRIES: ${{ steps.get-url.outputs.MAX_RETRIES }}
          RETRY_INTERVAL: ${{ steps.get-url.outputs.RETRY_INTERVAL }}
        run: |
          ./scripts/vercel-deployment-health.sh "${{ steps.get-url.outputs.DEPLOYMENT_URL }}"

      - name: 📊 Generate Summary Report
        if: always()
        run: |
          DEPLOYMENT_URL="${{ steps.get-url.outputs.DEPLOYMENT_URL }}"
          
          echo "# 🚀 Vercel Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| URL | [$DEPLOYMENT_URL]($DEPLOYMENT_URL) |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ steps.health-check.outcome == 'success' && '✅ Healthy' || '❌ Unhealthy' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Timestamp | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.health-check.outcome }}" = "success" ]; then
            echo "## ✅ Health Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment is operational and responding correctly." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
            echo "- [Home Page]($DEPLOYMENT_URL/)" >> $GITHUB_STEP_SUMMARY
            echo "- [Tickets]($DEPLOYMENT_URL/tickets)" >> $GITHUB_STEP_SUMMARY
            echo "- [Health Status]($DEPLOYMENT_URL/api/health/check?deployment=true)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Health Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment is not responding correctly. Please check:" >> $GITHUB_STEP_SUMMARY
            echo "1. Vercel deployment logs for build errors" >> $GITHUB_STEP_SUMMARY
            echo "2. Environment variables are properly configured" >> $GITHUB_STEP_SUMMARY
            echo "3. All required services are accessible" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Initial deployments may show degraded status until database is configured" >> $GITHUB_STEP_SUMMARY
          echo "- Configure \`TURSO_DATABASE_URL\` and \`TURSO_AUTH_TOKEN\` in Vercel dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Full functionality requires all environment variables from \`.env.example\`" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Update Deployment Status
        if: github.event_name == 'deployment_status'
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ steps.health-check.outcome }}' === 'success';
            const deploymentUrl = '${{ steps.get-url.outputs.DEPLOYMENT_URL }}';
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: success ? 'success' : 'failure',
              description: success 
                ? '✅ Health check passed - deployment is operational' 
                : '❌ Health check failed - check logs for details',
              environment_url: deploymentUrl,
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: 💬 Comment on PR
        if: github.event.deployment_status.deployment.payload.pull_request_number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.deployment.payload.pull_request_number;
            const success = '${{ steps.health-check.outcome }}' === 'success';
            const deploymentUrl = '${{ steps.get-url.outputs.DEPLOYMENT_URL }}';
            
            const body = success
              ? `## ✅ Vercel Deployment Health Check Passed\n\n` +
                `The deployment is operational at: ${deploymentUrl}\n\n` +
                `### Quick Links:\n` +
                `- [View Deployment](${deploymentUrl})\n` +
                `- [Health Status](${deploymentUrl}/api/health/check?deployment=true)\n` +
                `- [Tickets Page](${deploymentUrl}/tickets)`
              : `## ❌ Vercel Deployment Health Check Failed\n\n` +
                `The deployment at ${deploymentUrl} is not responding correctly.\n\n` +
                `Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "✅ Deployment health check completed successfully!"
          echo "🚀 Deployment URL: ${{ steps.get-url.outputs.DEPLOYMENT_URL }}"
          echo "📊 Status: Healthy"

      - name: ❌ Failure Notification
        if: failure()
        run: |
          echo "❌ Deployment health check failed!"
          echo "🔍 Please check the logs above for details"
          echo "📝 Common issues:"
          echo "  - Missing environment variables"
          echo "  - Build failures in Vercel"
          echo "  - API endpoint errors"
          exit 1