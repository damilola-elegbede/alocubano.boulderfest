---
name: "Deployment - Health Validation"

# Validates Vercel deployments after they complete
# Ensures deployments are healthy and properly configured

on:
  deployment_status:
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL to validate'
        required: true
        type: string
  workflow_call:
    inputs:
      deployment_url:
        description: 'Deployment URL to validate'
        required: true
        type: string

env:
  NODE_VERSION: "20"
  CI: true

jobs:
  validate-deployment:
    name: üîç Validate Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_call' ||
      (github.event.deployment_status.state == 'success' && 
       github.event.deployment_status.environment_url != '')
    outputs:
      deployment_url: ${{ steps.url.outputs.deployment_url }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: üåê Determine Deployment URL
        id: url
        run: |
          if [ -n "${{ inputs.deployment_url }}" ]; then
            DEPLOYMENT_URL="${{ inputs.deployment_url }}"
          elif [ -n "${{ github.event.deployment_status.environment_url }}" ]; then
            DEPLOYMENT_URL="${{ github.event.deployment_status.environment_url }}"
          else
            echo "‚ùå No deployment URL found"
            exit 1
          fi
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üåê Deployment URL: $DEPLOYMENT_URL"

      - name: üè• Health Check Validation
        run: |
          DEPLOYMENT_URL="${{ steps.url.outputs.deployment_url }}"
          # Use deployment mode for health check to avoid external service dependencies
          HEALTH_URL="${DEPLOYMENT_URL}/api/health/check?deployment=true"
          
          echo "üè• Validating deployment health..."
          echo "Health URL: $HEALTH_URL"
          
          # Wait for deployment to be fully ready
          for i in {1..12}; do
            echo "Health check attempt $i/12..."
            
            if curl -f -s --connect-timeout 30 --max-time 60 "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check passed"
              
              # Get detailed health information
              HEALTH_RESPONSE=$(curl -s "$HEALTH_URL" || echo "Could not fetch health details")
              echo "Health response: $HEALTH_RESPONSE"
              
              # Check for configuration warnings
              if echo "$HEALTH_RESPONSE" | grep -q '"missing_variables":\[\]'; then
                echo "‚úÖ All environment variables configured"
              else
                echo "‚ö†Ô∏è Some environment variables are not configured"
                echo "This is expected for preview deployments"
              fi
              
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "‚ùå Health check failed after 2 minutes"
              echo "Final attempt with verbose output:"
              curl -v --connect-timeout 30 --max-time 60 "$HEALTH_URL" || true
              exit 1
            fi
            
            echo "Waiting 10 seconds before retry..."
            sleep 10
          done

      - name: üóÉÔ∏è Database Health Validation (Optional)
        run: |
          DEPLOYMENT_URL="${{ steps.url.outputs.deployment_url }}"
          DB_HEALTH_URL="${DEPLOYMENT_URL}/api/health/database"
          
          echo "üóÉÔ∏è Checking database health (optional for preview deployments)..."
          echo "Database health URL: $DB_HEALTH_URL"
          
          if curl -f -s --connect-timeout 30 --max-time 60 "$DB_HEALTH_URL" > /dev/null; then
            echo "‚úÖ Database health check passed"
            
            # Get detailed database health information
            DB_HEALTH_RESPONSE=$(curl -s "$DB_HEALTH_URL" || echo "Could not fetch database health details")
            echo "Database health response: $DB_HEALTH_RESPONSE"
          else
            echo "‚ö†Ô∏è Database health check failed or not configured"
            echo "This is expected for preview deployments without TURSO_DATABASE_URL"
            echo "Production deployments should have database configured"
            
            # Don't fail the workflow for database health in preview environments
            if [[ "$DEPLOYMENT_URL" == *"vercel.app"* ]] && [[ "$DEPLOYMENT_URL" != *"alocubanoboulderfest.vercel.app"* ]]; then
              echo "‚ÑπÔ∏è Preview deployment detected - database not required"
            else
              echo "‚ö†Ô∏è Production deployment may need database configuration"
            fi
          fi

      - name: üîó API Endpoint Validation
        run: |
          DEPLOYMENT_URL="${{ steps.url.outputs.deployment_url }}"
          
          echo "üîó Validating critical API endpoints..."
          
          # Test critical endpoints that don't require external services
          ENDPOINTS=(
            "/api/health/check?deployment=true"
            "/api/gallery"
            "/api/featured-photos"
          )
          
          SUCCESS_COUNT=0
          TOTAL_ENDPOINTS=${#ENDPOINTS[@]}
          
          for endpoint in "${ENDPOINTS[@]}"; do
            FULL_URL="${DEPLOYMENT_URL}${endpoint}"
            echo "Testing: $FULL_URL"
            
            if curl -f -s --connect-timeout 30 --max-time 60 "$FULL_URL" > /dev/null; then
              echo "‚úÖ $endpoint - OK"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ùå $endpoint - Failed"
            fi
          done
          
          echo "API Endpoint Results: $SUCCESS_COUNT/$TOTAL_ENDPOINTS endpoints passed"
          
          # Require at least health check to pass
          if [ $SUCCESS_COUNT -eq 0 ]; then
            echo "‚ùå No API endpoints are responding"
            exit 1
          fi
          
          echo "‚úÖ API endpoint validation completed"

      - name: üåê Static Asset Validation
        run: |
          DEPLOYMENT_URL="${{ steps.url.outputs.deployment_url }}"
          
          echo "üåê Validating static asset delivery..."
          
          # Test critical static assets
          ASSETS=(
            "/favicon.ico"
            "/images/alocubano-logo.svg"
            "/css/main.css"
            "/js/main.js"
          )
          
          SUCCESS_COUNT=0
          TOTAL_ASSETS=${#ASSETS[@]}
          
          for asset in "${ASSETS[@]}"; do
            FULL_URL="${DEPLOYMENT_URL}${asset}"
            echo "Testing: $FULL_URL"
            
            if curl -f -s --connect-timeout 30 --max-time 60 "$FULL_URL" > /dev/null; then
              echo "‚úÖ $asset - OK"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ö†Ô∏è $asset - Failed (may not exist)"
            fi
          done
          
          echo "Static Asset Results: $SUCCESS_COUNT/$TOTAL_ASSETS assets found"
          echo "‚úÖ Static asset validation completed"

      - name: üìä Generate Validation Report
        run: |
          DEPLOYMENT_URL="${{ steps.url.outputs.deployment_url }}"
          
          echo "# üöÄ Deployment Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL**: $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Health Check**: Passed (deployment mode)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ÑπÔ∏è **Database**: Optional for preview deployments" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **API Endpoints**: Core endpoints validated" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Static Assets**: Asset delivery validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$DEPLOYMENT_URL" == *"vercel.app"* ]] && [[ "$DEPLOYMENT_URL" != *"alocubanoboulderfest.vercel.app"* ]]; then
            echo "**Deployment Type**: Preview" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: Some features may be limited without full environment configuration" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Deployment Type**: Production" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ‚úÖ Deployment validation successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: Deployment is ready for use" >> $GITHUB_STEP_SUMMARY

  # Performance smoke test
  performance-smoke-test:
    name: ‚ö° Performance Smoke Test
    runs-on: ubuntu-latest
    needs: validate-deployment
    timeout-minutes: 5
    if: success()

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚ö° Quick Performance Check
        run: |
          DEPLOYMENT_URL="${{ needs.validate-deployment.outputs.deployment_url || github.event.deployment_status.environment_url }}"
          
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "‚ö†Ô∏è No deployment URL available for performance testing"
            exit 0
          fi
          
          echo "‚ö° Running performance smoke test..."
          echo "Target: $DEPLOYMENT_URL"
          
          # Simple response time check using deployment mode
          start_time=$(date +%s%N)
          
          if curl -f -s --connect-timeout 30 --max-time 60 "${DEPLOYMENT_URL}/api/health/check?deployment=true" > /dev/null; then
            end_time=$(date +%s%N)
            response_time=$(( (end_time - start_time) / 1000000 )) # Convert to milliseconds
            
            echo "‚úÖ Response time: ${response_time}ms"
            
            if [ $response_time -lt 2000 ]; then
              echo "‚úÖ Performance: Good (under 2 seconds)"
            elif [ $response_time -lt 5000 ]; then
              echo "‚ö†Ô∏è Performance: Acceptable (2-5 seconds)"
            else
              echo "‚ö†Ô∏è Performance: Slow (over 5 seconds)"
            fi
          else
            echo "‚ùå Performance smoke test failed - endpoint not responding"
          fi