name: Staging Deployment

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test suite (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  STAGING_URL: 'https://staging-alocubano-boulderfest.vercel.app'

jobs:
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      turso:
        image: ghcr.io/tursodatabase/libsql-server:latest
        ports:
          - 8080:8080
        env:
          LIBSQL_SERVER_LISTEN_ADDR: '0.0.0.0:8080'
          LIBSQL_SERVER_HTTP_LISTEN_ADDR: '0.0.0.0:8080'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline
      
      - name: Setup test environment
        run: |
          cp .env.example .env.local
          echo "TURSO_DATABASE_URL=http://127.0.0.1:8080" >> .env.local
          echo "E2E_TEST_MODE=true" >> .env.local
          echo "ENVIRONMENT=staging-test" >> .env.local
      
      - name: Setup staging database
        env:
          TURSO_DATABASE_URL: http://127.0.0.1:8080
        run: |
          npm run migrate:up
          npm run db:e2e:setup
      
      - name: Run unit tests
        run: npm test
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start development server
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          TURSO_DATABASE_URL: http://127.0.0.1:8080
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          TURSO_DATABASE_URL: http://127.0.0.1:8080
          E2E_TEST_MODE: true
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-staging
          path: playwright-report/
          retention-days: 7

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    environment:
      name: staging
      url: ${{ env.STAGING_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Deploy to Vercel Staging
        run: |
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes > deployment-url.txt
          echo "DEPLOYMENT_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          TURSO_DATABASE_URL: ${{ secrets.TURSO_STAGING_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_STAGING_AUTH_TOKEN }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
          BREVO_NEWSLETTER_LIST_ID: ${{ secrets.BREVO_NEWSLETTER_LIST_ID }}
          BREVO_WEBHOOK_SECRET: ${{ secrets.BREVO_WEBHOOK_SECRET }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_TEST_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_TEST_WEBHOOK_SECRET }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
          APPLE_PASS_KEY: ${{ secrets.APPLE_PASS_KEY }}
          WALLET_AUTH_SECRET: ${{ secrets.WALLET_AUTH_SECRET }}
      
      - name: Alias staging deployment
        run: |
          vercel alias ${{ env.DEPLOYMENT_URL }} staging-alocubano-boulderfest.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Update GitHub deployment status
        run: |
          echo "Staging deployment successful: ${{ env.STAGING_URL }}"
          echo "Direct deployment URL: ${{ env.DEPLOYMENT_URL }}"

  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline
      
      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          npx wait-on ${{ env.STAGING_URL }} --timeout 120000 --interval 5000
      
      - name: Run health checks
        run: |
          curl -f ${{ env.STAGING_URL }}/api/health/check || exit 1
          curl -f ${{ env.STAGING_URL }}/api/health/database || exit 1
          echo "✅ Health checks passed"
      
      - name: Test critical endpoints
        run: |
          # Test home page
          curl -f -s ${{ env.STAGING_URL }}/ > /dev/null || exit 1
          echo "✅ Home page accessible"
          
          # Test gallery API
          curl -f -s "${{ env.STAGING_URL }}/api/gallery?limit=1" > /dev/null || exit 1
          echo "✅ Gallery API accessible"
          
          # Test newsletter subscription (should return method not allowed for GET)
          curl -s "${{ env.STAGING_URL }}/api/email/subscribe" | grep -q "Method.*not.*allowed" || exit 1
          echo "✅ Newsletter API accessible"
      
      - name: Run smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: ${{ env.STAGING_URL }}
      
      - name: Verify staging database migrations
        run: |
          # Check if migrations have been applied
          curl -f "${{ env.STAGING_URL }}/api/health/database" | jq -e '.migrations.applied >= 1'
          echo "✅ Database migrations verified"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [test, deploy, smoke-tests]
    if: always()
    
    steps:
      - name: Deployment Success Notification
        if: needs.deploy.result == 'success' && needs.smoke-tests.result == 'success'
        run: |
          echo "🚀 Staging deployment successful!"
          echo "URL: ${{ env.STAGING_URL }}"
          echo "Branch: staging"
          echo "Commit: ${{ github.sha }}"
          echo "Tests: ${{ needs.test.result || 'skipped' }}"
          echo "Smoke tests: ✅ passed"
      
      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure' || needs.smoke-tests.result == 'failure'
        run: |
          echo "❌ Staging deployment failed!"
          echo "Deploy status: ${{ needs.deploy.result }}"
          echo "Smoke tests status: ${{ needs.smoke-tests.result }}"
          echo "Check logs for details"
          exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run dependency security audit
        run: npm audit --audit-level moderate
      
      - name: Security headers check
        run: |
          response=$(curl -sI ${{ env.STAGING_URL }})
          
          # Check for security headers
          echo "$response" | grep -i "x-frame-options" || echo "⚠️ Missing X-Frame-Options header"
          echo "$response" | grep -i "x-content-type-options" || echo "⚠️ Missing X-Content-Type-Options header"
          echo "$response" | grep -i "strict-transport-security" || echo "⚠️ Missing HSTS header"
          
          echo "✅ Security headers scan completed"
      
      - name: SSL certificate check
        run: |
          echo | openssl s_client -servername staging-alocubano-boulderfest.vercel.app \
            -connect staging-alocubano-boulderfest.vercel.app:443 2>/dev/null | \
            openssl x509 -noout -dates
          echo "✅ SSL certificate verified"