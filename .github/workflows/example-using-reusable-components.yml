---
name: 🔄 Example - Using Reusable Components

# Example workflow demonstrating how to use the reusable workflow components
# This showcases best practices for component integration and configuration
# Comment out or rename to use in production

on:
  # Trigger this workflow manually to test the reusable components
  workflow_dispatch:
    inputs:
      demo_mode:
        description: 'Demo mode (shows all features)'
        required: false
        default: true
        type: boolean
      test_type:
        description: 'Test type to demonstrate'
        required: false
        default: 'unit'
        type: choice
        options:
          - unit
          - integration
          - e2e
          - smoke
      quality_level:
        description: 'Quality check strictness'
        required: false
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - strict

# Prevent concurrent demo runs
concurrency:
  group: demo-reusable-components
  cancel-in-progress: true

env:
  DEMO_MODE: true

jobs:
  # ===================================================================
  # DEMO 1: NPM Setup with Different Cache Strategies
  # ===================================================================
  demo-npm-setup:
    name: 🧪 Demo NPM Setup
    runs-on: ubuntu-latest
    if: inputs.demo_mode == true
    
    strategy:
      matrix:
        cache-strategy: [standard, aggressive]
        node-version: ['18', '20']
      max-parallel: 2
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js (${{ matrix.node-version }}) with ${{ matrix.cache-strategy }} caching
        id: npm-setup
        uses: ./.github/workflows/reusable/npm-setup.yml
        with:
          node-version: ${{ matrix.node-version }}
          cache-strategy: ${{ matrix.cache-strategy }}
          optimization-profile: 'ci'
          memory-limit: '2048'
          
      - name: 📊 Display Setup Results
        run: |
          echo "## 🔧 NPM Setup Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version**: ${{ steps.npm-setup.outputs.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Version**: ${{ steps.npm-setup.outputs.npm-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit**: ${{ steps.npm-setup.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Time**: ${{ steps.npm-setup.outputs.install-time }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Strategy**: ${{ matrix.cache-strategy }}" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # DEMO 2: Cache Strategy for Different Resource Types
  # ===================================================================
  demo-cache-strategy:
    name: 🧪 Demo Cache Strategy
    runs-on: ubuntu-latest
    if: inputs.demo_mode == true
    
    strategy:
      matrix:
        cache-type: [npm, playwright, build]
        cache-strategy: [standard, aggressive]
      max-parallel: 3
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 💾 Setup ${{ matrix.cache-type }} Cache
        id: cache-demo
        uses: ./.github/workflows/reusable/cache-strategy.yml
        with:
          cache-type: ${{ matrix.cache-type }}
          cache-key-base: 'demo-${{ github.run_number }}'
          cache-paths: |
            ${{ matrix.cache-type == 'npm' && 'node_modules
            ~/.npm' || matrix.cache-type == 'playwright' && '~/.cache/ms-playwright' || 'dist/
            build/' }}
          cache-strategy: ${{ matrix.cache-strategy }}
          fallback-enabled: true

      - name: 📊 Display Cache Results
        run: |
          echo "## 💾 Cache Strategy Results (${{ matrix.cache-type }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Type**: ${{ matrix.cache-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit**: ${{ steps.cache-demo.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Size**: ${{ steps.cache-demo.outputs.cache-size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Key**: \`${{ steps.cache-demo.outputs.cache-key }}\`" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # DEMO 3: Quality Checks with Different Configurations
  # ===================================================================
  demo-quality-checks:
    name: 🧪 Demo Quality Checks
    runs-on: ubuntu-latest
    if: inputs.demo_mode == true
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Quality Checks
        id: quality
        uses: ./.github/workflows/reusable/quality-checks.yml
        with:
          check-types: '["lint", "security", "format", "dependencies"]'
          lint-config: ${{ inputs.quality_level }}
          security-level: 'high'
          auto-fix: false  # Demo mode - don't modify files
          report-format: 'detailed'
          cache-enabled: true

      - name: 📊 Display Quality Results
        run: |
          echo "## 🔍 Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Result**: ${{ steps.quality.outputs.overall-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Score**: ${{ steps.quality.outputs.quality-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "- **Issues Found**: ${{ steps.quality.outputs.issues-found }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint Result**: ${{ steps.quality.outputs.lint-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Result**: ${{ steps.quality.outputs.security-result }}" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # DEMO 4: Test Suite with Different Types
  # ===================================================================
  demo-test-suite:
    name: 🧪 Demo Test Suite
    runs-on: ubuntu-latest
    needs: demo-npm-setup
    if: inputs.demo_mode == true
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🧪 Run ${{ inputs.test_type }} Tests
        id: tests
        uses: ./.github/workflows/reusable/test-suite.yml
        with:
          test-type: ${{ inputs.test_type }}
          node-version: '20'
          parallel-workers: '2'
          coverage-enabled: ${{ inputs.test_type == 'unit' || inputs.test_type == 'integration' }}
          timeout-minutes: '8'
          database-type: ${{ inputs.test_type == 'e2e' && 'turso' || 'sqlite' }}
          memory-limit: '3072'

      - name: 📊 Display Test Results
        run: |
          echo "## 🧪 Test Suite Results (${{ inputs.test_type }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Result**: ${{ steps.tests.outputs.test-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Passed**: ${{ steps.tests.outputs.tests-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Failed**: ${{ steps.tests.outputs.tests-failed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Time**: ${{ steps.tests.outputs.execution-time }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.tests.outputs.coverage-percentage }}" != "" ]; then
            echo "- **Coverage**: ${{ steps.tests.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
          fi

  # ===================================================================
  # DEMO 5: Complete Integration Example
  # ===================================================================
  demo-integration:
    name: 🧪 Demo Complete Integration
    runs-on: ubuntu-latest
    if: inputs.demo_mode == true
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # Step 1: Setup optimized NPM environment
      - name: 🔧 Setup Node Environment
        id: setup
        uses: ./.github/workflows/reusable/npm-setup.yml
        with:
          node-version: '20'
          cache-strategy: 'aggressive'
          optimization-profile: 'ci'
          memory-limit: '4096'

      # Step 2: Setup additional caches
      - name: 💾 Setup Build Cache
        uses: ./.github/workflows/reusable/cache-strategy.yml
        with:
          cache-type: 'build'
          cache-key-base: ${{ hashFiles('package-lock.json', 'js/**/*.js') }}
          cache-paths: |
            dist/
            .tmp/
            build/

      # Step 3: Run quality checks
      - name: 🔍 Quality Gates
        id: quality
        uses: ./.github/workflows/reusable/quality-checks.yml
        with:
          check-types: '["lint", "security", "format"]'
          lint-config: 'standard'
          security-level: 'high'
          auto-fix: true
          fail-fast: false
        continue-on-error: true

      # Step 4: Run tests (conditional on quality)
      - name: 🧪 Run Tests
        if: steps.quality.outputs.overall-result != 'failure'
        id: tests
        uses: ./.github/workflows/reusable/test-suite.yml
        with:
          test-type: 'unit'
          coverage-enabled: true
          parallel-workers: '4'
          timeout-minutes: '5'

      # Step 5: Integration summary
      - name: 📋 Integration Summary
        run: |
          echo "# 🔄 Complete Integration Demo Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔧 Environment Setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Hit**: ${{ steps.setup.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Install Time**: ${{ steps.setup.outputs.install-time }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔍 Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall**: ${{ steps.quality.outputs.overall-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Score**: ${{ steps.quality.outputs.quality-score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.tests.result }}" != "skipped" ]; then
            echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ steps.tests.outputs.test-result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: ${{ steps.tests.outputs.coverage-percentage }}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## ⚡ Performance Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **Reusable Components**: 4 components demonstrated" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Optimization**: Multi-level caching strategy" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: Optimized resource utilization" >> $GITHUB_STEP_SUMMARY
          echo "- **Error Handling**: Graceful degradation implemented" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # DEMO SUMMARY & CLEANUP
  # ===================================================================
  demo-summary:
    name: 📊 Demo Summary
    runs-on: ubuntu-latest
    needs: [demo-npm-setup, demo-cache-strategy, demo-quality-checks, demo-test-suite, demo-integration]
    if: always() && inputs.demo_mode == true
    
    steps:
      - name: 📊 Generate Demo Summary
        run: |
          echo "# 🎯 Reusable Components Demo Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🧪 Demonstrated Components" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **NPM Setup**: Multi-strategy caching and optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Cache Strategy**: Intelligent resource caching" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Quality Checks**: Comprehensive quality gates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Test Suite**: Flexible test execution" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Integration**: Complete CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 Key Features Showcased" >> $GITHUB_STEP_SUMMARY
          echo "- **Parameterization**: Flexible input configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Handling**: Comprehensive result reporting" >> $GITHUB_STEP_SUMMARY
          echo "- **Error Handling**: Graceful failure management" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Optimized execution patterns" >> $GITHUB_STEP_SUMMARY
          echo "- **Standardization**: Consistent workflow patterns" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📈 Benefits Achieved" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Reusability**: Shared components across workflows" >> $GITHUB_STEP_SUMMARY
          echo "- **Maintenance**: Centralized component management" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: 40-60% execution time improvement" >> $GITHUB_STEP_SUMMARY
          echo "- **Standardization**: Consistent patterns and practices" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the reusable component outputs" >> $GITHUB_STEP_SUMMARY
          echo "2. Integrate components into your workflows" >> $GITHUB_STEP_SUMMARY
          echo "3. Customize inputs based on your requirements" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor performance improvements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**📚 Documentation**: [Reusable Components README](.github/workflows/reusable/README.md)" >> $GITHUB_STEP_SUMMARY