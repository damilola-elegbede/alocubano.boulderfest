name: Integration Tests

on:
  push:
    branches: [main, develop, 'feature/**', 'refactor/**']
  pull_request:
    branches: [main, develop]

env:
  NODE_ENV: test
  CI: true
  # Test environment variables
  TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL_TEST }}
  TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN_TEST }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST }}
  STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_TEST }}
  STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY_TEST }}
  BREVO_API_KEY: ${{ secrets.BREVO_API_KEY_TEST }}
  BREVO_NEWSLETTER_LIST_ID: ${{ secrets.BREVO_NEWSLETTER_LIST_ID }}
  BREVO_WEBHOOK_SECRET: ${{ secrets.BREVO_WEBHOOK_SECRET }}
  ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD_TEST }}
  ADMIN_SECRET: ${{ secrets.ADMIN_SECRET_TEST || 'test-admin-secret-key-32-characters-long' }}
  QR_SECRET_KEY: ${{ secrets.QR_SECRET_KEY }}

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: false  # Temporarily disabled - replaced by test-new-framework.yml with mock server support

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        test-suite:
          - payments
          - tickets
          - admin-auth
          - email
          - database-transactions

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          echo "Setting up test database..."
          npm run migrate:test || true

      - name: Run ${{ matrix.test-suite }} integration tests
        run: |
          cd tests-new
          npx vitest run integration/${{ matrix.test-suite }}.test.js --config vitest.config.js --reporter=verbose
        env:
          INTEGRATION_NEEDS_SERVER: false
          TEST_TIMEOUT: 30000

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-suite }}
          path: tests-new/coverage/
          retention-days: 7

  test-coverage:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all integration tests with coverage
        run: |
          cd tests-new
          npx vitest run integration/*.test.js --config vitest.config.js --coverage
        env:
          INTEGRATION_NEEDS_SERVER: false

      - name: Generate coverage report
        run: |
          cd tests-new
          npx c8 report --reporter=text --reporter=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./tests-new/coverage
          flags: integration
          name: integration-coverage
          fail_ci_if_error: false

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('tests-new/coverage/coverage-summary.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Integration Test Coverage Report\n\n\`\`\`\n${coverage}\n\`\`\``
            });

  performance-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          # Run the new test framework with JSON reporter
          npm run test:new -- --reporter=json > tests-new/performance.json 2>/dev/null || true
          
          # Ensure file exists and is valid JSON
          if [ ! -f tests-new/performance.json ] || [ ! -s tests-new/performance.json ]; then
            echo '{"testResults":[],"numTotalTests":0,"numPassedTests":0,"numFailedTests":0}' > tests-new/performance.json
          fi
          
          # Validate JSON structure
          cd tests-new
          node -e "try { JSON.parse(require('fs').readFileSync('performance.json', 'utf8')); console.log('✅ Valid JSON generated'); } catch(e) { console.error('❌ Invalid JSON, using fallback'); require('fs').writeFileSync('performance.json', JSON.stringify({testResults:[],numTotalTests:0,numPassedTests:0,numFailedTests:0})); }"
        env:
          NODE_ENV: test
          CI: true
          TURSO_DATABASE_URL: file:./test-integration.db
          ADMIN_SECRET: test-admin-secret-key-32-characters-long-enough
          ADMIN_PASSWORD: $2b$10$PMCZ6tj2JVicCvLQIV.NfuQ93bMjJbxrA8AsJsSngMrwm4G4iN5eG
          QR_SECRET_KEY: test-qr-secret-key-32-characters-long-abc
          STRIPE_WEBHOOK_SECRET: whsec_test_webhook_secret_for_integration_tests
          BREVO_WEBHOOK_SECRET: brevo_test_webhook_secret_for_integration_tests

      - name: Analyze performance
        run: |
          node -e "
            const results = require('./tests-new/performance.json');
            const testResults = results.testResults || [];
            const totalTime = testResults.reduce((acc, r) => acc + (r.duration || 0), 0);
            const avgTime = testResults.length > 0 ? totalTime / testResults.length : 0;
            
            console.log('Performance Metrics:');
            console.log('Total Duration:', totalTime, 'ms');
            console.log('Average Test Duration:', avgTime.toFixed(2), 'ms');
            console.log('Test Count:', results.numTotalTests || 0);
            
            if (totalTime > 60000) {
              console.error('Tests taking too long!');
              process.exit(1);
            }
          "

      - name: Comment PR with performance metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('tests-new/performance.json', 'utf8'));
            const testResults = results.testResults || [];
            const totalTime = testResults.reduce((acc, r) => acc + (r.duration || 0), 0);
            const avgTime = testResults.length > 0 ? totalTime / testResults.length : 0;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Performance Report\n\n- **Total Duration**: ${totalTime}ms\n- **Average Test Duration**: ${avgTime.toFixed(2)}ms\n- **Total Tests**: ${results.numTotalTests || 0}\n- **Passed**: ${results.numPassedTests || 0}\n- **Failed**: ${results.numFailedTests || 0}`
            });

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=critical || npm audit --audit-level=high --production

      - name: Check for exposed secrets
        run: |
          # Check for exposed API keys or secrets (excluding test files and fixtures)
          # Only fail if we find actual production keys, not test keys
          
          # Check for Stripe live keys (not test keys)
          if grep -r "sk_live" tests-new/ --exclude-dir=node_modules --exclude-dir=fixtures --exclude-dir=helpers --exclude="*.test.js" --exclude="*.md" 2>/dev/null; then
            echo "❌ Found exposed Stripe live key!"
            exit 1
          fi
          
          # Check for Brevo production keys (xkeysib- prefix) - but allow in test files
          if grep -r "xkeysib-[a-zA-Z0-9]*-[a-zA-Z0-9]*" tests-new/ --exclude-dir=node_modules --exclude-dir=fixtures --exclude-dir=helpers --exclude="*.test.js" --exclude="*.md" 2>/dev/null | grep -v "test" | grep -v "mock"; then
            echo "❌ Found exposed Brevo production key!"
            exit 1
          fi
          
          # Webhook secrets are expected in test files, so only check for production patterns
          if grep -r "whsec_[a-zA-Z0-9]{32,}" tests-new/ --exclude-dir=node_modules --exclude-dir=fixtures --exclude-dir=helpers --exclude="*.test.js" --exclude="*.md" 2>/dev/null | grep -v "test" | grep -v "mock"; then
            echo "⚠️ Found potential webhook secret (may be test fixture)"
          fi
          
          echo "✅ No production secrets found in code"