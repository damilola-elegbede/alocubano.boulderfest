name: Mock Drift Detection

on:
  schedule:
    # Run every Monday at 9 AM UTC (weekly check)
    - cron: '0 9 * * 1'
  
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: 'false'
        type: boolean
  
  pull_request:
    # Run on PRs that modify mock server or API endpoints
    paths:
      - 'tests/ci-mock-server.js'
      - 'api/**/*.js'
      - 'scripts/mock-drift-detector.js'

env:
  NODE_VERSION: '18'
  # Test timeout
  TEST_TIMEOUT: '120000'

jobs:
  drift-detection:
    name: Mock Drift Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Setup Test Environment
        run: |
          # Create necessary directories
          mkdir -p .tmp/drift-reports
          mkdir -p data
          
          # Set up environment variables for testing
          echo "DATABASE_URL=file:./data/test.db" >> $GITHUB_ENV
          echo "TEST_ADMIN_PASSWORD=test-password" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Setup Test Database
        run: |
          # Initialize test database for API endpoints that need it
          npm run migrate:up || echo "Migration setup completed"

      - name: Run Mock Drift Detection
        id: drift_detection
        run: |
          if [ "${{ github.event.inputs.verbose }}" == "true" ]; then
            npm run drift:detect:verbose
          else
            npm run drift:detect:weekly
          fi
        env:
          REAL_API_URL: 'http://localhost:3000'
          MOCK_API_URL: 'http://localhost:3001'
          DRIFT_REPORTS_DIR: '.tmp/drift-reports'
        continue-on-error: true

      - name: Upload Drift Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: drift-report-${{ github.run_id }}
          path: .tmp/drift-reports/
          retention-days: 30

      - name: Process Drift Results
        id: process_results
        run: |
          # Check if any drift reports were generated
          if [ -d ".tmp/drift-reports" ] && [ "$(ls -A .tmp/drift-reports)" ]; then
            latest_report=$(ls -t .tmp/drift-reports/drift-report-*.json | head -n1)
            if [ -f "$latest_report" ]; then
              echo "report_exists=true" >> $GITHUB_OUTPUT
              
              # Extract key metrics from the report
              health_score=$(jq -r '.summary.health_score // 0' "$latest_report")
              total_drifted=$(jq -r '.summary.overall.drifted // 0' "$latest_report")
              high_severity=$(jq -r '.summary.by_severity.high // 0' "$latest_report")
              
              echo "health_score=$health_score" >> $GITHUB_OUTPUT
              echo "total_drifted=$total_drifted" >> $GITHUB_OUTPUT
              echo "high_severity=$high_severity" >> $GITHUB_OUTPUT
              
              # Generate summary for PR comment or issue
              echo "## üìä Mock Drift Detection Results" > drift_summary.md
              echo "" >> drift_summary.md
              echo "**Health Score:** $health_score/100" >> drift_summary.md
              echo "**Total Drifted Endpoints:** $total_drifted" >> drift_summary.md
              echo "**High Severity Issues:** $high_severity" >> drift_summary.md
              echo "" >> drift_summary.md
              
              # Add recommendations if any
              if [ "$high_severity" -gt 0 ]; then
                echo "üö® **Critical Action Required:** $high_severity high-severity drift issues detected." >> drift_summary.md
                echo "Mock responses need immediate updates to prevent test failures." >> drift_summary.md
              elif [ "$total_drifted" -gt 0 ]; then
                echo "‚ö†Ô∏è **Attention Required:** $total_drifted endpoints have drift." >> drift_summary.md
                echo "Consider updating mock responses to maintain test accuracy." >> drift_summary.md
              else
                echo "‚úÖ **All Good:** No drift detected - mocks are in sync!" >> drift_summary.md
              fi
              
              echo "" >> drift_summary.md
              echo "üìã [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> drift_summary.md
            else
              echo "report_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.process_results.outputs.report_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('drift_summary.md')) {
              const summary = fs.readFileSync('drift_summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Create Issue for Critical Drift (Weekly Check)
        if: |
          github.event_name == 'schedule' && 
          steps.process_results.outputs.high_severity != '0' &&
          steps.process_results.outputs.report_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const highSeverity = '${{ steps.process_results.outputs.high_severity }}';
            const totalDrifted = '${{ steps.process_results.outputs.total_drifted }}';
            
            const title = `üö® Critical Mock Drift Detected - ${highSeverity} High Severity Issues`;
            const body = `
            ## Critical Mock Drift Alert
            
            The weekly drift detection has identified **${highSeverity} high-severity** drift issues that require immediate attention.
            
            ### Summary
            - **Total Drifted Endpoints:** ${totalDrifted}
            - **High Severity Issues:** ${highSeverity}
            - **Health Score:** ${{ steps.process_results.outputs.health_score }}/100
            
            ### Action Required
            1. Review the [full drift report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Update mock responses in \`tests/ci-mock-server.js\` to match real API responses
            3. Run \`npm run drift:detect\` locally to verify fixes
            4. Re-run weekly drift detection to confirm resolution
            
            ### Impact
            High-severity drift issues can cause:
            - Test failures in CI/CD pipelines
            - False positives/negatives in test results
            - Reduced confidence in test coverage
            
            **This issue was automatically created by the Mock Drift Detection system.**
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'testing', 'high-priority', 'automated-issue']
            });

      - name: Set Job Status
        if: always()
        run: |
          if [ "${{ steps.drift_detection.outcome }}" == "failure" ]; then
            echo "‚ùå Drift detection script failed"
            exit 1
          elif [ "${{ steps.process_results.outputs.high_severity }}" != "0" ] && [ "${{ steps.process_results.outputs.high_severity }}" != "" ]; then
            echo "üö® Critical drift detected"
            exit 2
          elif [ "${{ steps.process_results.outputs.total_drifted }}" != "0" ] && [ "${{ steps.process_results.outputs.total_drifted }}" != "" ]; then
            echo "‚ö†Ô∏è Minor drift detected"
            exit 1
          else
            echo "‚úÖ No drift detected"
            exit 0
          fi

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: drift-detection
    if: always() && github.event_name == 'schedule'
    
    steps:
      - name: Send Slack Notification (Success)
        if: needs.drift-detection.result == 'success'
        run: |
          echo "‚úÖ Weekly mock drift detection completed successfully"
          echo "All mock responses are in sync with real API responses"
          # Add Slack webhook integration here if needed
          
      - name: Send Slack Notification (Failure)
        if: needs.drift-detection.result != 'success'
        run: |
          echo "üö® Weekly mock drift detection detected issues"
          echo "Check GitHub Actions for detailed report and take action"
          # Add Slack webhook integration here if needed