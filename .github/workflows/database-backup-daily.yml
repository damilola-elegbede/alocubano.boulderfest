name: "üíæ Daily Database Backup"

on:
  schedule:
    # Daily at 3 AM UTC (8 PM Mountain Time previous day)
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      database:
        description: 'Database to backup (prod, dev, or both)'
        required: false
        default: 'both'
        type: choice
        options:
          - both
          - prod
          - dev

permissions:
  contents: read

env:
  NODE_VERSION: "20.19.5"

jobs:
  backup-production:
    name: "üíæ Backup Production"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Run on schedule or when manually triggered for prod/both
    if: |
      github.event_name == 'schedule' ||
      github.event.inputs.database == 'both' ||
      github.event.inputs.database == 'prod'

    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v4

      - name: "üîß Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Install Dependencies"
        run: |
          echo "üì¶ Installing @vercel/blob SDK..."
          npm install @vercel/blob --no-save --no-audit

      - name: "üîß Install Turso CLI"
        run: |
          echo "üîß Installing Turso CLI..."
          curl -sSfL https://get.tur.so/install.sh | bash
          echo "$HOME/.turso/bin" >> $GITHUB_PATH

      - name: "üîê Authenticate with Turso"
        env:
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
        run: |
          echo "üîê Configuring Turso authentication..."
          mkdir -p ~/.config/turso
          echo "$TURSO_AUTH_TOKEN" > ~/.config/turso/token

          # Verify authentication
          turso db list > /dev/null 2>&1 || {
            echo "‚ùå Turso authentication failed"
            exit 1
          }
          echo "‚úÖ Turso authentication successful"

      - name: "üíæ Create Database Backup"
        id: backup
        env:
          DB_NAME: ${{ vars.TURSO_PROD_DB_NAME }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üíæ Creating Production Database Backup"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Database: $DB_NAME"
          echo "üìÖ Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Generate backup filename with timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d_%H-%M-%S')
          BACKUP_FILE="backup-prod-${TIMESTAMP}.sql"
          COMPRESSED_FILE="${BACKUP_FILE}.gz"

          # Dump database
          echo "üì§ Dumping database..."
          turso db shell "$DB_NAME" .dump > "$BACKUP_FILE"

          # Check if dump succeeded
          if [ ! -s "$BACKUP_FILE" ]; then
            echo "‚ùå Database dump failed or is empty"
            exit 1
          fi

          ORIGINAL_SIZE=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE")
          echo "‚úÖ Database dumped: $(numfmt --to=iec-i --suffix=B $ORIGINAL_SIZE || echo ${ORIGINAL_SIZE}B)"

          # Compress backup
          echo "üóúÔ∏è  Compressing backup..."
          gzip -9 "$BACKUP_FILE"

          COMPRESSED_SIZE=$(stat -f%z "$COMPRESSED_FILE" 2>/dev/null || stat -c%s "$COMPRESSED_FILE")
          COMPRESSION_RATIO=$(awk "BEGIN {printf \"%.1f\", (1 - $COMPRESSED_SIZE / $ORIGINAL_SIZE) * 100}")

          echo "‚úÖ Backup compressed: $(numfmt --to=iec-i --suffix=B $COMPRESSED_SIZE || echo ${COMPRESSED_SIZE}B) (${COMPRESSION_RATIO}% reduction)"

          # Export variables for next steps
          echo "backup_file=$COMPRESSED_FILE" >> $GITHUB_OUTPUT
          echo "original_size=$ORIGINAL_SIZE" >> $GITHUB_OUTPUT
          echo "compressed_size=$COMPRESSED_SIZE" >> $GITHUB_OUTPUT
          echo "compression_ratio=$COMPRESSION_RATIO" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: "‚òÅÔ∏è  Upload to Vercel Blob Storage"
        env:
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
        run: |
          echo "‚òÅÔ∏è  Uploading backup to Vercel Blob Storage..."
          node scripts/upload-backup-to-blob.js \
            "${{ steps.backup.outputs.backup_file }}" \
            "prod"

      - name: "üßπ Cleanup Old Backups"
        env:
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
        run: |
          echo "üßπ Cleaning up backups older than 30 days..."
          node scripts/cleanup-old-backups.js --retention-days 30

      - name: "üì§ Upload Backup Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-prod-${{ steps.backup.outputs.timestamp }}
          path: ${{ steps.backup.outputs.backup_file }}
          retention-days: 7
          compression-level: 0  # Already compressed with gzip

      - name: "üìä Backup Summary"
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Backup Summary - Production"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Status: ${{ job.status }}"
          echo "üì¶ Original Size: ${{ steps.backup.outputs.original_size }} bytes"
          echo "üóúÔ∏è  Compressed Size: ${{ steps.backup.outputs.compressed_size }} bytes"
          echo "üìâ Compression: ${{ steps.backup.outputs.compression_ratio }}%"
          echo "üìÖ Timestamp: ${{ steps.backup.outputs.timestamp }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

  backup-development:
    name: "üíæ Backup Development"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Run on schedule or when manually triggered for dev/both
    if: |
      github.event_name == 'schedule' ||
      github.event.inputs.database == 'both' ||
      github.event.inputs.database == 'dev'

    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v4

      - name: "üîß Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "üì¶ Install Dependencies"
        run: |
          echo "üì¶ Installing @vercel/blob SDK..."
          npm install @vercel/blob --no-save --no-audit

      - name: "üîß Install Turso CLI"
        run: |
          echo "üîß Installing Turso CLI..."
          curl -sSfL https://get.tur.so/install.sh | bash
          echo "$HOME/.turso/bin" >> $GITHUB_PATH

      - name: "üîê Authenticate with Turso"
        env:
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
        run: |
          echo "üîê Configuring Turso authentication..."
          mkdir -p ~/.config/turso
          echo "$TURSO_AUTH_TOKEN" > ~/.config/turso/token

          # Verify authentication
          turso db list > /dev/null 2>&1 || {
            echo "‚ùå Turso authentication failed"
            exit 1
          }
          echo "‚úÖ Turso authentication successful"

      - name: "üíæ Create Database Backup"
        id: backup
        env:
          DB_NAME: ${{ vars.TURSO_DEV_DB_NAME }}
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üíæ Creating Development Database Backup"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Database: $DB_NAME"
          echo "üìÖ Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

          # Generate backup filename with timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d_%H-%M-%S')
          BACKUP_FILE="backup-dev-${TIMESTAMP}.sql"
          COMPRESSED_FILE="${BACKUP_FILE}.gz"

          # Dump database
          echo "üì§ Dumping database..."
          turso db shell "$DB_NAME" .dump > "$BACKUP_FILE"

          # Check if dump succeeded
          if [ ! -s "$BACKUP_FILE" ]; then
            echo "‚ùå Database dump failed or is empty"
            exit 1
          fi

          ORIGINAL_SIZE=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE")
          echo "‚úÖ Database dumped: $(numfmt --to=iec-i --suffix=B $ORIGINAL_SIZE || echo ${ORIGINAL_SIZE}B)"

          # Compress backup
          echo "üóúÔ∏è  Compressing backup..."
          gzip -9 "$BACKUP_FILE"

          COMPRESSED_SIZE=$(stat -f%z "$COMPRESSED_FILE" 2>/dev/null || stat -c%s "$COMPRESSED_FILE")
          COMPRESSION_RATIO=$(awk "BEGIN {printf \"%.1f\", (1 - $COMPRESSED_SIZE / $ORIGINAL_SIZE) * 100}")

          echo "‚úÖ Backup compressed: $(numfmt --to=iec-i --suffix=B $COMPRESSED_SIZE || echo ${COMPRESSED_SIZE}B) (${COMPRESSION_RATIO}% reduction)"

          # Export variables for next steps
          echo "backup_file=$COMPRESSED_FILE" >> $GITHUB_OUTPUT
          echo "original_size=$ORIGINAL_SIZE" >> $GITHUB_OUTPUT
          echo "compressed_size=$COMPRESSED_SIZE" >> $GITHUB_OUTPUT
          echo "compression_ratio=$COMPRESSION_RATIO" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: "‚òÅÔ∏è  Upload to Vercel Blob Storage"
        env:
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
        run: |
          echo "‚òÅÔ∏è  Uploading backup to Vercel Blob Storage..."
          node scripts/upload-backup-to-blob.js \
            "${{ steps.backup.outputs.backup_file }}" \
            "dev"

      - name: "üßπ Cleanup Old Backups"
        env:
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}
        run: |
          echo "üßπ Cleaning up backups older than 30 days..."
          node scripts/cleanup-old-backups.js --retention-days 30

      - name: "üì§ Upload Backup Artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-dev-${{ steps.backup.outputs.timestamp }}
          path: ${{ steps.backup.outputs.backup_file }}
          retention-days: 7
          compression-level: 0  # Already compressed with gzip

      - name: "üìä Backup Summary"
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Backup Summary - Development"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚úÖ Status: ${{ job.status }}"
          echo "üì¶ Original Size: ${{ steps.backup.outputs.original_size }} bytes"
          echo "üóúÔ∏è  Compressed Size: ${{ steps.backup.outputs.compressed_size }} bytes"
          echo "üìâ Compression: ${{ steps.backup.outputs.compression_ratio }}%"
          echo "üìÖ Timestamp: ${{ steps.backup.outputs.timestamp }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

  notify:
    name: "üìß Notify on Failure"
    runs-on: ubuntu-latest
    needs: [backup-production, backup-development]
    if: always() && (needs.backup-production.result == 'failure' || needs.backup-development.result == 'failure')

    steps:
      - name: "üìß Send Failure Notification"
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå BACKUP FAILURE NOTIFICATION"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚è∞ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "‚ö†Ô∏è  Daily database backup failed!"
          echo "   Please check the workflow logs and investigate immediately."
          echo ""
          echo "üîç Common Issues:"
          echo "   - Turso authentication failure (check TURSO_AUTH_TOKEN)"
          echo "   - Vercel Blob upload failure (check BLOB_READ_WRITE_TOKEN)"
          echo "   - Database connectivity issues"
          echo "   - Insufficient storage quota"
          echo ""
          echo "üìö See docs/DISASTER_RECOVERY.md for troubleshooting guidance"
