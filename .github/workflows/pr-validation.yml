name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

# Cancel in-progress runs for the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        timeout-minutes: 3
      
      - name: Check commit messages
        run: |
          echo "Validating commit messages..."
          git log --format='%s' origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }} | while read commit; do
            if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?:\ .+ ]]; then
              echo "‚ùå Invalid commit message format: $commit"
              echo "Expected format: type(scope): description"
              exit 1
            fi
          done
        continue-on-error: true
      
      - name: Check file sizes
        run: |
          echo "Checking for large files..."
          find . -type f -size +1M ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./coverage/*" -exec ls -lh {} \; | while read line; do
            echo "‚ö†Ô∏è  Large file detected: $line"
          done
      
      - name: Run database migrations
        run: npm run migrate:up
        timeout-minutes: 2
      
      - name: Run all quality checks
        run: |
          echo "::group::ESLint"
          npm run lint:js || true
          echo "::endgroup::"
          
          echo "::group::HTMLHint"
          npm run lint:html || true
          echo "::endgroup::"
          
          echo "::group::Structure Validation"
          npm run verify-structure
          echo "::endgroup::"
      
      - name: Run unit tests
        run: npm test
        timeout-minutes: 5
        env:
          NODE_ENV: test
          NODE_OPTIONS: --max-old-space-size=4096
      
      - name: Check for merge conflicts
        run: |
          if grep -rn "^<<<<<<< \|^======= \|^>>>>>>> " --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "‚ùå Merge conflict markers detected!"
            exit 1
          fi
      
      - name: Generate PR report
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            
            const body = `## PR Validation Report ${emoji}
            
            ### Checks Performed
            - üìù Commit message format
            - üì¶ File size validation  
            - üóÉÔ∏è Database migrations
            - üßπ Code linting (ESLint, HTMLHint)
            - üèóÔ∏è Project structure validation
            - ‚úÖ Unit tests (26 tests)
            - üîÄ Merge conflict detection
            
            **Overall Status:** ${status}
            **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This is an automated PR validation. All checks must pass before merging.*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }