---
name: 🚀 PR Validation Pipeline

# Fast PR validation with smoke tests and optional E2E
# Optimized for quick feedback while maintaining quality

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

# Prevent concurrent runs for same PR
concurrency:
  group: pr-validation-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: "20"
  CI: true
  NODE_OPTIONS: "--max-old-space-size=1024"

jobs:
  # Fast smoke test for immediate feedback
  smoke-test:
    name: 🚀 Fast Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for speed
          
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund
        
      - name: 🔍 Quick linting
        run: npm run lint:js  # Only JavaScript linting, skip HTML for speed
        
      - name: 💨 Smoke tests only
        run: npm run test:smoke
        
      - name: 📊 PR Status Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const status = success ? '✅ Smoke tests passed!' : '❌ Smoke tests failed';
            
            const body = `## 🚀 PR Smoke Test Results

${status}

**Quick validation completed:**
- ✅ JavaScript linting
- ✅ Critical smoke tests

> 💡 **Note**: Full CI pipeline (including unit tests, E2E tests, and security scans) will run when this PR is ready for merge.

---
<sup>⚡ Smoke test completed in ~3 minutes | Full CI takes ~15-20 minutes</sup>`;
            
            // Find existing comment to update instead of creating new ones
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Smoke Test Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Optional full validation for ready PRs
  full-validation:
    name: 🎯 Full PR Validation
    runs-on: ubuntu-latest
    needs: smoke-test
    if: |
      contains(github.event.pull_request.labels.*.name, 'ready-for-review') ||
      contains(github.event.pull_request.labels.*.name, 'run-full-ci') ||
      github.event.pull_request.draft == false
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        test-suite: [unit-tests, e2e-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund
        
      - name: 🧪 Run Unit Tests
        if: matrix.test-suite == 'unit-tests'
        run: |
          mkdir -p data
          npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./data/test.db"
          
      - name: 🎭 Run E2E Tests
        if: matrix.test-suite == 'e2e-tests'
        run: |
          # Install Playwright browsers
          npx playwright install chromium --with-deps
          
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Configure environment
          cat > .env.local << EOF
          TURSO_DATABASE_URL=${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}
          E2E_TEST_MODE=true
          NODE_ENV=test
          PORT=3000
          EOF
          
          # Setup database
          npm run db:e2e:setup
          npm run migrate:e2e:up
          
          # Start Vercel dev server
          vercel dev --yes --listen 3000 &
          SERVER_PID=$!
          
          # Wait for server
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health/check >/dev/null 2>&1; then
              echo "✅ Vercel dev server ready"
              break
            fi
            sleep 2
          done
          
          # Run E2E tests (chromium only for speed)
          npm run test:e2e:vercel:ci -- --project=chromium
          
          # Cleanup
          kill $SERVER_PID || true
          npm run db:e2e:clean
        env:
          E2E_TEST_MODE: true
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
        continue-on-error: true  # Don't block PR for E2E failures
          
      - name: 📤 Upload test results
        if: always() && matrix.test-suite == 'e2e-tests'
        uses: actions/upload-artifact@v4
        with:
          name: pr-e2e-results
          path: |
            playwright-report/
            test-results/
          if-no-files-found: ignore
          retention-days: 3

  # Final PR status update
  pr-summary:
    name: 📊 PR Validation Summary
    runs-on: ubuntu-latest
    needs: [smoke-test, full-validation]
    if: always()
    
    steps:
      - name: 📊 Update PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const smokeResult = '${{ needs.smoke-test.result }}';
            const fullValidationResult = '${{ needs.full-validation.result }}';
            const fullValidationRan = '${{ needs.full-validation.result }}' !== 'skipped';
            
            let status = '';
            let summary = '';
            
            if (smokeResult === 'success' && (!fullValidationRan || fullValidationResult === 'success')) {
              status = '✅ All validations passed';
              summary = 'PR is ready for review and merge';
            } else if (smokeResult === 'success' && fullValidationResult === 'failure') {
              status = '⚠️ Smoke tests passed, full validation had issues';
              summary = 'Basic validation passed but some advanced tests failed';
            } else if (smokeResult === 'failure') {
              status = '❌ Smoke tests failed';
              summary = 'Basic validation failed - please fix issues before proceeding';
            } else {
              status = '⏳ Validation in progress';
              summary = 'Some validations are still running';
            }
            
            const body = `## 🎯 PR Validation Results

${status}

**Summary:** ${summary}

### Validation Status
- **Smoke Tests**: ${smokeResult === 'success' ? '✅ Passed' : '❌ Failed'}
- **Full Validation**: ${!fullValidationRan ? '⏭️ Skipped' : (fullValidationResult === 'success' ? '✅ Passed' : '❌ Failed')}

${!fullValidationRan ? `
> 💡 **Tip**: Add \`ready-for-review\` label or mark as ready for review to run full validation including E2E tests.
` : ''}

---
<sup>🚀 Add \`run-full-ci\` label to force complete CI validation</sup>`;
            
            // Find and update existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }