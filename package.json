{
  "name": "alocubano-boulderfest",
  "version": "1.0.0",
  "description": "A Lo Cubano Boulder Fest - Minimalist Dance Festival Website",
  "type": "module",
  "private": true,
  "engines": {
    "node": ">=18.0.0"
  },
  "packageManager": "npm@latest",
  "scripts": {
    "//": "=== BUILD & DEVELOPMENT ===",
    "build": "NODE_OPTIONS='--max-old-space-size=4096' node -e \"if(process.env.VERCEL === '1') { console.log('🚀 Vercel build complete - no build needed for serverless functions'); } else { console.log('🔧 Local build - running verification'); require('child_process').execSync('npm run verify-structure', {stdio:'inherit'}); }\" && echo 'Build process completed'",
    "build:vercel": "node build-vercel.cjs",
    "build:production": "NODE_OPTIONS='--max-old-space-size=4096' npm run build",
    "postbuild": "node -e \"if(process.env.VERCEL === '1') { console.log('🚀 Vercel postbuild - skipping verify-structure'); } else { import('./scripts/verify-structure.js').catch(e => console.log('Verify-structure skipped:', e.message)); }\"",
    "verify-structure": "node scripts/verify-structure.js",
    "//dev": "=== DEVELOPMENT SERVERS ===",
    "dev": "npm run start",
    "dev:local": "npm run start:local",
    "dev:clean": "npm run start:clean",
    "dev:e2e": "node scripts/vercel-dev-e2e.js",
    "prestart": "npm run migrate:up",
    "start": "node scripts/start-with-ngrok.js",
    "prestart:local": "npm run migrate:up",
    "start:local": "npx http-server . -p 8080",
    "start:clean": "rm -rf .vercel && node scripts/vercel-dev-wrapper.js",
    "serve:simple": "npx http-server . -p 8000",
    "//test": "=== TESTING (UNIT + INTEGRATION + E2E ENABLED) ===",
    "test": "npm run test:unit",
    "test:unit": "NODE_OPTIONS='--max-old-space-size=6144' vitest run --config tests/vitest.config.js",
    "test:unit:watch": "NODE_OPTIONS='--max-old-space-size=6144' vitest --config tests/vitest.config.js",
    "test:unit:coverage": "NODE_OPTIONS='--max-old-space-size=6144' vitest run --coverage --config tests/vitest.config.js",
    "//integration": "=== INTEGRATION TESTS ===",
    "test:integration": "NODE_OPTIONS='--max-old-space-size=4096' vitest run --config tests/config/vitest.integration.config.js",
    "test:integration:watch": "NODE_OPTIONS='--max-old-space-size=4096' vitest --config tests/config/vitest.integration.config.js",
    "test:integration:coverage": "NODE_OPTIONS='--max-old-space-size=4096' vitest run --coverage --config tests/config/vitest.integration.config.js",
    "test:integration:critical": "NODE_OPTIONS='--max-old-space-size=4096' vitest run --config tests/config/vitest.integration.config.js -t 'payment|stripe|critical'",
    "//e2e": "=== E2E TESTS (NOW ENABLED) ===",
    "test:e2e": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js",
    "test:e2e:ui": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --ui",
    "test:e2e:headed": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --headed",
    "test:e2e:debug": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --debug",
    "test:e2e:fast": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --project chromium",
    "test:e2e:report": "playwright show-report",
    "test:e2e:install": "playwright install --with-deps",
    "test:e2e:standard": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"basic-navigation|cart-functionality|registration-flow|admin-auth|gallery-basic|newsletter-simple\"",
    "test:e2e:advanced": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"payment-flow|ticket-validation|gallery-browsing|mobile-registration|user-engagement|admin-dashboard\"",
    "test:e2e:performance": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"performance|load|gallery-browsing|user-engagement\"",
    "test:e2e:accessibility": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"accessibility|mobile-registration\"",
    "test:e2e:security": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"security|admin|stripe|payment\"",
    "test:e2e:chromium": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --project chromium",
    "test:e2e:firefox": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --project firefox",
    "test:e2e:webkit": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --project webkit",
    "test:health": "node scripts/test-health-endpoint.js",
    "test:performance": "NODE_OPTIONS='--max-old-space-size=8192' node scripts/performance-test.js",
    "//test-all-note": "Note: test:all includes E2E tests which require PREVIEW_URL or active Vercel deployment",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:all:memory-optimized": "NODE_OPTIONS='--max-old-space-size=8192' npm run test:unit && npm run test:integration && npm run test:e2e",
    "//phase2": "=== PHASE 2 TESTING COMMANDS ===",
    "test:phase2": "echo '🚀 Phase 2: Running target <2s (UNIT + INTEGRATION + E2E ENABLED)' && npm run test:unit",
    "test:phase2:stats": "echo '📊 Phase 2: Analyzing massive test suite performance (UNIT + INTEGRATION + E2E)' && npm run test:unit 2>&1 | grep -E 'Tests|Duration|passed|failed'",
    "test:phase2:categories": "echo '📂 Phase 2: Security (248), Business Logic (300), Frontend (258) + Integration + E2E' && npm run test:unit",
    "test:phase2:performance": "echo '⚡ Phase 2: Target <2 seconds execution (UNIT + INTEGRATION + E2E)' && time npm run test:unit",
    "test:phase2:memory-profile": "NODE_OPTIONS='--max-old-space-size=8192 --inspect' npm run test:unit",
    "//re-enable": "=== RE-ENABLE COMMANDS (FOR FUTURE USE) ===",
    "test:integration:enable": "echo '✅ Integration tests are now ENABLED! Commands: test:integration, test:integration:watch, test:integration:coverage, test:integration:critical'",
    "test:e2e:enable": "echo '✅ E2E tests are now ENABLED! Use: test:e2e, test:e2e:ui, test:e2e:headed, test:e2e:debug'",
    "test:enable:all": "echo '✅ All test types are now ENABLED:' && echo '- Unit: test:unit (fast execution)' && echo '- Integration: test:integration (real APIs)' && echo '- E2E: test:e2e (Playwright with preview deployments)'",
    "//deprecated-test": "=== DEPRECATED TESTING (Use Phase 2 commands instead) ===",
    "test:simple": "echo '⚠️ DEPRECATED: Use \"npm run test:phase2\" for Phase 2 massive test suite (fast unit tests)' && npm run test:unit",
    "test:simple:watch": "echo '⚠️ DEPRECATED: Use \"npm run test:unit:watch\" instead' && npm run test:unit:watch",
    "test:coverage": "echo '⚠️ DEPRECATED: Use \"npm run test:unit:coverage\" instead' && npm run test:unit:coverage",
    "test:e2e:ci": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e\" (Preview Deployments) for modern E2E testing' && npm run test:e2e",
    "test:e2e:ci:standard": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:standard\" instead' && npm run test:e2e:standard",
    "test:e2e:ci:advanced": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:advanced\" instead' && npm run test:e2e:advanced",
    "test:e2e:ci:firefox": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:firefox\" instead' && npm run test:e2e:firefox",
    "test:e2e:ci:performance": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:performance\" instead' && npm run test:e2e:performance",
    "test:e2e:ci:accessibility": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:accessibility\" instead' && npm run test:e2e:accessibility",
    "test:e2e:ci:security": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:security\" instead' && npm run test:e2e:security",
    "test:e2e:ngrok": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e\" (modern approach with Preview Deployments)' && npm run test:e2e",
    "test:e2e:ngrok:ui": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:ui\" instead' && npm run test:e2e:ui",
    "test:e2e:ngrok:headed": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:headed\" instead' && npm run test:e2e:headed",
    "test:e2e:ngrok:debug": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:debug\" instead' && npm run test:e2e:debug",
    "test:e2e:ngrok:fast": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:fast\" instead' && npm run test:e2e:fast",
    "test:e2e:advanced:scenarios": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:advanced\" instead' && npm run test:e2e:advanced",
    "test:e2e:accessibility:scenarios": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:accessibility\" instead' && npm run test:e2e:accessibility",
    "test:e2e:performance:scenarios": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:performance\" instead' && npm run test:e2e:performance",
    "test:e2e:security:scenarios": "echo '⚠️ DEPRECATED: Use \"npm run test:e2e:security\" instead' && npm run test:e2e:security",
    "test:e2e:wallet": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"wallet\"",
    "test:e2e:database": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"database\"",
    "test:e2e:network": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"network|offline\"",
    "test:e2e:email": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"email|newsletter\"",
    "//phase3": "=== PHASE 3 - TEST ARCHITECTURE (ALL ENABLED) ===",
    "test:pyramid": "echo '🔺 Test Pyramid: Unit (806+) + Integration (~30) + E2E (206+)' && npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:pyramid:all": "echo '✅ Running complete test pyramid (Unit + Integration + E2E)' && npm run test:all",
    "test:pyramid:status": "echo '📊 Test Status:' && echo 'Unit: fast execution (ACTIVE)' && echo 'Integration: ~30 tests (ACTIVE)' && echo 'E2E: 206+ tests (ACTIVE)'",
    "test:integration:status": "echo '✅ Integration tests: ENABLED and available' && echo 'Commands: test:integration, test:integration:watch, test:integration:coverage, test:integration:critical'",
    "test:integration:disable": "echo 'ℹ️ To disable integration tests, change test:integration commands to _test:integration in package.json'",
    "test:env:validate": "node -e \"import('./tests/config/test-environment.js').then(m => { console.log('✅ Validating test environments (ALL ENABLED)...'); m.validateEnvironment(m.TEST_ENVIRONMENTS.UNIT); })\"",
    "test:env:unit": "node -e \"import('./tests/config/test-environment.js').then(m => m.configureEnvironment(m.TEST_ENVIRONMENTS.UNIT))\"",
    "test:env:integration": "node -e \"import('./tests/config/test-environment.js').then(m => m.configureEnvironment(m.TEST_ENVIRONMENTS.INTEGRATION))\"",
    "test:config:validate": "echo '🔍 Validating test configurations (ALL ENABLED)...' && node -e \"import('./tests/config/vitest.unit.config.js').then(config => console.log('✅ Unit test configuration validated'))\"",
    "//tools": "=== VALIDATION & SETUP TOOLS ===",
    "test:e2e:validate": "echo '🔍 Validating E2E test environment...' && npm run test:health && echo '✅ E2E validation completed'",
    "test:e2e:setup": "echo '🔧 Setting up E2E test environment...' && npm run test:e2e:install && npm run migrate:e2e:up && echo '✅ E2E setup completed'",
    "test:e2e:setup:interactive": "echo '🎯 Interactive E2E setup...' && npm run test:e2e:install && npm run test:e2e:ui",
    "playwright:validate": "echo '🎭 Validating Playwright configuration...' && playwright test --list --config playwright-e2e-preview.config.js && echo '✅ Playwright validation completed'",
    "vercel:validate": "echo '🚀 Validating Vercel configuration...' && vercel whoami && echo '✅ Vercel validation completed'",
    "//deprecated-dev": "=== DEPRECATED DEVELOPMENT (Use dev commands instead) ===",
    "start:ci": "echo '❌ DEPRECATED: CI servers no longer needed. Use Vercel Preview Deployments for E2E testing.' && exit 1",
    "start:ci:port": "echo '❌ DEPRECATED: CI servers no longer needed. Use Vercel Preview Deployments for E2E testing.' && exit 1",
    "vercel:dev": "echo '⚠️ DEPRECATED: Use \"npm run dev\" or \"npm run start\" instead' && vercel dev --yes --listen 3000",
    "vercel:dev:ci": "echo '❌ DEPRECATED: Use Vercel Preview Deployments instead' && exit 1",
    "//preview": "=== PREVIEW DEPLOYMENT TESTING (NOW ENABLED) ===",
    "preview:extract-url": "echo '🔍 Extracting preview URL from CI environment...' && node scripts/extract-preview-url.js",
    "preview:extract-url:env": "echo '🔍 Extracting and setting preview URL as environment variable...' && node scripts/extract-preview-url.js --set-env",
    "preview:validate": "echo '✅ Validating preview deployment...' && node scripts/validate-preview-deployment.js",
    "preview:test": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js",
    "preview:test:headed": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --headed",
    "preview:test:debug": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --debug",
    "preview:test:chromium": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --project chromium",
    "preview:test:performance": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"performance|load\"",
    "preview:test:security": "NODE_OPTIONS='--max-old-space-size=3072' playwright test --config playwright-e2e-preview.config.js --grep \"security|admin\"",
    "preview:setup:validate": "echo '🔧 Validating preview deployment setup...' && npm run preview:validate && npm run playwright:validate",
    "//lint": "=== LINTING & QUALITY ===",
    "lint": "npm run lint:js && npm run lint:html && npm run lint:markdown",
    "lint:js": "eslint --config config/eslint.config.js js/**/*.js",
    "lint:html": "htmlhint --config config/.htmlhintrc pages/**/*.html",
    "lint:markdown": "markdownlint *.md CLAUDE.md INSTALLATION.md SECURITY.md --ignore node_modules --ignore .tmp",
    "//database": "=== DATABASE & MIGRATIONS ===",
    "migrate:up": "DOTENV_CONFIG_PATH=.env.local node -r dotenv/config scripts/migrate.js",
    "migrate:status": "node scripts/migrate.js status",
    "migrate:verify": "node scripts/migrate.js verify",
    "migrate:e2e:up": "echo '🗄️ Running E2E database migrations...' && DOTENV_CONFIG_PATH=.env.local NODE_ENV=test node -r dotenv/config scripts/migrate-e2e.js",
    "migrate:e2e:status": "echo '📊 Checking E2E database migration status...' && NODE_ENV=test node scripts/migrate.js status",
    "db:shell": "sqlite3 data/development.db",
    "db:e2e:setup": "echo '🔧 Setting up E2E database...' && npm run migrate:e2e:up && echo '✅ E2E database ready'",
    "db:e2e:clean": "echo '🧹 Cleaning E2E database...' && rm -f data/e2e-test*.db && echo '✅ E2E database cleaned'",
    "db:e2e:reset": "echo '🔄 Resetting E2E database...' && npm run db:e2e:clean && npm run db:e2e:setup && echo '✅ E2E database reset'",
    "db:e2e:validate": "echo '✅ Validating E2E database...' && node scripts/validate-e2e-database.js",
    "//health": "=== HEALTH & MONITORING ===",
    "health:check": "node scripts/test-health-endpoint.js",
    "health:database": "node scripts/test-database-health.js",
    "//optimization": "=== CI OPTIMIZATION & DEPENDENCIES ===",
    "quality:gates": "node scripts/quality-gates.js local",
    "quality:gates:ci": "node scripts/quality-gates.js ci",
    "quality:gates:report": "node scripts/quality-gates.js report",
    "quality:gates:dashboard": "node scripts/quality-gates.js dashboard",
    "ci:optimize": "node scripts/ci-performance-optimizer.js",
    "npm:optimize": "node scripts/optimize-npm-ci.js",
    "npm:optimize:config": "node scripts/optimize-npm-ci.js config",
    "npm:optimize:analyze": "node scripts/optimize-npm-ci.js analyze",
    "manage:deps": "node scripts/manage-dependencies.js",
    "manage:deps:analyze": "node scripts/manage-dependencies.js analyze",
    "manage:deps:security": "node scripts/manage-dependencies.js security",
    "manage:deps:update": "node scripts/manage-dependencies.js update",
    "manage:deps:optimize": "node scripts/manage-dependencies.js optimize",
    "manage:deps:report": "node scripts/manage-dependencies.js report",
    "validate:ci": "node scripts/validate-ci-quick.js",
    "validate:ci:full": "node scripts/validate-ci-optimization.js",
    "validate:ci:verbose": "node scripts/validate-ci-optimization.js --verbose",
    "validate:ci:export": "node scripts/validate-ci-optimization.js --export-json",
    "validate:port-config": "node scripts/validate-port-standardization.js",
    "validate:scripts": "node scripts/validate-package-scripts.js",
    "//perf": "=== PERFORMANCE & AUDIT ===",
    "performance:audit": "lighthouse http://localhost:8000 --output-path=./performance-audit.html --save-assets",
    "//deploy": "=== DEPLOYMENT ===",
    "deploy:check": "NODE_OPTIONS='--max-old-space-size=3072' node scripts/deployment-check.js",
    "deploy:staging": "NODE_OPTIONS='--max-old-space-size=3072' npm run lint && npm run test:all && vercel --target preview",
    "deploy:production": "NODE_OPTIONS='--max-old-space-size=4096' npm run lint && npm run test:all && vercel --target production",
    "pre-commit": "npm run lint && npm test"
  },
  "dependencies": {
    "@libsql/client": "^0.15.14",
    "@sentry/node": "^7.120.4",
    "@stripe/stripe-js": "^7.9.0",
    "@types/node": "^24.3.0",
    "bcryptjs": "^3.0.2",
    "better-sqlite3": "^12.2.0",
    "cookie": "^1.0.2",
    "dotenv": "^17.2.2",
    "dotenv-cli": "^10.0.0",
    "google-auth-library": "^10.3.0",
    "googleapis": "^153.0.0",
    "helmet": "^8.1.0",
    "html5-qrcode": "^2.3.8",
    "ioredis": "^5.7.0",
    "ip-range-check": "^0.2.0",
    "jsonwebtoken": "^9.0.2",
    "node-fetch": "^3.3.2",
    "passkit-generator": "^3.4.0",
    "qrcode": "^1.5.4",
    "redis": "^4.7.1",
    "sharp": "^0.34.3",
    "speakeasy": "^2.0.0",
    "sqlite": "^5.1.1",
    "stripe": "^18.5.0",
    "thirty-two": "^1.0.2",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@babel/core": "^7.28.3",
    "@babel/preset-env": "^7.28.3",
    "@playwright/test": "^1.55.0",
    "@vitest/coverage-v8": "^2.1.9",
    "eslint": "^9.34.0",
    "express": "^5.1.0",
    "globals": "^15.15.0",
    "htmlhint": "^1.6.3",
    "http-server": "^14.1.1",
    "js-yaml": "^4.1.0",
    "jsdom": "^26.1.0",
    "lighthouse": "^12.8.2",
    "markdownlint-cli": "^0.45.0",
    "ngrok": "^5.0.0-beta.2",
    "nodemon": "^3.1.10",
    "vercel": "^47.0.1",
    "vitest": "^2.1.9"
  },
  "scripts-guide": {
    "current": {
      "development": [
        "npm run dev - Start development server with ngrok",
        "npm run dev:local - Start local HTTP server (port 8080)",
        "npm run dev:clean - Clean start with fresh Vercel config"
      ],
      "testing": [
        "npm test - Run unit tests ONLY (fast execution) - quick feedback loop",
        "npm run test:unit:watch - Unit tests in watch mode (memory optimized)",
        "npm run test:unit:coverage - Unit tests with coverage (memory optimized)",
        "npm run test:integration - Integration tests (~30 tests with real API calls)",
        "npm run test:integration:watch - Integration tests in watch mode",
        "npm run test:integration:coverage - Integration tests with coverage",
        "npm run test:integration:critical - Critical payment and Stripe integration tests",
        "npm run test:e2e - E2E tests with Vercel Preview Deployments (NOW ENABLED)",
        "npm run test:e2e:ui - E2E tests with interactive UI mode (NOW ENABLED)",
        "npm run test:e2e:headed - E2E tests with visible browser (NOW ENABLED)",
        "npm run test:e2e:debug - E2E tests with debug mode (NOW ENABLED)",
        "npm run test:all - Unit + Integration + E2E tests (ALL ENABLED)",
        "npm run test:phase2 - Dedicated Phase 2 test command with stats"
      ],
      "deployment": [
        "npm run deploy:staging - Deploy to staging with quality gates (all test types)",
        "npm run deploy:production - Deploy to production (all test types)",
        "npm run deploy:check - Pre-deployment validation"
      ],
      "validation": [
        "npm run validate:scripts - Validate package.json scripts organization and consistency"
      ]
    },
    "all-tests-enabled-mode": {
      "note": "All test types are now enabled: Unit, Integration, and E2E tests with Vercel Preview Deployments",
      "active": [
        "test - Run 806+ unit tests in <2 seconds (quick feedback)",
        "test:unit - Direct unit test execution",
        "test:unit:watch - Unit tests in watch mode",
        "test:unit:coverage - Unit tests with coverage",
        "test:integration - Integration tests (~30 tests with real APIs)",
        "test:integration:watch - Integration tests in watch mode",
        "test:integration:coverage - Integration tests with coverage",
        "test:integration:critical - Critical payment integration tests",
        "test:e2e - E2E tests with Vercel Preview Deployments (206+ tests)",
        "test:e2e:ui - E2E tests with interactive UI mode",
        "test:e2e:headed - E2E tests with visible browser",
        "test:e2e:debug - E2E tests with debug mode",
        "test:e2e:fast - E2E tests with Chromium only (fastest)",
        "test:e2e:standard - Standard E2E test suite (core flows)",
        "test:e2e:advanced - Advanced E2E scenarios",
        "test:e2e:performance - Performance-focused E2E tests",
        "test:e2e:accessibility - Accessibility compliance E2E tests",
        "test:e2e:security - Security-focused E2E tests",
        "test:all - Complete test pyramid (Unit + Integration + E2E)"
      ],
      "enabled": [
        "All test commands are now fully operational",
        "E2E tests use modern Vercel Preview Deployments",
        "Memory optimization applied to all test types",
        "Browser-specific and scenario-specific E2E commands available"
      ],
      "benefits": [
        "Complete test coverage across all layers",
        "Real production environment E2E testing",
        "Fast unit tests for immediate feedback",
        "Integration tests for API validation",
        "Comprehensive E2E scenarios for user flows"
      ]
    },
    "deprecated": {
      "note": "Deprecated scripts show warnings and redirect to modern alternatives",
      "migration": [
        "test:simple → test:phase2 (Phase 2: fast unit tests)",
        "_test:e2e → test:e2e (NOW ENABLED with Preview Deployments)",
        "test:e2e:ci → test:e2e (modern approach)",
        "test:e2e:ngrok → test:e2e (modern approach)",
        "start:ci → Not needed (use Vercel Preview Deployments)",
        "vercel:dev:ci → Not needed (use Vercel Preview Deployments)"
      ]
    }
  },
  "description-features": {
    "architecture": [
      "Serverless API with Vercel functions",
      "Vanilla JavaScript frontend (ES6 modules)",
      "SQLite for development, Turso for production",
      "Redis for caching (ioredis)",
      "Google Drive gallery integration",
      "Stripe payment processing",
      "Apple & Google Wallet passes"
    ],
    "testing": [
      "COMPLETE TEST PYRAMID: 806+ unit tests in <2s + ~30 integration tests + 206+ E2E tests (ALL ENABLED)",
      "Unit test categories: Security (248 tests), Business Logic (300 tests), Frontend (258 tests)",
      "Memory-optimized execution: 6GB allocation for unit tests, 4GB for integration tests, 3GB for E2E tests",
      "Integration tests: ENABLED (~30 tests with real API calls, payment processing, database operations)",
      "E2E tests: ENABLED (206+ Playwright tests with Vercel Preview Deployments for production-like testing)",
      "SQLite for unit tests, production database for integration and E2E tests",
      "Layered testing: Fast unit tests for immediate feedback, integration tests for API validation, E2E tests for user flows",
      "Modern E2E approach: Vercel Preview Deployments eliminate server management complexity"
    ],
    "e2e-features": [
      "Vercel Preview Deployments for production-like testing",
      "Multiple browser support: Chromium, Firefox, WebKit, Mobile Chrome, Mobile Safari",
      "Test suites: Standard (core flows), Advanced (complex scenarios), Performance, Accessibility, Security",
      "Interactive modes: UI mode, headed mode, debug mode for development",
      "Comprehensive scenarios: Basic navigation, cart functionality, registration flow, admin authentication",
      "Advanced scenarios: Payment processing, ticket validation, gallery browsing, mobile experience",
      "Performance testing: Load testing, response time validation, resource monitoring",
      "Accessibility compliance: WCAG 2.1 validation, mobile accessibility testing",
      "Security testing: Admin protection, webhook security, input validation"
    ]
  }
}