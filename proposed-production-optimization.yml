# Streamlined Production Deployment
name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run database migrations'
        default: 'auto'
        type: choice
        options: [auto, force, skip]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Pre-deployment validation
  validate:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run critical tests only
        run: npm run test:unit
      - name: Security scan
        run: npm audit --audit-level=critical

  # Database migrations (if needed)
  migrate:
    name: Database Migrations
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.run_migrations != 'skip'
    outputs:
      migrations_applied: ${{ steps.migrate.outputs.applied }}
    steps:
      - uses: actions/checkout@v4
      - name: Check migration status
        id: status
        run: |
          # Simplified migration check
          response=$(curl -s -f "https://${{ secrets.VERCEL_PRODUCTION_URL }}/api/migrate" \
            -H "x-migration-key: ${{ secrets.MIGRATION_SECRET_KEY }}" \
            -d '{"action": "status"}')
          pending=$(echo "$response" | jq -r '.result.pending // 0')
          echo "pending=$pending" >> $GITHUB_OUTPUT
      - name: Run migrations
        id: migrate
        if: steps.status.outputs.pending > 0
        run: |
          response=$(curl -s -f "https://${{ secrets.VERCEL_PRODUCTION_URL }}/api/migrate" \
            -H "x-migration-key: ${{ secrets.MIGRATION_SECRET_KEY }}" \
            -d '{"action": "run"}')
          applied=$(echo "$response" | jq -r '.result.deployed // 0')
          echo "applied=$applied" >> $GITHUB_OUTPUT

  # Let Vercel handle the deployment automatically
  # This job just validates the deployment succeeded
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [validate, migrate]
    if: always() && needs.validate.result == 'success'
    steps:
      - name: Wait for Vercel deployment
        run: |
          echo "Waiting for Vercel auto-deployment to complete..."
          sleep 30  # Give Vercel time to deploy
      - name: Validate deployment health
        run: |
          response=$(curl -s "https://${{ secrets.VERCEL_PRODUCTION_URL }}/api/test-db")
          status=$(echo "$response" | jq -r '.status')
          if [ "$status" = "healthy" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment validation failed"
            exit 1
          fi
      - name: Deployment summary
        run: |
          echo "### 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Migrations**: ${{ needs.migrate.outputs.migrations_applied || '0' }} applied" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Healthy" >> $GITHUB_STEP_SUMMARY